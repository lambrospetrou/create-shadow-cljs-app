(function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
            typeof define === 'function' && define.amd ? define(factory) :
            (global = global || self, global.RollupModule = factory());
}(this, function () { 'use strict';

            var global$1 = (typeof global !== "undefined" ? global :
                        typeof self !== "undefined" ? self :
                        typeof window !== "undefined" ? window : {});

            // shim for using process in browser
            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            var title = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues
            var versions = {};
            var release = {};
            var config = {};

            function noop() {}

            var on = noop;
            var addListener = noop;
            var once = noop;
            var off = noop;
            var removeListener = noop;
            var removeAllListeners = noop;
            var emit = noop;

            function binding(name) {
                throw new Error('process.binding is not supported');
            }

            function cwd () { return '/' }
            function chdir (dir) {
                throw new Error('process.chdir is not supported');
            }function umask() { return 0; }

            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
            var performance$1 = global$1.performance || {};
            var performanceNow =
              performance$1.now        ||
              performance$1.mozNow     ||
              performance$1.msNow      ||
              performance$1.oNow       ||
              performance$1.webkitNow  ||
              function(){ return (new Date()).getTime() };

            // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime
            function hrtime(previousTimestamp){
              var clocktime = performanceNow.call(performance$1)*1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor((clocktime%1)*1e9);
              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];
                if (nanoseconds<0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }
              return [seconds,nanoseconds]
            }

            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }

            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            //
            // ShellJS
            // Unix shell commands on top of Node's API
            //
            // Copyright (c) 2012 Artur Adib
            // http://github.com/shelljs/shelljs
            //

            var common = require('./src/common');

            //@
            //@ All commands run synchronously, unless otherwise stated.
            //@ All commands accept standard bash globbing characters (`*`, `?`, etc.),
            //@ compatible with the [node `glob` module](https://github.com/isaacs/node-glob).
            //@
            //@ For less-commonly used commands and features, please check out our [wiki
            //@ page](https://github.com/shelljs/shelljs/wiki).
            //@

            // Include the docs for all the default commands
            //@commands

            // Load all default commands
            require('./commands').forEach(function (command) {
              require('./src/' + command);
            });

            //@
            //@ ### exit(code)
            //@
            //@ Exits the current process with the given exit `code`.
            exports.exit = process.exit;

            //@include ./src/error
            exports.error = require('./src/error');

            //@include ./src/common
            exports.ShellString = common.ShellString;

            //@
            //@ ### env['VAR_NAME']
            //@
            //@ Object containing environment variables (both getter and setter). Shortcut
            //@ to `process.env`.
            exports.env = process.env;

            //@
            //@ ### Pipes
            //@
            //@ Examples:
            //@
            //@ ```javascript
            //@ grep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');
            //@ echo('files with o\'s in the name:\n' + ls().grep('o'));
            //@ cat('test.js').exec('node'); // pipe to exec() call
            //@ ```
            //@
            //@ Commands can send their output to another command in a pipe-like fashion.
            //@ `sed`, `grep`, `cat`, `exec`, `to`, and `toEnd` can appear on the right-hand
            //@ side of a pipe. Pipes can be chained.

            //@
            //@ ## Configuration
            //@

            exports.config = common.config;

            //@
            //@ ### config.silent
            //@
            //@ Example:
            //@
            //@ ```javascript
            //@ var sh = require('shelljs');
            //@ var silentState = sh.config.silent; // save old silent state
            //@ sh.config.silent = true;
            //@ /* ... */
            //@ sh.config.silent = silentState; // restore old silent state
            //@ ```
            //@
            //@ Suppresses all command output if `true`, except for `echo()` calls.
            //@ Default is `false`.

            //@
            //@ ### config.fatal
            //@
            //@ Example:
            //@
            //@ ```javascript
            //@ require('shelljs/global');
            //@ config.fatal = true; // or set('-e');
            //@ cp('this_file_does_not_exist', '/dev/null'); // throws Error here
            //@ /* more commands... */
            //@ ```
            //@
            //@ If `true`, the script will throw a Javascript error when any shell.js
            //@ command encounters an error. Default is `false`. This is analogous to
            //@ Bash's `set -e`.

            //@
            //@ ### config.verbose
            //@
            //@ Example:
            //@
            //@ ```javascript
            //@ config.verbose = true; // or set('-v');
            //@ cd('dir/');
            //@ rm('-rf', 'foo.txt', 'bar.txt');
            //@ exec('echo hello');
            //@ ```
            //@
            //@ Will print each command as follows:
            //@
            //@ ```
            //@ cd dir/
            //@ rm -rf foo.txt bar.txt
            //@ exec echo hello
            //@ ```

            //@
            //@ ### config.globOptions
            //@
            //@ Example:
            //@
            //@ ```javascript
            //@ config.globOptions = {nodir: true};
            //@ ```
            //@
            //@ Use this value for calls to `glob.sync()` instead of the default options.

            //@
            //@ ### config.reset()
            //@
            //@ Example:
            //@
            //@ ```javascript
            //@ var shell = require('shelljs');
            //@ // Make changes to shell.config, and do stuff...
            //@ /* ... */
            //@ shell.config.reset(); // reset to original state
            //@ // Do more stuff, but with original settings
            //@ /* ... */
            //@ ```
            //@
            //@ Reset `shell.config` to the defaults:
            //@
            //@ ```javascript
            //@ {
            //@   fatal: false,
            //@   globOptions: {},
            //@   maxdepth: 255,
            //@   noglob: false,
            //@   silent: false,
            //@   verbose: false,
            //@ }
            //@ ```

            var shell = /*#__PURE__*/Object.freeze({

            });

            // classic singleton yargs API, to use yargs
            // without running as a singleton do:
            // require('yargs/yargs')(process.argv.slice(2))
            const yargs = require('./yargs');

            Argv(process.argv.slice(2));

            module.exports = Argv;

            function Argv (processArgs, cwd) {
              const argv = yargs(processArgs, cwd, require);
              singletonify(argv);
              return argv
            }

            /*  Hack an instance of Argv with process.argv into Argv
                so people can do
                require('yargs')(['--beeble=1','-z','zizzle']).argv
                to parse a list of args and
                require('yargs').argv
                to get a parsed version of process.argv.
            */
            function singletonify (inst) {
              Object.keys(inst).forEach((key) => {
                if (key === 'argv') {
                  Argv.__defineGetter__(key, inst.__lookupGetter__(key));
                } else if (typeof inst[key] === 'function') {
                  Argv[key] = inst[key].bind(inst);
                } else {
                  Argv.__defineGetter__('$0', () => {
                    return inst.$0
                  });
                  Argv.__defineGetter__('parsed', () => {
                    console.warn('In future major releases of yargs, "parsed" will be a private field. Use the return value of ".parse()" or ".argv" instead');
                    return inst.parsed
                  });
                }
              });
            }

            var yargs$1 = /*#__PURE__*/Object.freeze({

            });

            var __dirname = '/home/lambros/dev/github/create-shadow-cljs-app/build';

            (function(root, factory) {
              if (typeof define === "function" && define.amd) {
                define([], factory);
              } else if (typeof module === "object" && module.exports) {
                module.exports = factory();
              } else {
                root.returnExports = factory();
              }
            })(undefined, function() {
              var shadow$umd$export = null;

              var COMPILED = !0, goog = goog || {};
            goog.global = global$1;
            goog.isDef = function(val) {
              return void 0 !== val;
            };
            goog.isString = function(val) {
              return "string" == typeof val;
            };
            goog.isBoolean = function(val) {
              return "boolean" == typeof val;
            };
            goog.isNumber = function(val) {
              return "number" == typeof val;
            };
            goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
              name = name.split(".");
              opt_objectToExportTo = opt_objectToExportTo || goog.global;
              name[0] in opt_objectToExportTo || "undefined" == typeof opt_objectToExportTo.execScript || opt_objectToExportTo.execScript("var " + name[0]);
              for (var part; name.length && (part = name.shift());) {
                !name.length && goog.isDef(opt_object) ? opt_objectToExportTo[part] = opt_object : opt_objectToExportTo = opt_objectToExportTo[part] && opt_objectToExportTo[part] !== Object.prototype[part] ? opt_objectToExportTo[part] : opt_objectToExportTo[part] = {};
              }
            };
            goog.define = function(name, defaultValue) {
              goog.exportPath_(name, defaultValue);
              return defaultValue;
            };
            goog.DEBUG = !1;
            goog.LOCALE = "en";
            goog.TRUSTED_SITE = !0;
            goog.STRICT_MODE_COMPATIBLE = !1;
            goog.DISALLOW_TEST_ONLY_CODE =  !goog.DEBUG;
            goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1;
            goog.provide = function(name) {
              if (goog.isInModuleLoader_()) {
                throw Error("goog.provide cannot be used within a module.");
              }
              goog.constructNamespace_(name);
            };
            goog.constructNamespace_ = function(name, opt_obj) {
              goog.exportPath_(name, opt_obj);
            };
            goog.getScriptNonce = function(opt_window) {
              if (opt_window && opt_window != goog.global) {
                return goog.getScriptNonce_(opt_window.document);
              }
              null === goog.cspNonce_ && (goog.cspNonce_ = goog.getScriptNonce_(goog.global.document));
              return goog.cspNonce_;
            };
            goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
            goog.cspNonce_ = null;
            goog.getScriptNonce_ = function(doc) {
              return (doc = doc.querySelector && doc.querySelector("script[nonce]")) && (doc = doc.nonce || doc.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(doc) ? doc : "";
            };
            goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
            goog.module = function(name) {
              if (!goog.isString(name) || !name || -1 == name.search(goog.VALID_MODULE_RE_)) {
                throw Error("Invalid module identifier");
              }
              if (!goog.isInGoogModuleLoader_()) {
                throw Error("Module " + name + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
              }
              if (goog.moduleLoaderState_.moduleName) {
                throw Error("goog.module may only be called once per module.");
              }
              goog.moduleLoaderState_.moduleName = name;
            };
            goog.module.get = function(name) {
              return goog.module.getInternal_(name);
            };
            goog.module.getInternal_ = function(name) {
              return null;
            };
            goog.ModuleType = {ES6:"es6", GOOG:"goog"};
            goog.moduleLoaderState_ = null;
            goog.isInModuleLoader_ = function() {
              return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
            };
            goog.isInGoogModuleLoader_ = function() {
              return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
            };
            goog.isInEs6ModuleLoader_ = function() {
              if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6) {
                return !0;
              }
              var jscomp = goog.global.$jscomp;
              return jscomp ? "function" != typeof jscomp.getCurrentModulePath ? !1 : !!jscomp.getCurrentModulePath() : !1;
            };
            goog.module.declareLegacyNamespace = function() {
              goog.moduleLoaderState_.declareLegacyNamespace = !0;
            };
            goog.declareModuleId = function(namespace) {
              if (goog.moduleLoaderState_) {
                goog.moduleLoaderState_.moduleName = namespace;
              } else {
                var jscomp = goog.global.$jscomp;
                if (!jscomp || "function" != typeof jscomp.getCurrentModulePath) {
                  throw Error('Module with namespace "' + namespace + '" has been loaded incorrectly.');
                }
                jscomp = jscomp.require(jscomp.getCurrentModulePath());
                goog.loadedModules_[namespace] = {exports:jscomp, type:goog.ModuleType.ES6, moduleId:namespace};
              }
            };
            goog.module.declareNamespace = goog.declareModuleId;
            goog.setTestOnly = function(opt_message) {
              if (goog.DISALLOW_TEST_ONLY_CODE) {
                throw opt_message = opt_message || "", Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
              }
            };
            goog.forwardDeclare = function(name) {
            };
            goog.getObjectByName = function(name, opt_obj) {
              name = name.split(".");
              opt_obj = opt_obj || goog.global;
              for (var i = 0; i < name.length; i++) {
                if (opt_obj = opt_obj[name[i]], !goog.isDefAndNotNull(opt_obj)) {
                  return null;
                }
              }
              return opt_obj;
            };
            goog.globalize = function(obj, opt_global) {
              opt_global = opt_global || goog.global;
              for (var x in obj) {
                opt_global[x] = obj[x];
              }
            };
            goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
            };
            goog.ENABLE_DEBUG_LOADER = !1;
            goog.logToConsole_ = function(msg) {
              goog.global.console && goog.global.console.error(msg);
            };
            goog.require = function(namespace) {
            };
            goog.requireType = function(namespace) {
              return {};
            };
            goog.basePath = "";
            goog.nullFunction = function() {
            };
            goog.abstractMethod = function() {
              throw Error("unimplemented abstract method");
            };
            goog.addSingletonGetter = function(ctor) {
              ctor.instance_ = void 0;
              ctor.getInstance = function() {
                if (ctor.instance_) {
                  return ctor.instance_;
                }
                goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor);
                return ctor.instance_ = new ctor;
              };
            };
            goog.instantiatedSingletons_ = [];
            goog.LOAD_MODULE_USING_EVAL = !0;
            goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
            goog.loadedModules_ = {};
            goog.DEPENDENCIES_ENABLED = !COMPILED ;
            goog.TRANSPILE = "never";
            goog.ASSUME_ES_MODULES_TRANSPILED = !1;
            goog.TRANSPILE_TO_LANGUAGE = "";
            goog.TRANSPILER = "transpile.js";
            goog.hasBadLetScoping = null;
            goog.useSafari10Workaround = function() {
              if (null == goog.hasBadLetScoping) {
                try {
                  var hasBadLetScoping = !eval('"use strict";let x \x3d 1; function f() { return typeof x; };f() \x3d\x3d "number";');
                } catch (e) {
                  hasBadLetScoping = !1;
                }
                goog.hasBadLetScoping = hasBadLetScoping;
              }
              return goog.hasBadLetScoping;
            };
            goog.workaroundSafari10EvalBug = function(moduleDef) {
              return "(function(){" + moduleDef + "\n;})();\n";
            };
            goog.loadModule = function(moduleDef) {
              var previousState = goog.moduleLoaderState_;
              try {
                goog.moduleLoaderState_ = {moduleName:"", declareLegacyNamespace:!1, type:goog.ModuleType.GOOG};
                if (goog.isFunction(moduleDef)) {
                  var exports = moduleDef.call(void 0, {});
                } else {
                  if (goog.isString(moduleDef)) {
                    goog.useSafari10Workaround() && (moduleDef = goog.workaroundSafari10EvalBug(moduleDef)), exports = goog.loadModuleFromSource_.call(void 0, moduleDef);
                  } else {
                    throw Error("Invalid module definition");
                  }
                }
                var moduleName = goog.moduleLoaderState_.moduleName;
                if (goog.isString(moduleName) && moduleName) {
                  goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(moduleName, exports) : goog.SEAL_MODULE_EXPORTS && Object.seal && "object" == typeof exports && null != exports && Object.seal(exports), goog.loadedModules_[moduleName] = {exports:exports, type:goog.ModuleType.GOOG, moduleId:goog.moduleLoaderState_.moduleName};
                } else {
                  throw Error('Invalid module name "' + moduleName + '"');
                }
              } finally {
                goog.moduleLoaderState_ = previousState;
              }
            };
            goog.loadModuleFromSource_ = function(JSCompiler_OptimizeArgumentsArray_p0) {
              eval(JSCompiler_OptimizeArgumentsArray_p0);
              return {};
            };
            goog.normalizePath_ = function(path) {
              path = path.split("/");
              for (var i = 0; i < path.length;) {
                "." == path[i] ? path.splice(i, 1) : i && ".." == path[i] && path[i - 1] && ".." != path[i - 1] ? path.splice(--i, 2) : i++;
              }
              return path.join("/");
            };
            goog.loadFileSync_ = function(src) {
              if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
                return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
              }
              try {
                var xhr = new goog.global.XMLHttpRequest;
                xhr.open("get", src, !1);
                xhr.send();
                return 0 == xhr.status || 200 == xhr.status ? xhr.responseText : null;
              } catch (err) {
                return null;
              }
            };
            goog.transpile_ = function(code$jscomp$0, path$jscomp$0, target) {
              var jscomp = goog.global.$jscomp;
              jscomp || (goog.global.$jscomp = jscomp = {});
              var transpile = jscomp.transpile;
              if (!transpile) {
                var transpilerPath = goog.basePath + goog.TRANSPILER, transpilerCode = goog.loadFileSync_(transpilerPath);
                if (transpilerCode) {
                  (function() {
                    eval(transpilerCode + "\n//# sourceURL\x3d" + transpilerPath);
                  }).call(goog.global);
                  if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile) {
                    throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
                  }
                  goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
                  jscomp = goog.global.$jscomp;
                  transpile = jscomp.transpile;
                }
              }
              transpile || (transpile = jscomp.transpile = function(code, path) {
                goog.logToConsole_(path + " requires transpilation but no transpiler was found.");
                return code;
              });
              return transpile(code$jscomp$0, path$jscomp$0, target);
            };
            goog.typeOf = function(value) {
              var s = typeof value;
              if ("object" == s) {
                if (value) {
                  if (value instanceof Array) {
                    return "array";
                  }
                  if (value instanceof Object) {
                    return s;
                  }
                  var className = Object.prototype.toString.call(value);
                  if ("[object Window]" == className) {
                    return "object";
                  }
                  if ("[object Array]" == className || "number" == typeof value.length && "undefined" != typeof value.splice && "undefined" != typeof value.propertyIsEnumerable && !value.propertyIsEnumerable("splice")) {
                    return "array";
                  }
                  if ("[object Function]" == className || "undefined" != typeof value.call && "undefined" != typeof value.propertyIsEnumerable && !value.propertyIsEnumerable("call")) {
                    return "function";
                  }
                } else {
                  return "null";
                }
              } else {
                if ("function" == s && "undefined" == typeof value.call) {
                  return "object";
                }
              }
              return s;
            };
            goog.isNull = function(val) {
              return null === val;
            };
            goog.isDefAndNotNull = function(val) {
              return null != val;
            };
            goog.isArray = function(val) {
              return "array" == goog.typeOf(val);
            };
            goog.isArrayLike = function(val) {
              var type = goog.typeOf(val);
              return "array" == type || "object" == type && "number" == typeof val.length;
            };
            goog.isDateLike = function(val) {
              return goog.isObject(val) && "function" == typeof val.getFullYear;
            };
            goog.isFunction = function(val) {
              return "function" == goog.typeOf(val);
            };
            goog.isObject = function(val) {
              var type = typeof val;
              return "object" == type && null != val || "function" == type;
            };
            goog.getUid = function(obj) {
              return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
            };
            goog.hasUid = function(obj) {
              return !!obj[goog.UID_PROPERTY_];
            };
            goog.removeUid = function(obj) {
              null !== obj && "removeAttribute" in obj && obj.removeAttribute(goog.UID_PROPERTY_);
              try {
                delete obj[goog.UID_PROPERTY_];
              } catch (ex) {
              }
            };
            goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0);
            goog.uidCounter_ = 0;
            goog.getHashCode = goog.getUid;
            goog.removeHashCode = goog.removeUid;
            goog.cloneObject = function(obj) {
              var type = goog.typeOf(obj);
              if ("object" == type || "array" == type) {
                if ("function" === typeof obj.clone) {
                  return obj.clone();
                }
                type = "array" == type ? [] : {};
                for (var key in obj) {
                  type[key] = goog.cloneObject(obj[key]);
                }
                return type;
              }
              return obj;
            };
            goog.bindNative_ = function(fn, selfObj, var_args) {
              return fn.call.apply(fn.bind, arguments);
            };
            goog.bindJs_ = function(fn, selfObj, var_args) {
              if (!fn) {
                throw Error();
              }
              if (2 < arguments.length) {
                var boundArgs = Array.prototype.slice.call(arguments, 2);
                return function() {
                  var newArgs = Array.prototype.slice.call(arguments);
                  Array.prototype.unshift.apply(newArgs, boundArgs);
                  return fn.apply(selfObj, newArgs);
                };
              }
              return function() {
                return fn.apply(selfObj, arguments);
              };
            };
            goog.bind = function(fn, selfObj, var_args) {
              Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
              return goog.bind.apply(null, arguments);
            };
            goog.partial = function(fn, var_args) {
              var args = Array.prototype.slice.call(arguments, 1);
              return function() {
                var newArgs = args.slice();
                newArgs.push.apply(newArgs, arguments);
                return fn.apply(this, newArgs);
              };
            };
            goog.mixin = function(target, source) {
              for (var x in source) {
                target[x] = source[x];
              }
            };
            goog.now = goog.TRUSTED_SITE && Date.now || function() {
              return +new Date;
            };
            goog.globalEval = function(script) {
              if (goog.global.execScript) {
                goog.global.execScript(script, "JavaScript");
              } else {
                if (goog.global.eval) {
                  if (null == goog.evalWorksForGlobals_) {
                    try {
                      goog.global.eval("var _evalTest_ \x3d 1;");
                    } catch (ignore) {
                    }
                    if ("undefined" != typeof goog.global._evalTest_) {
                      try {
                        delete goog.global._evalTest_;
                      } catch (ignore$0) {
                      }
                      goog.evalWorksForGlobals_ = !0;
                    } else {
                      goog.evalWorksForGlobals_ = !1;
                    }
                  }
                  if (goog.evalWorksForGlobals_) {
                    goog.global.eval(script);
                  } else {
                    var doc = goog.global.document, scriptElt = doc.createElement("SCRIPT");
                    scriptElt.type = "text/javascript";
                    scriptElt.defer = !1;
                    scriptElt.appendChild(doc.createTextNode(script));
                    doc.head.appendChild(scriptElt);
                    doc.head.removeChild(scriptElt);
                  }
                } else {
                  throw Error("goog.globalEval not available");
                }
              }
            };
            goog.evalWorksForGlobals_ = null;
            goog.getCssName = function(className, opt_modifier) {
              if ("." == String(className).charAt(0)) {
                throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + className);
              }
              var getMapping = function(cssName) {
                return goog.cssNameMapping_[cssName] || cssName;
              }, renameByParts = function(cssName) {
                cssName = cssName.split("-");
                for (var mapped = [], i = 0; i < cssName.length; i++) {
                  mapped.push(getMapping(cssName[i]));
                }
                return mapped.join("-");
              };
              renameByParts = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? getMapping : renameByParts : function(a) {
                return a;
              };
              className = opt_modifier ? className + "-" + renameByParts(opt_modifier) : renameByParts(className);
              return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(className) : className;
            };
            goog.setCssNameMapping = function(mapping, opt_style) {
              goog.cssNameMapping_ = mapping;
              goog.cssNameMappingStyle_ = opt_style;
            };
            goog.getMsg = function(str, opt_values) {
              opt_values && (str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
                return null != opt_values && key in opt_values ? opt_values[key] : match;
              }));
              return str;
            };
            goog.getMsgWithFallback = function(a, b) {
              return a;
            };
            goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
              goog.exportPath_(publicPath, object, opt_objectToExportTo);
            };
            goog.exportProperty = function(object, publicName, symbol) {
              object[publicName] = symbol;
            };
            goog.inherits = function(childCtor, parentCtor) {
              function tempCtor() {
              }
              tempCtor.prototype = parentCtor.prototype;
              childCtor.superClass_ = parentCtor.prototype;
              childCtor.prototype = new tempCtor;
              childCtor.prototype.constructor = childCtor;
              childCtor.base = function(me, methodName, var_args) {
                for (var args = Array(arguments.length - 2), i = 2; i < arguments.length; i++) {
                  args[i - 2] = arguments[i];
                }
                return parentCtor.prototype[methodName].apply(me, args);
              };
            };
            goog.base = function(me, opt_methodName, var_args) {
              var caller = arguments.callee.caller;
              if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
                throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");
              }
              if ("undefined" !== typeof caller.superClass_) {
                for (var ctorArgs = Array(arguments.length - 1), i = 1; i < arguments.length; i++) {
                  ctorArgs[i - 1] = arguments[i];
                }
                return caller.superClass_.constructor.apply(me, ctorArgs);
              }
              if ("string" != typeof opt_methodName && "symbol" != typeof opt_methodName) {
                throw Error("method names provided to goog.base must be a string or a symbol");
              }
              ctorArgs = Array(arguments.length - 2);
              for (i = 2; i < arguments.length; i++) {
                ctorArgs[i - 2] = arguments[i];
              }
              i = !1;
              for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
                if (ctor.prototype[opt_methodName] === caller) {
                  i = !0;
                } else {
                  if (i) {
                    return ctor.prototype[opt_methodName].apply(me, ctorArgs);
                  }
                }
              }
              if (me[opt_methodName] === caller) {
                return me.constructor.prototype[opt_methodName].apply(me, ctorArgs);
              }
              throw Error("goog.base called from a method of one name to a method of a different name");
            };
            goog.scope = function(fn) {
              if (goog.isInModuleLoader_()) {
                throw Error("goog.scope is not supported within a module.");
              }
              fn.call(goog.global);
            };
            goog.defineClass = function(superClass, def) {
              var constructor = def.constructor, statics = def.statics;
              constructor && constructor != Object.prototype.constructor || (constructor = function() {
                throw Error("cannot instantiate an interface (no constructor defined).");
              });
              constructor = goog.defineClass.createSealingConstructor_(constructor, superClass);
              superClass && goog.inherits(constructor, superClass);
              delete def.constructor;
              delete def.statics;
              goog.defineClass.applyProperties_(constructor.prototype, def);
              null != statics && (statics instanceof Function ? statics(constructor) : goog.defineClass.applyProperties_(constructor, statics));
              return constructor;
            };
            goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;
            goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
              if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
                return ctr;
              }
              var superclassSealable = !goog.defineClass.isUnsealable_(superClass), wrappedCtr = function() {
                var instance = ctr.apply(this, arguments) || this;
                instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
                this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function && Object.seal(instance);
                return instance;
              };
              return wrappedCtr;
            };
            goog.defineClass.isUnsealable_ = function(ctr) {
              return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
            };
            goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
            goog.defineClass.applyProperties_ = function(target, source) {
              for (var key in source) {
                Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
              }
              for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
                key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i], Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
              }
            };
            goog.tagUnsealableClass = function(ctr) {
            };
            goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
            goog.nodeGlobalRequire = function(path) {
              return !1;
            };
            goog.debug = {};
            goog.debug.Error = function(opt_msg) {
              if (Error.captureStackTrace) {
                Error.captureStackTrace(this, goog.debug.Error);
              } else {
                var stack = Error().stack;
                stack && (this.stack = stack);
              }
              opt_msg && (this.message = String(opt_msg));
              this.reportErrorToServer = !0;
            };
            goog.inherits(goog.debug.Error, Error);
            goog.debug.Error.prototype.name = "CustomError";
            goog.dom = {};
            goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
            goog.asserts = {};
            goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
            goog.asserts.AssertionError = function(messagePattern, messageArgs) {
              goog.debug.Error.call(this, goog.asserts.subs_(messagePattern, messageArgs));
              this.messagePattern = messagePattern;
            };
            goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
            goog.asserts.AssertionError.prototype.name = "AssertionError";
            goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
              throw e;
            };
            goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
            goog.asserts.subs_ = function(pattern, subs) {
              pattern = pattern.split("%s");
              for (var returnString = "", subLast = pattern.length - 1, i = 0; i < subLast; i++) {
                returnString += pattern[i] + (i < subs.length ? subs[i] : "%s");
              }
              return returnString + pattern[subLast];
            };
            goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
              var message = "Assertion failed";
              if (givenMessage) {
                message += ": " + givenMessage;
                var args = givenArgs;
              } else {
                defaultMessage && (message += ": " + defaultMessage, args = defaultArgs);
              }
              defaultMessage = new goog.asserts.AssertionError("" + message, args || []);
              goog.asserts.errorHandler_(defaultMessage);
            };
            goog.asserts.setErrorHandler = function(errorHandler) {
              goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = errorHandler);
            };
            goog.asserts.assert = function(condition, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !condition && goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
              return condition;
            };
            goog.asserts.fail = function(opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
            };
            goog.asserts.assertNumber = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertString = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isString(value) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertFunction = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertObject = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isObject(value) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertArray = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isArray(value) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertBoolean = function(value, opt_message, var_args) {
              goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertElement = function(value, opt_message, var_args) {
              !goog.asserts.ENABLE_ASSERTS || goog.isObject(value) && value.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
              !goog.asserts.ENABLE_ASSERTS || value instanceof type || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
              return value;
            };
            goog.asserts.assertFinite = function(value, opt_message, var_args) {
              !goog.asserts.ENABLE_ASSERTS || "number" == typeof value && isFinite(value) || goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [value], opt_message, Array.prototype.slice.call(arguments, 2));
              return value;
            };
            goog.asserts.assertObjectPrototypeIsIntact = function() {
              for (var key in Object.prototype) {
                goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
              }
            };
            goog.asserts.getType_ = function(value) {
              return value instanceof Function ? value.displayName || value.name || "unknown type name" : value instanceof Object ? value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value) : null === value ? "null" : typeof value;
            };
            goog.reflect = {};
            goog.reflect.object = function(type, object) {
              return object;
            };
            goog.reflect.objectProperty = function(prop, object) {
              return prop;
            };
            goog.reflect.sinkValue = function(x) {
              goog.reflect.sinkValue[" "](x);
              return x;
            };
            goog.reflect.sinkValue[" "] = goog.nullFunction;
            goog.reflect.canAccessProperty = function(obj, prop) {
              try {
                return goog.reflect.sinkValue(obj[prop]), !0;
              } catch (e) {
              }
              return !1;
            };
            goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
              opt_keyFn = opt_keyFn ? opt_keyFn(key) : key;
              return Object.prototype.hasOwnProperty.call(cacheObj, opt_keyFn) ? cacheObj[opt_keyFn] : cacheObj[opt_keyFn] = valueFn(key);
            };
            goog.math = {};
            goog.math.Long = function(low, high) {
              this.low_ = low | 0;
              this.high_ = high | 0;
            };
            goog.math.Long.IntCache_ = {};
            goog.math.Long.getCachedIntValue_ = function(value) {
              return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {
                return new goog.math.Long(val, 0 > val ? -1 : 0);
              });
            };
            goog.math.Long.MAX_VALUE_FOR_RADIX_ = "  111111111111111111111111111111111111111111111111111111111111111 2021110011022210012102010021220101220221 13333333333333333333333333333333 1104332401304422434310311212 1540241003031030222122211 22341010611245052052300 777777777777777777777 67404283172107811827 9223372036854775807 1728002635214590697 41a792678515120367 10b269549075433c37 4340724c6c71dc7a7 160e2ad3246366807 7fffffffffffffff 33d3d8307b214008 16agh595df825fa7 ba643dci0ffeehh 5cbfjia3fh26ja7 2heiciiie82dh97 1adaibb21dckfa7 i6k448cf4192c2 acd772jnc9l0l7 64ie1focnn5g77 3igoecjbmca687 27c48l5b37oaop 1bk39f3ah3dmq7 q1se8f0m04isb hajppbc1fc207 bm03i95hia437 7vvvvvvvvvvvv 5hg4ck9jd4u37 3tdtk1v8j6tpp 2pijmikexrxp7 1y2p0ij32e8e7".split(" ");
            goog.math.Long.MIN_VALUE_FOR_RADIX_ = "  -1000000000000000000000000000000000000000000000000000000000000000 -2021110011022210012102010021220101220222 -20000000000000000000000000000000 -1104332401304422434310311213 -1540241003031030222122212 -22341010611245052052301 -1000000000000000000000 -67404283172107811828 -9223372036854775808 -1728002635214590698 -41a792678515120368 -10b269549075433c38 -4340724c6c71dc7a8 -160e2ad3246366808 -8000000000000000 -33d3d8307b214009 -16agh595df825fa8 -ba643dci0ffeehi -5cbfjia3fh26ja8 -2heiciiie82dh98 -1adaibb21dckfa8 -i6k448cf4192c3 -acd772jnc9l0l8 -64ie1focnn5g78 -3igoecjbmca688 -27c48l5b37oaoq -1bk39f3ah3dmq8 -q1se8f0m04isc -hajppbc1fc208 -bm03i95hia438 -8000000000000 -5hg4ck9jd4u38 -3tdtk1v8j6tpq -2pijmikexrxp8 -1y2p0ij32e8e8".split(" ");
            goog.math.Long.fromInt = function(value) {
              var intValue = value | 0;
              goog.asserts.assert(value === intValue, "value should be a 32-bit integer");
              return -128 <= intValue && 128 > intValue ? goog.math.Long.getCachedIntValue_(intValue) : new goog.math.Long(intValue, 0 > intValue ? -1 : 0);
            };
            goog.math.Long.fromNumber = function(value) {
              return 0 < value ? value >= goog.math.Long.TWO_PWR_63_DBL_ ? goog.math.Long.getMaxValue() : new goog.math.Long(value, value / goog.math.Long.TWO_PWR_32_DBL_) : 0 > value ? value <= -goog.math.Long.TWO_PWR_63_DBL_ ? goog.math.Long.getMinValue() : (new goog.math.Long(-value, -value / goog.math.Long.TWO_PWR_32_DBL_)).negate() : goog.math.Long.getZero();
            };
            goog.math.Long.fromBits = function(lowBits, highBits) {
              return new goog.math.Long(lowBits, highBits);
            };
            goog.math.Long.MAX_SAFE_INTEGER_ = 9007199254740991;
            goog.math.Long.fromString = function(str, opt_radix) {
              if ("-" == str.charAt(0)) {
                return goog.math.Long.fromString(str.substring(1), opt_radix).negate();
              }
              var numberValue = parseInt(str, opt_radix || 10);
              if (numberValue <= goog.math.Long.MAX_SAFE_INTEGER_) {
                return new goog.math.Long(numberValue % goog.math.Long.TWO_PWR_32_DBL_ | 0, numberValue / goog.math.Long.TWO_PWR_32_DBL_ | 0);
              }
              if (0 == str.length) {
                throw Error("number format error: empty string");
              }
              if (0 <= str.indexOf("-")) {
                throw Error('number format error: interior "-" character: ' + str);
              }
              opt_radix = opt_radix || 10;
              if (2 > opt_radix || 36 < opt_radix) {
                throw Error("radix out of range: " + opt_radix);
              }
              numberValue = goog.math.Long.fromNumber(Math.pow(opt_radix, 8));
              for (var result = goog.math.Long.getZero(), i = 0; i < str.length; i += 8) {
                var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), opt_radix);
                8 > size ? (size = goog.math.Long.fromNumber(Math.pow(opt_radix, size)), result = result.multiply(size).add(goog.math.Long.fromNumber(value))) : (result = result.multiply(numberValue), result = result.add(goog.math.Long.fromNumber(value)));
              }
              return result;
            };
            goog.math.Long.isStringInRange = function(str, opt_radix) {
              opt_radix = opt_radix || 10;
              if (2 > opt_radix || 36 < opt_radix) {
                throw Error("radix out of range: " + opt_radix);
              }
              opt_radix = "-" == str.charAt(0) ? goog.math.Long.MIN_VALUE_FOR_RADIX_[opt_radix] : goog.math.Long.MAX_VALUE_FOR_RADIX_[opt_radix];
              return str.length < opt_radix.length ? !0 : str.length == opt_radix.length && str <= opt_radix ? !0 : !1;
            };
            goog.math.Long.TWO_PWR_32_DBL_ = 4294967296;
            goog.math.Long.TWO_PWR_63_DBL_ = 0x7fffffffffffffff;
            goog.math.Long.ZERO_ = goog.math.Long.fromBits(0, 0);
            goog.math.Long.getZero = function() {
              return goog.math.Long.ZERO_;
            };
            goog.math.Long.ONE_ = goog.math.Long.fromBits(1, 0);
            goog.math.Long.getOne = function() {
              return goog.math.Long.ONE_;
            };
            goog.math.Long.NEG_ONE_ = goog.math.Long.fromBits(-1, -1);
            goog.math.Long.getNegOne = function() {
              return goog.math.Long.NEG_ONE_;
            };
            goog.math.Long.MAX_VALUE_ = goog.math.Long.fromBits(4294967295, 2147483647);
            goog.math.Long.getMaxValue = function() {
              return goog.math.Long.MAX_VALUE_;
            };
            goog.math.Long.MIN_VALUE_ = goog.math.Long.fromBits(0, 2147483648);
            goog.math.Long.getMinValue = function() {
              return goog.math.Long.MIN_VALUE_;
            };
            goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromBits(16777216, 0);
            goog.math.Long.getTwoPwr24 = function() {
              return goog.math.Long.TWO_PWR_24_;
            };
            goog.math.Long.prototype.toInt = function() {
              return this.low_;
            };
            goog.math.Long.prototype.toNumber = function() {
              return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
            };
            goog.math.Long.prototype.isSafeInteger = function() {
              var top11Bits = this.high_ >> 21;
              return 0 == top11Bits || -1 == top11Bits && !(0 == this.low_ && -2097152 == this.high_);
            };
            goog.math.Long.prototype.toString = function(opt_radix) {
              opt_radix = opt_radix || 10;
              if (2 > opt_radix || 36 < opt_radix) {
                throw Error("radix out of range: " + opt_radix);
              }
              if (this.isSafeInteger()) {
                var asNumber = this.toNumber();
                return 10 == opt_radix ? "" + asNumber : asNumber.toString(opt_radix);
              }
              asNumber = 14 - (opt_radix >> 2);
              var radixPowSafeDigits = Math.pow(opt_radix, asNumber), radixToPower = goog.math.Long.fromBits(radixPowSafeDigits, radixPowSafeDigits / goog.math.Long.TWO_PWR_32_DBL_);
              radixPowSafeDigits = this.div(radixToPower);
              radixToPower = Math.abs(this.subtract(radixPowSafeDigits.multiply(radixToPower)).toNumber());
              var digits = 10 == opt_radix ? "" + radixToPower : radixToPower.toString(opt_radix);
              digits.length < asNumber && (digits = "0000000000000".substr(digits.length - asNumber) + digits);
              radixToPower = radixPowSafeDigits.toNumber();
              return (10 == opt_radix ? radixToPower : radixToPower.toString(opt_radix)) + digits;
            };
            goog.math.Long.prototype.getHighBits = function() {
              return this.high_;
            };
            goog.math.Long.prototype.getLowBits = function() {
              return this.low_;
            };
            goog.math.Long.prototype.getLowBitsUnsigned = function() {
              return this.low_ >>> 0;
            };
            goog.math.Long.prototype.getNumBitsAbs = function() {
              if (this.isNegative()) {
                return this.equals(goog.math.Long.getMinValue()) ? 64 : this.negate().getNumBitsAbs();
              }
              for (var val = 0 != this.high_ ? this.high_ : this.low_, bit = 31; 0 < bit && 0 == (val & 1 << bit); bit--) {
              }
              return 0 != this.high_ ? bit + 33 : bit + 1;
            };
            goog.math.Long.prototype.isZero = function() {
              return 0 == this.low_ && 0 == this.high_;
            };
            goog.math.Long.prototype.isNegative = function() {
              return 0 > this.high_;
            };
            goog.math.Long.prototype.isOdd = function() {
              return 1 == (this.low_ & 1);
            };
            goog.math.Long.prototype.equals = function(other) {
              return this.low_ == other.low_ && this.high_ == other.high_;
            };
            goog.math.Long.prototype.notEquals = function(other) {
              return !this.equals(other);
            };
            goog.math.Long.prototype.lessThan = function(other) {
              return 0 > this.compare(other);
            };
            goog.math.Long.prototype.lessThanOrEqual = function(other) {
              return 0 >= this.compare(other);
            };
            goog.math.Long.prototype.greaterThan = function(other) {
              return 0 < this.compare(other);
            };
            goog.math.Long.prototype.greaterThanOrEqual = function(other) {
              return 0 <= this.compare(other);
            };
            goog.math.Long.prototype.compare = function(other) {
              return this.high_ == other.high_ ? this.low_ == other.low_ ? 0 : this.getLowBitsUnsigned() > other.getLowBitsUnsigned() ? 1 : -1 : this.high_ > other.high_ ? 1 : -1;
            };
            goog.math.Long.prototype.negate = function() {
              var negLow = ~this.low_ + 1 | 0;
              return goog.math.Long.fromBits(negLow, ~this.high_ + !negLow | 0);
            };
            goog.math.Long.prototype.add = function(other) {
              var a48 = this.high_ >>> 16, a32 = this.high_ & 65535, a16 = this.low_ >>> 16, b48 = other.high_ >>> 16, b32 = other.high_ & 65535, b16 = other.low_ >>> 16;
              other = (this.low_ & 65535) + (other.low_ & 65535);
              b16 = (other >>> 16) + (a16 + b16);
              a16 = b16 >>> 16;
              a16 += a32 + b32;
              a48 = (a16 >>> 16) + (a48 + b48) & 65535;
              return goog.math.Long.fromBits((b16 & 65535) << 16 | other & 65535, a48 << 16 | a16 & 65535);
            };
            goog.math.Long.prototype.subtract = function(other) {
              return this.add(other.negate());
            };
            goog.math.Long.prototype.multiply = function(other) {
              if (this.isZero()) {
                return this;
              }
              if (other.isZero()) {
                return other;
              }
              var a48 = this.high_ >>> 16, a32 = this.high_ & 65535, a16 = this.low_ >>> 16, a00 = this.low_ & 65535, b48 = other.high_ >>> 16, b32 = other.high_ & 65535, b16 = other.low_ >>> 16;
              other = other.low_ & 65535;
              var c00 = a00 * other;
              var c16 = (c00 >>> 16) + a16 * other;
              var c32 = c16 >>> 16;
              c16 = (c16 & 65535) + a00 * b16;
              c32 += c16 >>> 16;
              c32 += a32 * other;
              var c48 = c32 >>> 16;
              c32 = (c32 & 65535) + a16 * b16;
              c48 += c32 >>> 16;
              c32 = (c32 & 65535) + a00 * b32;
              c48 = c48 + (c32 >>> 16) + (a48 * other + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
              return goog.math.Long.fromBits((c16 & 65535) << 16 | c00 & 65535, c48 << 16 | c32 & 65535);
            };
            goog.math.Long.prototype.div = function(other) {
              if (other.isZero()) {
                throw Error("division by zero");
              }
              if (this.isNegative()) {
                if (this.equals(goog.math.Long.getMinValue())) {
                  if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
                    return goog.math.Long.getMinValue();
                  }
                  if (other.equals(goog.math.Long.getMinValue())) {
                    return goog.math.Long.getOne();
                  }
                  var approx = this.shiftRight(1).div(other).shiftLeft(1);
                  if (approx.equals(goog.math.Long.getZero())) {
                    return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
                  }
                  var rem = this.subtract(other.multiply(approx));
                  return approx.add(rem.div(other));
                }
                return other.isNegative() ? this.negate().div(other.negate()) : this.negate().div(other).negate();
              }
              if (this.isZero()) {
                return goog.math.Long.getZero();
              }
              if (other.isNegative()) {
                return other.equals(goog.math.Long.getMinValue()) ? goog.math.Long.getZero() : this.div(other.negate()).negate();
              }
              var res = goog.math.Long.getZero();
              for (rem = this; rem.greaterThanOrEqual(other);) {
                approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
                var log2 = Math.ceil(Math.log(approx) / Math.LN2);
                log2 = 48 >= log2 ? 1 : Math.pow(2, log2 - 48);
                for (var approxRes = goog.math.Long.fromNumber(approx), approxRem = approxRes.multiply(other); approxRem.isNegative() || approxRem.greaterThan(rem);) {
                  approx -= log2, approxRes = goog.math.Long.fromNumber(approx), approxRem = approxRes.multiply(other);
                }
                approxRes.isZero() && (approxRes = goog.math.Long.getOne());
                res = res.add(approxRes);
                rem = rem.subtract(approxRem);
              }
              return res;
            };
            goog.math.Long.prototype.modulo = function(other) {
              return this.subtract(this.div(other).multiply(other));
            };
            goog.math.Long.prototype.not = function() {
              return goog.math.Long.fromBits(~this.low_, ~this.high_);
            };
            goog.math.Long.prototype.and = function(other) {
              return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
            };
            goog.math.Long.prototype.or = function(other) {
              return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
            };
            goog.math.Long.prototype.xor = function(other) {
              return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
            };
            goog.math.Long.prototype.shiftLeft = function(numBits) {
              numBits &= 63;
              if (0 == numBits) {
                return this;
              }
              var low = this.low_;
              return 32 > numBits ? goog.math.Long.fromBits(low << numBits, this.high_ << numBits | low >>> 32 - numBits) : goog.math.Long.fromBits(0, low << numBits - 32);
            };
            goog.math.Long.prototype.shiftRight = function(numBits) {
              numBits &= 63;
              if (0 == numBits) {
                return this;
              }
              var high = this.high_;
              return 32 > numBits ? goog.math.Long.fromBits(this.low_ >>> numBits | high << 32 - numBits, high >> numBits) : goog.math.Long.fromBits(high >> numBits - 32, 0 <= high ? 0 : -1);
            };
            goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
              numBits &= 63;
              if (0 == numBits) {
                return this;
              }
              var high = this.high_;
              return 32 > numBits ? goog.math.Long.fromBits(this.low_ >>> numBits | high << 32 - numBits, high >>> numBits) : 32 == numBits ? goog.math.Long.fromBits(high, 0) : goog.math.Long.fromBits(high >>> numBits - 32, 0);
            };
            goog.math.Integer = function(bits, sign) {
              this.bits_ = [];
              this.sign_ = sign;
              for (var top = !0, i = bits.length - 1; 0 <= i; i--) {
                var val = bits[i] | 0;
                top && val == sign || (this.bits_[i] = val, top = !1);
              }
            };
            goog.math.Integer.IntCache_ = {};
            goog.math.Integer.fromInt = function(value) {
              if (-128 <= value && 128 > value) {
                var cachedObj = goog.math.Integer.IntCache_[value];
                if (cachedObj) {
                  return cachedObj;
                }
              }
              cachedObj = new goog.math.Integer([value | 0], 0 > value ? -1 : 0);
              -128 <= value && 128 > value && (goog.math.Integer.IntCache_[value] = cachedObj);
              return cachedObj;
            };
            goog.math.Integer.fromNumber = function(value) {
              if (isNaN(value) || !isFinite(value)) {
                return goog.math.Integer.ZERO;
              }
              if (0 > value) {
                return goog.math.Integer.fromNumber(-value).negate();
              }
              for (var bits = [], pow = 1, i = 0; value >= pow; i++) {
                bits[i] = value / pow | 0, pow *= goog.math.Integer.TWO_PWR_32_DBL_;
              }
              return new goog.math.Integer(bits, 0);
            };
            goog.math.Integer.fromBits = function(bits) {
              return new goog.math.Integer(bits, bits[bits.length - 1] & -2147483648 ? -1 : 0);
            };
            goog.math.Integer.fromString = function(str, opt_radix) {
              if (0 == str.length) {
                throw Error("number format error: empty string");
              }
              opt_radix = opt_radix || 10;
              if (2 > opt_radix || 36 < opt_radix) {
                throw Error("radix out of range: " + opt_radix);
              }
              if ("-" == str.charAt(0)) {
                return goog.math.Integer.fromString(str.substring(1), opt_radix).negate();
              }
              if (0 <= str.indexOf("-")) {
                throw Error('number format error: interior "-" character');
              }
              for (var radixToPower = goog.math.Integer.fromNumber(Math.pow(opt_radix, 8)), result = goog.math.Integer.ZERO, i = 0; i < str.length; i += 8) {
                var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), opt_radix);
                8 > size ? (size = goog.math.Integer.fromNumber(Math.pow(opt_radix, size)), result = result.multiply(size).add(goog.math.Integer.fromNumber(value))) : (result = result.multiply(radixToPower), result = result.add(goog.math.Integer.fromNumber(value)));
              }
              return result;
            };
            goog.math.Integer.TWO_PWR_32_DBL_ = 4294967296;
            goog.math.Integer.ZERO = goog.math.Integer.fromInt(0);
            goog.math.Integer.ONE = goog.math.Integer.fromInt(1);
            goog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(16777216);
            goog.math.Integer.prototype.toInt = function() {
              return 0 < this.bits_.length ? this.bits_[0] : this.sign_;
            };
            goog.math.Integer.prototype.toNumber = function() {
              if (this.isNegative()) {
                return -this.negate().toNumber();
              }
              for (var val = 0, pow = 1, i = 0; i < this.bits_.length; i++) {
                val += this.getBitsUnsigned(i) * pow, pow *= goog.math.Integer.TWO_PWR_32_DBL_;
              }
              return val;
            };
            goog.math.Integer.prototype.toString = function(opt_radix) {
              opt_radix = opt_radix || 10;
              if (2 > opt_radix || 36 < opt_radix) {
                throw Error("radix out of range: " + opt_radix);
              }
              if (this.isZero()) {
                return "0";
              }
              if (this.isNegative()) {
                return "-" + this.negate().toString(opt_radix);
              }
              for (var radixToPower = goog.math.Integer.fromNumber(Math.pow(opt_radix, 6)), rem = this, result = "";;) {
                var remDiv = rem.divide(radixToPower), digits = (rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0).toString(opt_radix);
                rem = remDiv;
                if (rem.isZero()) {
                  return digits + result;
                }
                for (; 6 > digits.length;) {
                  digits = "0" + digits;
                }
                result = "" + digits + result;
              }
            };
            goog.math.Integer.prototype.getBits = function(index) {
              return 0 > index ? 0 : index < this.bits_.length ? this.bits_[index] : this.sign_;
            };
            goog.math.Integer.prototype.getBitsUnsigned = function(index) {
              index = this.getBits(index);
              return 0 <= index ? index : goog.math.Integer.TWO_PWR_32_DBL_ + index;
            };
            goog.math.Integer.prototype.getSign = function() {
              return this.sign_;
            };
            goog.math.Integer.prototype.isZero = function() {
              if (0 != this.sign_) {
                return !1;
              }
              for (var i = 0; i < this.bits_.length; i++) {
                if (0 != this.bits_[i]) {
                  return !1;
                }
              }
              return !0;
            };
            goog.math.Integer.prototype.isNegative = function() {
              return -1 == this.sign_;
            };
            goog.math.Integer.prototype.isOdd = function() {
              return 0 == this.bits_.length && -1 == this.sign_ || 0 < this.bits_.length && 0 != (this.bits_[0] & 1);
            };
            goog.math.Integer.prototype.equals = function(other) {
              if (this.sign_ != other.sign_) {
                return !1;
              }
              for (var len = Math.max(this.bits_.length, other.bits_.length), i = 0; i < len; i++) {
                if (this.getBits(i) != other.getBits(i)) {
                  return !1;
                }
              }
              return !0;
            };
            goog.math.Integer.prototype.notEquals = function(other) {
              return !this.equals(other);
            };
            goog.math.Integer.prototype.greaterThan = function(other) {
              return 0 < this.compare(other);
            };
            goog.math.Integer.prototype.greaterThanOrEqual = function(other) {
              return 0 <= this.compare(other);
            };
            goog.math.Integer.prototype.lessThan = function(other) {
              return 0 > this.compare(other);
            };
            goog.math.Integer.prototype.lessThanOrEqual = function(other) {
              return 0 >= this.compare(other);
            };
            goog.math.Integer.prototype.compare = function(other) {
              other = this.subtract(other);
              return other.isNegative() ? -1 : other.isZero() ? 0 : 1;
            };
            goog.math.Integer.prototype.shorten = function(numBits) {
              var arr_index = numBits - 1 >> 5;
              numBits = (numBits - 1) % 32;
              for (var bits = [], i = 0; i < arr_index; i++) {
                bits[i] = this.getBits(i);
              }
              i = 31 == numBits ? 4294967295 : (1 << numBits + 1) - 1;
              var val = this.getBits(arr_index) & i;
              if (val & 1 << numBits) {
                return bits[arr_index] = val | 4294967295 - i, new goog.math.Integer(bits, -1);
              }
              bits[arr_index] = val;
              return new goog.math.Integer(bits, 0);
            };
            goog.math.Integer.prototype.negate = function() {
              return this.not().add(goog.math.Integer.ONE);
            };
            goog.math.Integer.prototype.add = function(other) {
              for (var len = Math.max(this.bits_.length, other.bits_.length), arr = [], carry = 0, i = 0; i <= len; i++) {
                var a1 = this.getBits(i) >>> 16, a0 = this.getBits(i) & 65535, b1 = other.getBits(i) >>> 16, b0 = other.getBits(i) & 65535;
                a0 = carry + a0 + b0;
                a1 = (a0 >>> 16) + a1 + b1;
                carry = a1 >>> 16;
                a0 &= 65535;
                a1 &= 65535;
                arr[i] = a1 << 16 | a0;
              }
              return goog.math.Integer.fromBits(arr);
            };
            goog.math.Integer.prototype.subtract = function(other) {
              return this.add(other.negate());
            };
            goog.math.Integer.prototype.multiply = function(other) {
              if (this.isZero() || other.isZero()) {
                return goog.math.Integer.ZERO;
              }
              if (this.isNegative()) {
                return other.isNegative() ? this.negate().multiply(other.negate()) : this.negate().multiply(other).negate();
              }
              if (other.isNegative()) {
                return this.multiply(other.negate()).negate();
              }
              if (this.lessThan(goog.math.Integer.TWO_PWR_24_) && other.lessThan(goog.math.Integer.TWO_PWR_24_)) {
                return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());
              }
              for (var len = this.bits_.length + other.bits_.length, arr = [], i = 0; i < 2 * len; i++) {
                arr[i] = 0;
              }
              for (i = 0; i < this.bits_.length; i++) {
                for (var j = 0; j < other.bits_.length; j++) {
                  var a1 = this.getBits(i) >>> 16, a0 = this.getBits(i) & 65535, b1 = other.getBits(j) >>> 16, b0 = other.getBits(j) & 65535;
                  arr[2 * i + 2 * j] += a0 * b0;
                  goog.math.Integer.carry16_(arr, 2 * i + 2 * j);
                  arr[2 * i + 2 * j + 1] += a1 * b0;
                  goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
                  arr[2 * i + 2 * j + 1] += a0 * b1;
                  goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
                  arr[2 * i + 2 * j + 2] += a1 * b1;
                  goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);
                }
              }
              for (i = 0; i < len; i++) {
                arr[i] = arr[2 * i + 1] << 16 | arr[2 * i];
              }
              for (i = len; i < 2 * len; i++) {
                arr[i] = 0;
              }
              return new goog.math.Integer(arr, 0);
            };
            goog.math.Integer.carry16_ = function(bits, index) {
              for (; (bits[index] & 65535) != bits[index];) {
                bits[index + 1] += bits[index] >>> 16, bits[index] &= 65535, index++;
              }
            };
            goog.math.Integer.prototype.slowDivide_ = function(other) {
              if (this.isNegative() || other.isNegative()) {
                throw Error("slowDivide_ only works with positive integers.");
              }
              for (var twoPower = goog.math.Integer.ONE; other.lessThanOrEqual(this);) {
                twoPower = twoPower.shiftLeft(1), other = other.shiftLeft(1);
              }
              var res = twoPower.shiftRight(1), total = other.shiftRight(1);
              other = other.shiftRight(2);
              for (twoPower = twoPower.shiftRight(2); !other.isZero();) {
                var total2 = total.add(other);
                total2.lessThanOrEqual(this) && (res = res.add(twoPower), total = total2);
                other = other.shiftRight(1);
                twoPower = twoPower.shiftRight(1);
              }
              return res;
            };
            goog.math.Integer.prototype.divide = function(other) {
              if (other.isZero()) {
                throw Error("division by zero");
              }
              if (this.isZero()) {
                return goog.math.Integer.ZERO;
              }
              if (this.isNegative()) {
                return other.isNegative() ? this.negate().divide(other.negate()) : this.negate().divide(other).negate();
              }
              if (other.isNegative()) {
                return this.divide(other.negate()).negate();
              }
              if (30 < this.bits_.length) {
                return this.slowDivide_(other);
              }
              for (var res = goog.math.Integer.ZERO, rem = this; rem.greaterThanOrEqual(other);) {
                var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber())), log2 = Math.ceil(Math.log(approx) / Math.LN2);
                log2 = 48 >= log2 ? 1 : Math.pow(2, log2 - 48);
                for (var approxRes = goog.math.Integer.fromNumber(approx), approxRem = approxRes.multiply(other); approxRem.isNegative() || approxRem.greaterThan(rem);) {
                  approx -= log2, approxRes = goog.math.Integer.fromNumber(approx), approxRem = approxRes.multiply(other);
                }
                approxRes.isZero() && (approxRes = goog.math.Integer.ONE);
                res = res.add(approxRes);
                rem = rem.subtract(approxRem);
              }
              return res;
            };
            goog.math.Integer.prototype.modulo = function(other) {
              return this.subtract(this.divide(other).multiply(other));
            };
            goog.math.Integer.prototype.not = function() {
              for (var len = this.bits_.length, arr = [], i = 0; i < len; i++) {
                arr[i] = ~this.bits_[i];
              }
              return new goog.math.Integer(arr, ~this.sign_);
            };
            goog.math.Integer.prototype.and = function(other) {
              for (var len = Math.max(this.bits_.length, other.bits_.length), arr = [], i = 0; i < len; i++) {
                arr[i] = this.getBits(i) & other.getBits(i);
              }
              return new goog.math.Integer(arr, this.sign_ & other.sign_);
            };
            goog.math.Integer.prototype.or = function(other) {
              for (var len = Math.max(this.bits_.length, other.bits_.length), arr = [], i = 0; i < len; i++) {
                arr[i] = this.getBits(i) | other.getBits(i);
              }
              return new goog.math.Integer(arr, this.sign_ | other.sign_);
            };
            goog.math.Integer.prototype.xor = function(other) {
              for (var len = Math.max(this.bits_.length, other.bits_.length), arr = [], i = 0; i < len; i++) {
                arr[i] = this.getBits(i) ^ other.getBits(i);
              }
              return new goog.math.Integer(arr, this.sign_ ^ other.sign_);
            };
            goog.math.Integer.prototype.shiftLeft = function(numBits) {
              var arr_delta = numBits >> 5;
              numBits %= 32;
              for (var len = this.bits_.length + arr_delta + (0 < numBits ? 1 : 0), arr = [], i = 0; i < len; i++) {
                arr[i] = 0 < numBits ? this.getBits(i - arr_delta) << numBits | this.getBits(i - arr_delta - 1) >>> 32 - numBits : this.getBits(i - arr_delta);
              }
              return new goog.math.Integer(arr, this.sign_);
            };
            goog.math.Integer.prototype.shiftRight = function(numBits) {
              var arr_delta = numBits >> 5;
              numBits %= 32;
              for (var len = this.bits_.length - arr_delta, arr = [], i = 0; i < len; i++) {
                arr[i] = 0 < numBits ? this.getBits(i + arr_delta) >>> numBits | this.getBits(i + arr_delta + 1) << 32 - numBits : this.getBits(i + arr_delta);
              }
              return new goog.math.Integer(arr, this.sign_);
            };
            goog.string = {};
            goog.string.internal = {};
            goog.string.internal.startsWith = function(str, prefix) {
              return 0 == str.lastIndexOf(prefix, 0);
            };
            goog.string.internal.endsWith = function(str, suffix) {
              var l = str.length - suffix.length;
              return 0 <= l && str.indexOf(suffix, l) == l;
            };
            goog.string.internal.caseInsensitiveStartsWith = function(str, prefix) {
              return 0 == goog.string.internal.caseInsensitiveCompare(prefix, str.substr(0, prefix.length));
            };
            goog.string.internal.caseInsensitiveEndsWith = function(str, suffix) {
              return 0 == goog.string.internal.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length));
            };
            goog.string.internal.caseInsensitiveEquals = function(str1, str2) {
              return str1.toLowerCase() == str2.toLowerCase();
            };
            goog.string.internal.isEmptyOrWhitespace = function(str) {
              return /^[\s\xa0]*$/.test(str);
            };
            goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
              return str.trim();
            } : function(str) {
              return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(str)[1];
            };
            goog.string.internal.caseInsensitiveCompare = function(str1, str2) {
              str1 = String(str1).toLowerCase();
              str2 = String(str2).toLowerCase();
              return str1 < str2 ? -1 : str1 == str2 ? 0 : 1;
            };
            goog.string.internal.newLineToBr = function(str, opt_xml) {
              return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
            };
            goog.string.internal.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
              if (opt_isLikelyToContainHtmlChars) {
                str = str.replace(goog.string.internal.AMP_RE_, "\x26amp;").replace(goog.string.internal.LT_RE_, "\x26lt;").replace(goog.string.internal.GT_RE_, "\x26gt;").replace(goog.string.internal.QUOT_RE_, "\x26quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.internal.NULL_RE_, "\x26#0;");
              } else {
                if (!goog.string.internal.ALL_RE_.test(str)) {
                  return str;
                }
                -1 != str.indexOf("\x26") && (str = str.replace(goog.string.internal.AMP_RE_, "\x26amp;"));
                -1 != str.indexOf("\x3c") && (str = str.replace(goog.string.internal.LT_RE_, "\x26lt;"));
                -1 != str.indexOf("\x3e") && (str = str.replace(goog.string.internal.GT_RE_, "\x26gt;"));
                -1 != str.indexOf('"') && (str = str.replace(goog.string.internal.QUOT_RE_, "\x26quot;"));
                -1 != str.indexOf("'") && (str = str.replace(goog.string.internal.SINGLE_QUOTE_RE_, "\x26#39;"));
                -1 != str.indexOf("\x00") && (str = str.replace(goog.string.internal.NULL_RE_, "\x26#0;"));
              }
              return str;
            };
            goog.string.internal.AMP_RE_ = /&/g;
            goog.string.internal.LT_RE_ = /</g;
            goog.string.internal.GT_RE_ = />/g;
            goog.string.internal.QUOT_RE_ = /"/g;
            goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
            goog.string.internal.NULL_RE_ = /\x00/g;
            goog.string.internal.ALL_RE_ = /[\x00&<>"']/;
            goog.string.internal.whitespaceEscape = function(str, opt_xml) {
              return goog.string.internal.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
            };
            goog.string.internal.contains = function(str, subString) {
              return -1 != str.indexOf(subString);
            };
            goog.string.internal.caseInsensitiveContains = function(str, subString) {
              return goog.string.internal.contains(str.toLowerCase(), subString.toLowerCase());
            };
            goog.string.internal.compareVersions = function(version1, version2) {
              var order = 0;
              version1 = goog.string.internal.trim(String(version1)).split(".");
              version2 = goog.string.internal.trim(String(version2)).split(".");
              for (var subCount = Math.max(version1.length, version2.length), subIdx = 0; 0 == order && subIdx < subCount; subIdx++) {
                var v1Sub = version1[subIdx] || "", v2Sub = version2[subIdx] || "";
                do {
                  v1Sub = /(\d*)(\D*)(.*)/.exec(v1Sub) || ["", "", "", ""];
                  v2Sub = /(\d*)(\D*)(.*)/.exec(v2Sub) || ["", "", "", ""];
                  if (0 == v1Sub[0].length && 0 == v2Sub[0].length) {
                    break;
                  }
                  order = 0 == v1Sub[1].length ? 0 : parseInt(v1Sub[1], 10);
                  var v2CompNum = 0 == v2Sub[1].length ? 0 : parseInt(v2Sub[1], 10);
                  order = goog.string.internal.compareElements_(order, v2CompNum) || goog.string.internal.compareElements_(0 == v1Sub[2].length, 0 == v2Sub[2].length) || goog.string.internal.compareElements_(v1Sub[2], v2Sub[2]);
                  v1Sub = v1Sub[3];
                  v2Sub = v2Sub[3];
                } while (0 == order);
              }
              return order;
            };
            goog.string.internal.compareElements_ = function(left, right) {
              return left < right ? -1 : left > right ? 1 : 0;
            };
            goog.string.DETECT_DOUBLE_ESCAPING = !1;
            goog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1;
            goog.string.Unicode = {NBSP:" "};
            goog.string.startsWith = goog.string.internal.startsWith;
            goog.string.endsWith = goog.string.internal.endsWith;
            goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
            goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
            goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;
            goog.string.subs = function(str, var_args) {
              for (var splitParts = str.split("%s"), returnString = "", subsArguments = Array.prototype.slice.call(arguments, 1); subsArguments.length && 1 < splitParts.length;) {
                returnString += splitParts.shift() + subsArguments.shift();
              }
              return returnString + splitParts.join("%s");
            };
            goog.string.collapseWhitespace = function(str) {
              return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
            };
            goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;
            goog.string.isEmptyString = function(str) {
              return 0 == str.length;
            };
            goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
            goog.string.isEmptyOrWhitespaceSafe = function(str) {
              return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
            };
            goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
            goog.string.isBreakingWhitespace = function(str) {
              return !/[^\t\n\r ]/.test(str);
            };
            goog.string.isAlpha = function(str) {
              return !/[^a-zA-Z]/.test(str);
            };
            goog.string.isNumeric = function(str) {
              return !/[^0-9]/.test(str);
            };
            goog.string.isAlphaNumeric = function(str) {
              return !/[^a-zA-Z0-9]/.test(str);
            };
            goog.string.isSpace = function(ch) {
              return " " == ch;
            };
            goog.string.isUnicodeChar = function(ch) {
              return 1 == ch.length && " " <= ch && "~" >= ch || "" <= ch && "�" >= ch;
            };
            goog.string.stripNewlines = function(str) {
              return str.replace(/(\r\n|\r|\n)+/g, " ");
            };
            goog.string.canonicalizeNewlines = function(str) {
              return str.replace(/(\r\n|\r|\n)/g, "\n");
            };
            goog.string.normalizeWhitespace = function(str) {
              return str.replace(/\xa0|\s/g, " ");
            };
            goog.string.normalizeSpaces = function(str) {
              return str.replace(/\xa0|[ \t]+/g, " ");
            };
            goog.string.collapseBreakingSpaces = function(str) {
              return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
            };
            goog.string.trim = goog.string.internal.trim;
            goog.string.trimLeft = function(str) {
              return str.replace(/^[\s\xa0]+/, "");
            };
            goog.string.trimRight = function(str) {
              return str.replace(/[\s\xa0]+$/, "");
            };
            goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;
            goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
              if (str1 == str2) {
                return 0;
              }
              if (!str1) {
                return -1;
              }
              if (!str2) {
                return 1;
              }
              for (var tokens1 = str1.toLowerCase().match(tokenizerRegExp), tokens2 = str2.toLowerCase().match(tokenizerRegExp), count = Math.min(tokens1.length, tokens2.length), i = 0; i < count; i++) {
                tokenizerRegExp = tokens1[i];
                var b = tokens2[i];
                if (tokenizerRegExp != b) {
                  return str1 = parseInt(tokenizerRegExp, 10), !isNaN(str1) && (str2 = parseInt(b, 10), !isNaN(str2) && str1 - str2) ? str1 - str2 : tokenizerRegExp < b ? -1 : 1;
                }
              }
              return tokens1.length != tokens2.length ? tokens1.length - tokens2.length : str1 < str2 ? -1 : 1;
            };
            goog.string.intAwareCompare = function(str1, str2) {
              return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
            };
            goog.string.floatAwareCompare = function(str1, str2) {
              return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
            };
            goog.string.numerateCompare = goog.string.floatAwareCompare;
            goog.string.urlEncode = function(str) {
              return encodeURIComponent(String(str));
            };
            goog.string.urlDecode = function(str) {
              return decodeURIComponent(str.replace(/\+/g, " "));
            };
            goog.string.newLineToBr = goog.string.internal.newLineToBr;
            goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
              str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);
              goog.string.DETECT_DOUBLE_ESCAPING && (str = str.replace(goog.string.E_RE_, "\x26#101;"));
              return str;
            };
            goog.string.E_RE_ = /e/g;
            goog.string.unescapeEntities = function(str) {
              return goog.string.contains(str, "\x26") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(str) : goog.string.unescapePureXmlEntities_(str) : str;
            };
            goog.string.unescapeEntitiesWithDocument = function(str, document) {
              return goog.string.contains(str, "\x26") ? goog.string.unescapeEntitiesUsingDom_(str, document) : str;
            };
            goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
              var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
              var div = opt_document ? opt_document.createElement("div") : goog.global.document.createElement("div");
              return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
                var value = seen[s];
                if (value) {
                  return value;
                }
                "#" == entity.charAt(0) && (entity = Number("0" + entity.substr(1)), isNaN(entity) || (value = String.fromCharCode(entity)));
                value || (div.innerHTML = s + " ", value = div.firstChild.nodeValue.slice(0, -1));
                return seen[s] = value;
              });
            };
            goog.string.unescapePureXmlEntities_ = function(str) {
              return str.replace(/&([^;]+);/g, function(s, entity) {
                switch(entity) {
                  case "amp":
                    return "\x26";
                  case "lt":
                    return "\x3c";
                  case "gt":
                    return "\x3e";
                  case "quot":
                    return '"';
                  default:
                    return "#" != entity.charAt(0) || (entity = Number("0" + entity.substr(1)), isNaN(entity)) ? s : String.fromCharCode(entity);
                }
              });
            };
            goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
            goog.string.whitespaceEscape = function(str, opt_xml) {
              return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
            };
            goog.string.preserveSpaces = function(str) {
              return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
            };
            goog.string.stripQuotes = function(str, quoteChars) {
              for (var length = quoteChars.length, i = 0; i < length; i++) {
                var quoteChar = 1 == length ? quoteChars : quoteChars.charAt(i);
                if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
                  return str.substring(1, str.length - 1);
                }
              }
              return str;
            };
            goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
              opt_protectEscapedCharacters && (str = goog.string.unescapeEntities(str));
              str.length > chars && (str = str.substring(0, chars - 3) + "...");
              opt_protectEscapedCharacters && (str = goog.string.htmlEscape(str));
              return str;
            };
            goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
              opt_protectEscapedCharacters && (str = goog.string.unescapeEntities(str));
              if (opt_trailingChars && str.length > chars) {
                opt_trailingChars > chars && (opt_trailingChars = chars);
                var endPoint = str.length - opt_trailingChars;
                str = str.substring(0, chars - opt_trailingChars) + "..." + str.substring(endPoint);
              } else {
                str.length > chars && (opt_trailingChars = Math.floor(chars / 2), endPoint = str.length - opt_trailingChars, str = str.substring(0, opt_trailingChars + chars % 2) + "..." + str.substring(endPoint));
              }
              opt_protectEscapedCharacters && (str = goog.string.htmlEscape(str));
              return str;
            };
            goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
            goog.string.jsEscapeCache_ = {"'":"\\'"};
            goog.string.quote = function(s) {
              s = String(s);
              for (var sb = ['"'], i = 0; i < s.length; i++) {
                var ch = s.charAt(i), cc = ch.charCodeAt(0);
                sb[i + 1] = goog.string.specialEscapeChars_[ch] || (31 < cc && 127 > cc ? ch : goog.string.escapeChar(ch));
              }
              sb.push('"');
              return sb.join("");
            };
            goog.string.escapeString = function(str) {
              for (var sb = [], i = 0; i < str.length; i++) {
                sb[i] = goog.string.escapeChar(str.charAt(i));
              }
              return sb.join("");
            };
            goog.string.escapeChar = function(c) {
              if (c in goog.string.jsEscapeCache_) {
                return goog.string.jsEscapeCache_[c];
              }
              if (c in goog.string.specialEscapeChars_) {
                return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
              }
              var cc = c.charCodeAt(0);
              if (31 < cc && 127 > cc) {
                var rv = c;
              } else {
                if (256 > cc) {
                  if (rv = "\\x", 16 > cc || 256 < cc) {
                    rv += "0";
                  }
                } else {
                  rv = "\\u", 4096 > cc && (rv += "0");
                }
                rv += cc.toString(16).toUpperCase();
              }
              return goog.string.jsEscapeCache_[c] = rv;
            };
            goog.string.contains = goog.string.internal.contains;
            goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;
            goog.string.countOf = function(s, ss) {
              return s && ss ? s.split(ss).length - 1 : 0;
            };
            goog.string.removeAt = function(s, index, stringLength) {
              var resultStr = s;
              0 <= index && index < s.length && 0 < stringLength && (resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength));
              return resultStr;
            };
            goog.string.remove = function(str, substr) {
              return str.replace(substr, "");
            };
            goog.string.removeAll = function(s, ss) {
              ss = new RegExp(goog.string.regExpEscape(ss), "g");
              return s.replace(ss, "");
            };
            goog.string.replaceAll = function(s, ss, replacement) {
              ss = new RegExp(goog.string.regExpEscape(ss), "g");
              return s.replace(ss, replacement.replace(/\$/g, "$$$$"));
            };
            goog.string.regExpEscape = function(s) {
              return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
            };
            goog.string.repeat = String.prototype.repeat ? function(string, length) {
              return string.repeat(length);
            } : function(string, length) {
              return Array(length + 1).join(string);
            };
            goog.string.padNumber = function(num, length, opt_precision) {
              num = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
              opt_precision = num.indexOf(".");
              -1 == opt_precision && (opt_precision = num.length);
              return goog.string.repeat("0", Math.max(0, length - opt_precision)) + num;
            };
            goog.string.makeSafe = function(obj) {
              return null == obj ? "" : String(obj);
            };
            goog.string.buildString = function(var_args) {
              return Array.prototype.join.call(arguments, "");
            };
            goog.string.getRandomString = function() {
              return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
            };
            goog.string.compareVersions = goog.string.internal.compareVersions;
            goog.string.hashCode = function(str) {
              for (var result = 0, i = 0; i < str.length; ++i) {
                result = 31 * result + str.charCodeAt(i) >>> 0;
              }
              return result;
            };
            goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
            goog.string.createUniqueString = function() {
              return "goog_" + goog.string.uniqueStringCounter_++;
            };
            goog.string.toNumber = function(str) {
              var num = Number(str);
              return 0 == num && goog.string.isEmptyOrWhitespace(str) ? NaN : num;
            };
            goog.string.isLowerCamelCase = function(str) {
              return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
            };
            goog.string.isUpperCamelCase = function(str) {
              return /^([A-Z][a-z]*)+$/.test(str);
            };
            goog.string.toCamelCase = function(str) {
              return String(str).replace(/\-([a-z])/g, function(all, match) {
                return match.toUpperCase();
              });
            };
            goog.string.toSelectorCase = function(str) {
              return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
            };
            goog.string.toTitleCase = function(str, opt_delimiters) {
              opt_delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
              return str.replace(new RegExp("(^" + (opt_delimiters ? "|[" + opt_delimiters + "]+" : "") + ")([a-z])", "g"), function(all, p1, p2) {
                return p1 + p2.toUpperCase();
              });
            };
            goog.string.capitalize = function(str) {
              return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
            };
            goog.string.parseInt = function(value) {
              isFinite(value) && (value = String(value));
              return goog.isString(value) ? /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10) : NaN;
            };
            goog.string.splitLimit = function(str, separator, limit) {
              str = str.split(separator);
              for (var returnVal = []; 0 < limit && str.length;) {
                returnVal.push(str.shift()), limit--;
              }
              str.length && returnVal.push(str.join(separator));
              return returnVal;
            };
            goog.string.lastComponent = function(str, separators) {
              if (separators) {
                "string" == typeof separators && (separators = [separators]);
              } else {
                return str;
              }
              for (var lastSeparatorIndex = -1, i = 0; i < separators.length; i++) {
                if ("" != separators[i]) {
                  var currentSeparatorIndex = str.lastIndexOf(separators[i]);
                  currentSeparatorIndex > lastSeparatorIndex && (lastSeparatorIndex = currentSeparatorIndex);
                }
              }
              return -1 == lastSeparatorIndex ? str : str.slice(lastSeparatorIndex + 1);
            };
            goog.string.editDistance = function(a, b) {
              var v0 = [], v1 = [];
              if (a == b) {
                return 0;
              }
              if (!a.length || !b.length) {
                return Math.max(a.length, b.length);
              }
              for (var i = 0; i < b.length + 1; i++) {
                v0[i] = i;
              }
              for (i = 0; i < a.length; i++) {
                v1[0] = i + 1;
                for (var j = 0; j < b.length; j++) {
                  v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + Number(a[i] != b[j]));
                }
                for (j = 0; j < v0.length; j++) {
                  v0[j] = v1[j];
                }
              }
              return v1[b.length];
            };
            goog.object = {};
            goog.object.is = function(v, v2) {
              return v === v2 ? 0 !== v || 1 / v === 1 / v2 : v !== v && v2 !== v2;
            };
            goog.object.forEach = function(obj, f, opt_obj) {
              for (var key in obj) {
                f.call(opt_obj, obj[key], key, obj);
              }
            };
            goog.object.filter = function(obj, f, opt_obj) {
              var res = {}, key;
              for (key in obj) {
                f.call(opt_obj, obj[key], key, obj) && (res[key] = obj[key]);
              }
              return res;
            };
            goog.object.map = function(obj, f, opt_obj) {
              var res = {}, key;
              for (key in obj) {
                res[key] = f.call(opt_obj, obj[key], key, obj);
              }
              return res;
            };
            goog.object.some = function(obj, f, opt_obj) {
              for (var key in obj) {
                if (f.call(opt_obj, obj[key], key, obj)) {
                  return !0;
                }
              }
              return !1;
            };
            goog.object.every = function(obj, f, opt_obj) {
              for (var key in obj) {
                if (!f.call(opt_obj, obj[key], key, obj)) {
                  return !1;
                }
              }
              return !0;
            };
            goog.object.getCount = function(obj) {
              var rv = 0, key;
              for (key in obj) {
                rv++;
              }
              return rv;
            };
            goog.object.getAnyKey = function(obj) {
              for (var key in obj) {
                return key;
              }
            };
            goog.object.getAnyValue = function(obj) {
              for (var key in obj) {
                return obj[key];
              }
            };
            goog.object.contains = function(obj, val) {
              return goog.object.containsValue(obj, val);
            };
            goog.object.getValues = function(obj) {
              var res = [], i = 0, key;
              for (key in obj) {
                res[i++] = obj[key];
              }
              return res;
            };
            goog.object.getKeys = function(obj) {
              var res = [], i = 0, key;
              for (key in obj) {
                res[i++] = key;
              }
              return res;
            };
            goog.object.getValueByKeys = function(obj, var_args) {
              var isArrayLike = goog.isArrayLike(var_args), keys = isArrayLike ? var_args : arguments;
              for (isArrayLike = isArrayLike ? 0 : 1; isArrayLike < keys.length; isArrayLike++) {
                if (null == obj) {
                  return;
                }
                obj = obj[keys[isArrayLike]];
              }
              return obj;
            };
            goog.object.containsKey = function(obj, key) {
              return null !== obj && key in obj;
            };
            goog.object.containsValue = function(obj, val) {
              for (var key in obj) {
                if (obj[key] == val) {
                  return !0;
                }
              }
              return !1;
            };
            goog.object.findKey = function(obj, f, opt_this) {
              for (var key in obj) {
                if (f.call(opt_this, obj[key], key, obj)) {
                  return key;
                }
              }
            };
            goog.object.findValue = function(obj, f, opt_this) {
              return (f = goog.object.findKey(obj, f, opt_this)) && obj[f];
            };
            goog.object.isEmpty = function(obj) {
              for (var key in obj) {
                return !1;
              }
              return !0;
            };
            goog.object.clear = function(obj) {
              for (var i in obj) {
                delete obj[i];
              }
            };
            goog.object.remove = function(obj, key) {
              var rv;
              (rv = key in obj) && delete obj[key];
              return rv;
            };
            goog.object.add = function(obj, key, val) {
              if (null !== obj && key in obj) {
                throw Error('The object already contains the key "' + key + '"');
              }
              goog.object.set(obj, key, val);
            };
            goog.object.get = function(obj, key, opt_val) {
              return null !== obj && key in obj ? obj[key] : opt_val;
            };
            goog.object.set = function(obj, key, value) {
              obj[key] = value;
            };
            goog.object.setIfUndefined = function(obj, key, value) {
              return key in obj ? obj[key] : obj[key] = value;
            };
            goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
              if (key in obj) {
                return obj[key];
              }
              f = f();
              return obj[key] = f;
            };
            goog.object.equals = function(a, b) {
              for (var k in a) {
                if (!(k in b) || a[k] !== b[k]) {
                  return !1;
                }
              }
              for (k in b) {
                if (!(k in a)) {
                  return !1;
                }
              }
              return !0;
            };
            goog.object.clone = function(obj) {
              var res = {}, key;
              for (key in obj) {
                res[key] = obj[key];
              }
              return res;
            };
            goog.object.unsafeClone = function(obj) {
              var type = goog.typeOf(obj);
              if ("object" == type || "array" == type) {
                if (goog.isFunction(obj.clone)) {
                  return obj.clone();
                }
                type = "array" == type ? [] : {};
                for (var key in obj) {
                  type[key] = goog.object.unsafeClone(obj[key]);
                }
                return type;
              }
              return obj;
            };
            goog.object.transpose = function(obj) {
              var transposed = {}, key;
              for (key in obj) {
                transposed[obj[key]] = key;
              }
              return transposed;
            };
            goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
            goog.object.extend = function(target, var_args) {
              for (var key, source, i = 1; i < arguments.length; i++) {
                source = arguments[i];
                for (key in source) {
                  target[key] = source[key];
                }
                for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
                  key = goog.object.PROTOTYPE_FIELDS_[j], Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
              }
            };
            goog.object.create = function(var_args) {
              var argLength = arguments.length;
              if (1 == argLength && goog.isArray(arguments[0])) {
                return goog.object.create.apply(null, arguments[0]);
              }
              if (argLength % 2) {
                throw Error("Uneven number of arguments");
              }
              for (var rv = {}, i = 0; i < argLength; i += 2) {
                rv[arguments[i]] = arguments[i + 1];
              }
              return rv;
            };
            goog.object.createSet = function(var_args) {
              var argLength = arguments.length;
              if (1 == argLength && goog.isArray(arguments[0])) {
                return goog.object.createSet.apply(null, arguments[0]);
              }
              for (var rv = {}, i = 0; i < argLength; i++) {
                rv[arguments[i]] = !0;
              }
              return rv;
            };
            goog.object.createImmutableView = function(obj) {
              var result = obj;
              Object.isFrozen && !Object.isFrozen(obj) && (result = Object.create(obj), Object.freeze(result));
              return result;
            };
            goog.object.isImmutableView = function(obj) {
              return !!Object.isFrozen && Object.isFrozen(obj);
            };
            goog.object.getAllPropertyNames = function(obj, opt_includeObjectPrototype, opt_includeFunctionPrototype) {
              if (!obj) {
                return [];
              }
              if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {
                return goog.object.getKeys(obj);
              }
              for (var visitedSet = {}; obj && (obj !== Object.prototype || opt_includeObjectPrototype) && (obj !== Function.prototype || opt_includeFunctionPrototype);) {
                for (var names = Object.getOwnPropertyNames(obj), i = 0; i < names.length; i++) {
                  visitedSet[names[i]] = !0;
                }
                obj = Object.getPrototypeOf(obj);
              }
              return goog.object.getKeys(visitedSet);
            };
            goog.array = {};
            goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
            goog.array.ASSUME_NATIVE_FUNCTIONS = !1;
            goog.array.peek = function(array) {
              return array[array.length - 1];
            };
            goog.array.last = goog.array.peek;
            goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(arr, obj, opt_fromIndex) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
            } : function(arr, obj, opt_fromIndex) {
              opt_fromIndex = null == opt_fromIndex ? 0 : 0 > opt_fromIndex ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
              if (goog.isString(arr)) {
                return goog.isString(obj) && 1 == obj.length ? arr.indexOf(obj, opt_fromIndex) : -1;
              }
              for (; opt_fromIndex < arr.length; opt_fromIndex++) {
                if (opt_fromIndex in arr && arr[opt_fromIndex] === obj) {
                  return opt_fromIndex;
                }
              }
              return -1;
            };
            goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.lastIndexOf.call(arr, obj, null == opt_fromIndex ? arr.length - 1 : opt_fromIndex);
            } : function(arr, obj, opt_fromIndex) {
              opt_fromIndex = null == opt_fromIndex ? arr.length - 1 : opt_fromIndex;
              0 > opt_fromIndex && (opt_fromIndex = Math.max(0, arr.length + opt_fromIndex));
              if (goog.isString(arr)) {
                return goog.isString(obj) && 1 == obj.length ? arr.lastIndexOf(obj, opt_fromIndex) : -1;
              }
              for (; 0 <= opt_fromIndex; opt_fromIndex--) {
                if (opt_fromIndex in arr && arr[opt_fromIndex] === obj) {
                  return opt_fromIndex;
                }
              }
              return -1;
            };
            goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(arr, f, opt_obj) {
              goog.asserts.assert(null != arr.length);
              Array.prototype.forEach.call(arr, f, opt_obj);
            } : function(arr, f, opt_obj) {
              for (var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                i in arr2 && f.call(opt_obj, arr2[i], i, arr);
              }
            };
            goog.array.forEachRight = function(arr, f, opt_obj) {
              var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr;
              for (--l; 0 <= l; --l) {
                l in arr2 && f.call(opt_obj, arr2[l], l, arr);
              }
            };
            goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(arr, f, opt_obj) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.filter.call(arr, f, opt_obj);
            } : function(arr, f, opt_obj) {
              for (var l = arr.length, res = [], resLength = 0, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                if (i in arr2) {
                  var val = arr2[i];
                  f.call(opt_obj, val, i, arr) && (res[resLength++] = val);
                }
              }
              return res;
            };
            goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(arr, f, opt_obj) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.map.call(arr, f, opt_obj);
            } : function(arr, f, opt_obj) {
              for (var l = arr.length, res = Array(l), arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                i in arr2 && (res[i] = f.call(opt_obj, arr2[i], i, arr));
              }
              return res;
            };
            goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(arr, f, val, opt_obj) {
              goog.asserts.assert(null != arr.length);
              opt_obj && (f = goog.bind(f, opt_obj));
              return Array.prototype.reduce.call(arr, f, val);
            } : function(arr, f, val$jscomp$0, opt_obj) {
              var rval = val$jscomp$0;
              goog.array.forEach(arr, function(val, index) {
                rval = f.call(opt_obj, rval, val, index, arr);
              });
              return rval;
            };
            goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(arr, f, val, opt_obj) {
              goog.asserts.assert(null != arr.length);
              goog.asserts.assert(null != f);
              opt_obj && (f = goog.bind(f, opt_obj));
              return Array.prototype.reduceRight.call(arr, f, val);
            } : function(arr, f, val$jscomp$0, opt_obj) {
              var rval = val$jscomp$0;
              goog.array.forEachRight(arr, function(val, index) {
                rval = f.call(opt_obj, rval, val, index, arr);
              });
              return rval;
            };
            goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(arr, f, opt_obj) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.some.call(arr, f, opt_obj);
            } : function(arr, f, opt_obj) {
              for (var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
                  return !0;
                }
              }
              return !1;
            };
            goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(arr, f, opt_obj) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.every.call(arr, f, opt_obj);
            } : function(arr, f, opt_obj) {
              for (var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
                  return !1;
                }
              }
              return !0;
            };
            goog.array.count = function(arr$jscomp$0, f, opt_obj) {
              var count = 0;
              goog.array.forEach(arr$jscomp$0, function(element, index, arr) {
                f.call(opt_obj, element, index, arr) && ++count;
              }, opt_obj);
              return count;
            };
            goog.array.find = function(arr, f, opt_obj) {
              f = goog.array.findIndex(arr, f, opt_obj);
              return 0 > f ? null : goog.isString(arr) ? arr.charAt(f) : arr[f];
            };
            goog.array.findIndex = function(arr, f, opt_obj) {
              for (var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0; i < l; i++) {
                if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
                  return i;
                }
              }
              return -1;
            };
            goog.array.findRight = function(arr, f, opt_obj) {
              f = goog.array.findIndexRight(arr, f, opt_obj);
              return 0 > f ? null : goog.isString(arr) ? arr.charAt(f) : arr[f];
            };
            goog.array.findIndexRight = function(arr, f, opt_obj) {
              var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr;
              for (--l; 0 <= l; l--) {
                if (l in arr2 && f.call(opt_obj, arr2[l], l, arr)) {
                  return l;
                }
              }
              return -1;
            };
            goog.array.contains = function(arr, obj) {
              return 0 <= goog.array.indexOf(arr, obj);
            };
            goog.array.isEmpty = function(arr) {
              return 0 == arr.length;
            };
            goog.array.clear = function(arr) {
              if (!goog.isArray(arr)) {
                for (var i = arr.length - 1; 0 <= i; i--) {
                  delete arr[i];
                }
              }
              arr.length = 0;
            };
            goog.array.insert = function(arr, obj) {
              goog.array.contains(arr, obj) || arr.push(obj);
            };
            goog.array.insertAt = function(arr, obj, opt_i) {
              goog.array.splice(arr, opt_i, 0, obj);
            };
            goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
              goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
            };
            goog.array.insertBefore = function(arr, obj, opt_obj2) {
              var i;
              2 == arguments.length || 0 > (i = goog.array.indexOf(arr, opt_obj2)) ? arr.push(obj) : goog.array.insertAt(arr, obj, i);
            };
            goog.array.remove = function(arr, obj) {
              obj = goog.array.indexOf(arr, obj);
              var rv;
              (rv = 0 <= obj) && goog.array.removeAt(arr, obj);
              return rv;
            };
            goog.array.removeLast = function(arr, obj) {
              obj = goog.array.lastIndexOf(arr, obj);
              return 0 <= obj ? (goog.array.removeAt(arr, obj), !0) : !1;
            };
            goog.array.removeAt = function(arr, i) {
              goog.asserts.assert(null != arr.length);
              return 1 == Array.prototype.splice.call(arr, i, 1).length;
            };
            goog.array.removeIf = function(arr, f, opt_obj) {
              f = goog.array.findIndex(arr, f, opt_obj);
              return 0 <= f ? (goog.array.removeAt(arr, f), !0) : !1;
            };
            goog.array.removeAllIf = function(arr, f, opt_obj) {
              var removedCount = 0;
              goog.array.forEachRight(arr, function(val, index) {
                f.call(opt_obj, val, index, arr) && goog.array.removeAt(arr, index) && removedCount++;
              });
              return removedCount;
            };
            goog.array.concat = function(var_args) {
              return Array.prototype.concat.apply([], arguments);
            };
            goog.array.join = function(var_args) {
              return Array.prototype.concat.apply([], arguments);
            };
            goog.array.toArray = function(object) {
              var length = object.length;
              if (0 < length) {
                for (var rv = Array(length), i = 0; i < length; i++) {
                  rv[i] = object[i];
                }
                return rv;
              }
              return [];
            };
            goog.array.clone = goog.array.toArray;
            goog.array.extend = function(arr1, var_args) {
              for (var i = 1; i < arguments.length; i++) {
                var arr2 = arguments[i];
                if (goog.isArrayLike(arr2)) {
                  var len1 = arr1.length || 0, len2 = arr2.length || 0;
                  arr1.length = len1 + len2;
                  for (var j = 0; j < len2; j++) {
                    arr1[len1 + j] = arr2[j];
                  }
                } else {
                  arr1.push(arr2);
                }
              }
            };
            goog.array.splice = function(arr, index, howMany, var_args) {
              goog.asserts.assert(null != arr.length);
              return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
            };
            goog.array.slice = function(arr, start, opt_end) {
              goog.asserts.assert(null != arr.length);
              return 2 >= arguments.length ? Array.prototype.slice.call(arr, start) : Array.prototype.slice.call(arr, start, opt_end);
            };
            goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
              opt_rv = opt_rv || arr;
              var defaultHashFn = function(item) {
                return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
              };
              opt_hashFn = opt_hashFn || defaultHashFn;
              defaultHashFn = {};
              for (var cursorInsert = 0, cursorRead = 0; cursorRead < arr.length;) {
                var current = arr[cursorRead++], key = opt_hashFn(current);
                Object.prototype.hasOwnProperty.call(defaultHashFn, key) || (defaultHashFn[key] = !0, opt_rv[cursorInsert++] = current);
              }
              opt_rv.length = cursorInsert;
            };
            goog.array.binarySearch = function(arr, target, opt_compareFn) {
              return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, !1, target);
            };
            goog.array.binarySelect = function(arr, evaluator, opt_obj) {
              return goog.array.binarySearch_(arr, evaluator, !0, void 0, opt_obj);
            };
            goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
              for (var left = 0, right = arr.length, found; left < right;) {
                var middle = left + right >> 1;
                var compareResult = isEvaluator ? compareFn.call(opt_selfObj, arr[middle], middle, arr) : compareFn(opt_target, arr[middle]);
                0 < compareResult ? left = middle + 1 : (right = middle, found = !compareResult);
              }
              return found ? left : ~left;
            };
            goog.array.sort = function(arr, opt_compareFn) {
              arr.sort(opt_compareFn || goog.array.defaultCompare);
            };
            goog.array.stableSort = function(arr, opt_compareFn) {
              for (var compArr = Array(arr.length), i = 0; i < arr.length; i++) {
                compArr[i] = {index:i, value:arr[i]};
              }
              var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
              goog.array.sort(compArr, function(obj1, obj2) {
                return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
              });
              for (i = 0; i < arr.length; i++) {
                arr[i] = compArr[i].value;
              }
            };
            goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
              var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
              goog.array.sort(arr, function(a, b) {
                return keyCompareFn(keyFn(a), keyFn(b));
              });
            };
            goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
              goog.array.sortByKey(arr, function(obj) {
                return obj[key];
              }, opt_compareFn);
            };
            goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
              opt_compareFn = opt_compareFn || goog.array.defaultCompare;
              for (var i = 1; i < arr.length; i++) {
                var compareResult = opt_compareFn(arr[i - 1], arr[i]);
                if (0 < compareResult || 0 == compareResult && opt_strict) {
                  return !1;
                }
              }
              return !0;
            };
            goog.array.equals = function(arr1, arr2, opt_equalsFn) {
              if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
                return !1;
              }
              var l = arr1.length;
              opt_equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
              for (var i = 0; i < l; i++) {
                if (!opt_equalsFn(arr1[i], arr2[i])) {
                  return !1;
                }
              }
              return !0;
            };
            goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
              opt_compareFn = opt_compareFn || goog.array.defaultCompare;
              for (var l = Math.min(arr1.length, arr2.length), i = 0; i < l; i++) {
                var result = opt_compareFn(arr1[i], arr2[i]);
                if (0 != result) {
                  return result;
                }
              }
              return goog.array.defaultCompare(arr1.length, arr2.length);
            };
            goog.array.defaultCompare = function(a, b) {
              return a > b ? 1 : a < b ? -1 : 0;
            };
            goog.array.inverseDefaultCompare = function(a, b) {
              return -goog.array.defaultCompare(a, b);
            };
            goog.array.defaultCompareEquality = function(a, b) {
              return a === b;
            };
            goog.array.binaryInsert = function(array, value, opt_compareFn) {
              opt_compareFn = goog.array.binarySearch(array, value, opt_compareFn);
              return 0 > opt_compareFn ? (goog.array.insertAt(array, value, -(opt_compareFn + 1)), !0) : !1;
            };
            goog.array.binaryRemove = function(array, value, opt_compareFn) {
              value = goog.array.binarySearch(array, value, opt_compareFn);
              return 0 <= value ? goog.array.removeAt(array, value) : !1;
            };
            goog.array.bucket = function(array, sorter, opt_obj) {
              for (var buckets = {}, i = 0; i < array.length; i++) {
                var value = array[i], key = sorter.call(opt_obj, value, i, array);
                goog.isDef(key) && (buckets[key] || (buckets[key] = [])).push(value);
              }
              return buckets;
            };
            goog.array.toObject = function(arr, keyFunc, opt_obj) {
              var ret = {};
              goog.array.forEach(arr, function(element, index) {
                ret[keyFunc.call(opt_obj, element, index, arr)] = element;
              });
              return ret;
            };
            goog.array.range = function(startOrEnd, opt_end, opt_step) {
              var array = [], start = 0, end = startOrEnd;
              opt_step = opt_step || 1;
              void 0 !== opt_end && (start = startOrEnd, end = opt_end);
              if (0 > opt_step * (end - start)) {
                return [];
              }
              if (0 < opt_step) {
                for (startOrEnd = start; startOrEnd < end; startOrEnd += opt_step) {
                  array.push(startOrEnd);
                }
              } else {
                for (startOrEnd = start; startOrEnd > end; startOrEnd += opt_step) {
                  array.push(startOrEnd);
                }
              }
              return array;
            };
            goog.array.repeat = function(value, n) {
              for (var array = [], i = 0; i < n; i++) {
                array[i] = value;
              }
              return array;
            };
            goog.array.flatten = function(var_args) {
              for (var result = [], i = 0; i < arguments.length; i++) {
                var element = arguments[i];
                if (goog.isArray(element)) {
                  for (var c = 0; c < element.length; c += 8192) {
                    var chunk = goog.array.slice(element, c, c + 8192);
                    chunk = goog.array.flatten.apply(null, chunk);
                    for (var r = 0; r < chunk.length; r++) {
                      result.push(chunk[r]);
                    }
                  }
                } else {
                  result.push(element);
                }
              }
              return result;
            };
            goog.array.rotate = function(array, n) {
              goog.asserts.assert(null != array.length);
              array.length && (n %= array.length, 0 < n ? Array.prototype.unshift.apply(array, array.splice(-n, n)) : 0 > n && Array.prototype.push.apply(array, array.splice(0, -n)));
              return array;
            };
            goog.array.moveItem = function(arr, fromIndex, toIndex) {
              goog.asserts.assert(0 <= fromIndex && fromIndex < arr.length);
              goog.asserts.assert(0 <= toIndex && toIndex < arr.length);
              fromIndex = Array.prototype.splice.call(arr, fromIndex, 1);
              Array.prototype.splice.call(arr, toIndex, 0, fromIndex[0]);
            };
            goog.array.zip = function(var_args) {
              if (!arguments.length) {
                return [];
              }
              for (var result = [], minLen = arguments[0].length, i = 1; i < arguments.length; i++) {
                arguments[i].length < minLen && (minLen = arguments[i].length);
              }
              for (i = 0; i < minLen; i++) {
                for (var value = [], j = 0; j < arguments.length; j++) {
                  value.push(arguments[j][i]);
                }
                result.push(value);
              }
              return result;
            };
            goog.array.shuffle = function(arr, opt_randFn) {
              opt_randFn = opt_randFn || Math.random;
              for (var i = arr.length - 1; 0 < i; i--) {
                var j = Math.floor(opt_randFn() * (i + 1)), tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
              }
            };
            goog.array.copyByIndex = function(arr, index_arr) {
              var result = [];
              goog.array.forEach(index_arr, function(index) {
                result.push(arr[index]);
              });
              return result;
            };
            goog.array.concatMap = function(arr, f, opt_obj) {
              return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
            };
            goog.structs = {};
            goog.structs.getCount = function(col) {
              return col.getCount && "function" == typeof col.getCount ? col.getCount() : goog.isArrayLike(col) || goog.isString(col) ? col.length : goog.object.getCount(col);
            };
            goog.structs.getValues = function(col) {
              if (col.getValues && "function" == typeof col.getValues) {
                return col.getValues();
              }
              if (goog.isString(col)) {
                return col.split("");
              }
              if (goog.isArrayLike(col)) {
                for (var rv = [], l = col.length, i = 0; i < l; i++) {
                  rv.push(col[i]);
                }
                return rv;
              }
              return goog.object.getValues(col);
            };
            goog.structs.getKeys = function(col) {
              if (col.getKeys && "function" == typeof col.getKeys) {
                return col.getKeys();
              }
              if (!col.getValues || "function" != typeof col.getValues) {
                if (goog.isArrayLike(col) || goog.isString(col)) {
                  var rv = [];
                  col = col.length;
                  for (var i = 0; i < col; i++) {
                    rv.push(i);
                  }
                  return rv;
                }
                return goog.object.getKeys(col);
              }
            };
            goog.structs.contains = function(col, val) {
              return col.contains && "function" == typeof col.contains ? col.contains(val) : col.containsValue && "function" == typeof col.containsValue ? col.containsValue(val) : goog.isArrayLike(col) || goog.isString(col) ? goog.array.contains(col, val) : goog.object.containsValue(col, val);
            };
            goog.structs.isEmpty = function(col) {
              return col.isEmpty && "function" == typeof col.isEmpty ? col.isEmpty() : goog.isArrayLike(col) || goog.isString(col) ? goog.array.isEmpty(col) : goog.object.isEmpty(col);
            };
            goog.structs.clear = function(col) {
              col.clear && "function" == typeof col.clear ? col.clear() : goog.isArrayLike(col) ? goog.array.clear(col) : goog.object.clear(col);
            };
            goog.structs.forEach = function(col, f, opt_obj) {
              if (col.forEach && "function" == typeof col.forEach) {
                col.forEach(f, opt_obj);
              } else {
                if (goog.isArrayLike(col) || goog.isString(col)) {
                  goog.array.forEach(col, f, opt_obj);
                } else {
                  for (var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0; i < l; i++) {
                    f.call(opt_obj, values[i], keys && keys[i], col);
                  }
                }
              }
            };
            goog.structs.filter = function(col, f, opt_obj) {
              if ("function" == typeof col.filter) {
                return col.filter(f, opt_obj);
              }
              if (goog.isArrayLike(col) || goog.isString(col)) {
                return goog.array.filter(col, f, opt_obj);
              }
              var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length;
              if (keys) {
                var rv = {};
                for (var i = 0; i < l; i++) {
                  f.call(opt_obj, values[i], keys[i], col) && (rv[keys[i]] = values[i]);
                }
              } else {
                for (rv = [], i = 0; i < l; i++) {
                  f.call(opt_obj, values[i], void 0, col) && rv.push(values[i]);
                }
              }
              return rv;
            };
            goog.structs.map = function(col, f, opt_obj) {
              if ("function" == typeof col.map) {
                return col.map(f, opt_obj);
              }
              if (goog.isArrayLike(col) || goog.isString(col)) {
                return goog.array.map(col, f, opt_obj);
              }
              var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length;
              if (keys) {
                var rv = {};
                for (var i = 0; i < l; i++) {
                  rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
                }
              } else {
                for (rv = [], i = 0; i < l; i++) {
                  rv[i] = f.call(opt_obj, values[i], void 0, col);
                }
              }
              return rv;
            };
            goog.structs.some = function(col, f, opt_obj) {
              if ("function" == typeof col.some) {
                return col.some(f, opt_obj);
              }
              if (goog.isArrayLike(col) || goog.isString(col)) {
                return goog.array.some(col, f, opt_obj);
              }
              for (var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0; i < l; i++) {
                if (f.call(opt_obj, values[i], keys && keys[i], col)) {
                  return !0;
                }
              }
              return !1;
            };
            goog.structs.every = function(col, f, opt_obj) {
              if ("function" == typeof col.every) {
                return col.every(f, opt_obj);
              }
              if (goog.isArrayLike(col) || goog.isString(col)) {
                return goog.array.every(col, f, opt_obj);
              }
              for (var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0; i < l; i++) {
                if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
                  return !1;
                }
              }
              return !0;
            };
            goog.functions = {};
            goog.functions.constant = function(retValue) {
              return function() {
                return retValue;
              };
            };
            goog.functions.FALSE = function() {
              return !1;
            };
            goog.functions.TRUE = function() {
              return !0;
            };
            goog.functions.NULL = function() {
              return null;
            };
            goog.functions.identity = function(opt_returnValue, var_args) {
              return opt_returnValue;
            };
            goog.functions.error = function(message) {
              return function() {
                throw Error(message);
              };
            };
            goog.functions.fail = function(err) {
              return function() {
                throw err;
              };
            };
            goog.functions.lock = function(f, opt_numArgs) {
              opt_numArgs = opt_numArgs || 0;
              return function() {
                return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
              };
            };
            goog.functions.nth = function(n) {
              return function() {
                return arguments[n];
              };
            };
            goog.functions.partialRight = function(fn, var_args) {
              var rightArgs = Array.prototype.slice.call(arguments, 1);
              return function() {
                var newArgs = Array.prototype.slice.call(arguments);
                newArgs.push.apply(newArgs, rightArgs);
                return fn.apply(this, newArgs);
              };
            };
            goog.functions.withReturnValue = function(f, retValue) {
              return goog.functions.sequence(f, goog.functions.constant(retValue));
            };
            goog.functions.equalTo = function(value, opt_useLooseComparison) {
              return function(other) {
                return opt_useLooseComparison ? value == other : value === other;
              };
            };
            goog.functions.compose = function(fn, var_args) {
              var functions = arguments, length = functions.length;
              return function() {
                var result;
                length && (result = functions[length - 1].apply(this, arguments));
                for (var i = length - 2; 0 <= i; i--) {
                  result = functions[i].call(this, result);
                }
                return result;
              };
            };
            goog.functions.sequence = function(var_args) {
              var functions = arguments, length = functions.length;
              return function() {
                for (var result, i = 0; i < length; i++) {
                  result = functions[i].apply(this, arguments);
                }
                return result;
              };
            };
            goog.functions.and = function(var_args) {
              var functions = arguments, length = functions.length;
              return function() {
                for (var i = 0; i < length; i++) {
                  if (!functions[i].apply(this, arguments)) {
                    return !1;
                  }
                }
                return !0;
              };
            };
            goog.functions.or = function(var_args) {
              var functions = arguments, length = functions.length;
              return function() {
                for (var i = 0; i < length; i++) {
                  if (functions[i].apply(this, arguments)) {
                    return !0;
                  }
                }
                return !1;
              };
            };
            goog.functions.not = function(f) {
              return function() {
                return !f.apply(this, arguments);
              };
            };
            goog.functions.create = function(constructor, var_args) {
              var temp = function() {
              };
              temp.prototype = constructor.prototype;
              temp = new temp;
              constructor.apply(temp, Array.prototype.slice.call(arguments, 1));
              return temp;
            };
            goog.functions.CACHE_RETURN_VALUE = !0;
            goog.functions.cacheReturnValue = function(fn) {
              var called = !1, value;
              return function() {
                if (!goog.functions.CACHE_RETURN_VALUE) {
                  return fn();
                }
                called || (value = fn(), called = !0);
                return value;
              };
            };
            goog.functions.once = function(f) {
              var inner = f;
              return function() {
                if (inner) {
                  var tmp = inner;
                  inner = null;
                  tmp();
                }
              };
            };
            goog.functions.debounce = function(f, interval, opt_scope) {
              var timeout = 0;
              return function(var_args) {
                goog.global.clearTimeout(timeout);
                var args = arguments;
                timeout = goog.global.setTimeout(function() {
                  f.apply(opt_scope, args);
                }, interval);
              };
            };
            goog.functions.throttle = function(f, interval, opt_scope) {
              var timeout = 0, shouldFire = !1, args = [], handleTimeout = function() {
                timeout = 0;
                shouldFire && (shouldFire = !1, fire());
              }, fire = function() {
                timeout = goog.global.setTimeout(handleTimeout, interval);
                f.apply(opt_scope, args);
              };
              return function(var_args) {
                args = arguments;
                timeout ? shouldFire = !0 : fire();
              };
            };
            goog.functions.rateLimit = function(f, interval, opt_scope) {
              var timeout = 0, handleTimeout = function() {
                timeout = 0;
              };
              return function(var_args) {
                timeout || (timeout = goog.global.setTimeout(handleTimeout, interval), f.apply(opt_scope, arguments));
              };
            };
            goog.math.randomInt = function(a) {
              return Math.floor(Math.random() * a);
            };
            goog.math.uniformRandom = function(a, b) {
              return a + Math.random() * (b - a);
            };
            goog.math.clamp = function(value, min, max) {
              return Math.min(Math.max(value, min), max);
            };
            goog.math.modulo = function(a, b) {
              a %= b;
              return 0 > a * b ? a + b : a;
            };
            goog.math.lerp = function(a, b, x) {
              return a + x * (b - a);
            };
            goog.math.nearlyEquals = function(a, b, opt_tolerance) {
              return Math.abs(a - b) <= (opt_tolerance || 0.000001);
            };
            goog.math.standardAngle = function(angle) {
              return goog.math.modulo(angle, 360);
            };
            goog.math.standardAngleInRadians = function(angle) {
              return goog.math.modulo(angle, 2 * Math.PI);
            };
            goog.math.toRadians = function(angleDegrees) {
              return angleDegrees * Math.PI / 180;
            };
            goog.math.toDegrees = function(angleRadians) {
              return 180 * angleRadians / Math.PI;
            };
            goog.math.angleDx = function(degrees, radius) {
              return radius * Math.cos(goog.math.toRadians(degrees));
            };
            goog.math.angleDy = function(degrees, radius) {
              return radius * Math.sin(goog.math.toRadians(degrees));
            };
            goog.math.angle = function(x1, y1, x2, y2) {
              return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
            };
            goog.math.angleDifference = function(startAngle, endAngle) {
              startAngle = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
              180 < startAngle ? startAngle -= 360 : -180 >= startAngle && (startAngle = 360 + startAngle);
              return startAngle;
            };
            goog.math.sign = function(x) {
              return 0 < x ? 1 : 0 > x ? -1 : x;
            };
            goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
              opt_compareFn = opt_compareFn || function(a, b) {
                return a == b;
              };
              opt_collectorFn = opt_collectorFn || function(i1, i2) {
                return array1[i1];
              };
              for (var length1 = array1.length, length2 = array2.length, arr = [], i = 0; i < length1 + 1; i++) {
                arr[i] = [], arr[i][0] = 0;
              }
              for (var j = 0; j < length2 + 1; j++) {
                arr[0][j] = 0;
              }
              for (i = 1; i <= length1; i++) {
                for (j = 1; j <= length2; j++) {
                  opt_compareFn(array1[i - 1], array2[j - 1]) ? arr[i][j] = arr[i - 1][j - 1] + 1 : arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
                }
              }
              var result = [];
              i = length1;
              for (j = length2; 0 < i && 0 < j;) {
                opt_compareFn(array1[i - 1], array2[j - 1]) ? (result.unshift(opt_collectorFn(i - 1, j - 1)), i--, j--) : arr[i - 1][j] > arr[i][j - 1] ? i-- : j--;
              }
              return result;
            };
            goog.math.sum = function(var_args) {
              return goog.array.reduce(arguments, function(sum, value) {
                return sum + value;
              }, 0);
            };
            goog.math.average = function(var_args) {
              return goog.math.sum.apply(null, arguments) / arguments.length;
            };
            goog.math.sampleVariance = function(var_args) {
              var sampleSize = arguments.length;
              if (2 > sampleSize) {
                return 0;
              }
              var mean = goog.math.average.apply(null, arguments);
              return goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
                return Math.pow(val - mean, 2);
              })) / (sampleSize - 1);
            };
            goog.math.standardDeviation = function(var_args) {
              return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
            };
            goog.math.isInt = function(num) {
              return isFinite(num) && 0 == num % 1;
            };
            goog.math.isFiniteNumber = function(num) {
              return isFinite(num);
            };
            goog.math.isNegativeZero = function(num) {
              return 0 == num && 0 > 1 / num;
            };
            goog.math.log10Floor = function(num) {
              if (0 < num) {
                var x = Math.round(Math.log(num) * Math.LOG10E);
                return x - (parseFloat("1e" + x) > num ? 1 : 0);
              }
              return 0 == num ? -Infinity : NaN;
            };
            goog.math.safeFloor = function(num, opt_epsilon) {
              goog.asserts.assert(!goog.isDef(opt_epsilon) || 0 < opt_epsilon);
              return Math.floor(num + (opt_epsilon || 2e-15));
            };
            goog.math.safeCeil = function(num, opt_epsilon) {
              goog.asserts.assert(!goog.isDef(opt_epsilon) || 0 < opt_epsilon);
              return Math.ceil(num - (opt_epsilon || 2e-15));
            };
            goog.iter = {};
            goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global.StopIteration : {message:"StopIteration", stack:""};
            goog.iter.Iterator = function() {
            };
            goog.iter.Iterator.prototype.next = function() {
              throw goog.iter.StopIteration;
            };
            goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
              return this;
            };
            goog.iter.toIterator = function(iterable) {
              if (iterable instanceof goog.iter.Iterator) {
                return iterable;
              }
              if ("function" == typeof iterable.__iterator__) {
                return iterable.__iterator__(!1);
              }
              if (goog.isArrayLike(iterable)) {
                var i = 0, newIter = new goog.iter.Iterator;
                newIter.next = function() {
                  for (;;) {
                    if (i >= iterable.length) {
                      throw goog.iter.StopIteration;
                    }
                    if (i in iterable) {
                      return iterable[i++];
                    }
                    i++;
                  }
                };
                return newIter;
              }
              throw Error("Not implemented");
            };
            goog.iter.forEach = function(iterable, f, opt_obj) {
              if (goog.isArrayLike(iterable)) {
                try {
                  goog.array.forEach(iterable, f, opt_obj);
                } catch (ex) {
                  if (ex !== goog.iter.StopIteration) {
                    throw ex;
                  }
                }
              } else {
                iterable = goog.iter.toIterator(iterable);
                try {
                  for (;;) {
                    f.call(opt_obj, iterable.next(), void 0, iterable);
                  }
                } catch (ex$1) {
                  if (ex$1 !== goog.iter.StopIteration) {
                    throw ex$1;
                  }
                }
              }
            };
            goog.iter.filter = function(iterable, f, opt_obj) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              iterable.next = function() {
                for (;;) {
                  var val = iterator.next();
                  if (f.call(opt_obj, val, void 0, iterator)) {
                    return val;
                  }
                }
              };
              return iterable;
            };
            goog.iter.filterFalse = function(iterable, f, opt_obj) {
              return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
            };
            goog.iter.range = function(startOrStop, opt_stop, opt_step) {
              var start = 0, stop = startOrStop, step = opt_step || 1;
              1 < arguments.length && (start = startOrStop, stop = +opt_stop);
              if (0 == step) {
                throw Error("Range step argument must not be zero");
              }
              var newIter = new goog.iter.Iterator;
              newIter.next = function() {
                if (0 < step && start >= stop || 0 > step && start <= stop) {
                  throw goog.iter.StopIteration;
                }
                var rv = start;
                start += step;
                return rv;
              };
              return newIter;
            };
            goog.iter.join = function(iterable, deliminator) {
              return goog.iter.toArray(iterable).join(deliminator);
            };
            goog.iter.map = function(iterable, f, opt_obj) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              iterable.next = function() {
                var val = iterator.next();
                return f.call(opt_obj, val, void 0, iterator);
              };
              return iterable;
            };
            goog.iter.reduce = function(iterable, f, val$jscomp$0, opt_obj) {
              var rval = val$jscomp$0;
              goog.iter.forEach(iterable, function(val) {
                rval = f.call(opt_obj, rval, val);
              });
              return rval;
            };
            goog.iter.some = function(iterable, f, opt_obj) {
              iterable = goog.iter.toIterator(iterable);
              try {
                for (;;) {
                  if (f.call(opt_obj, iterable.next(), void 0, iterable)) {
                    return !0;
                  }
                }
              } catch (ex) {
                if (ex !== goog.iter.StopIteration) {
                  throw ex;
                }
              }
              return !1;
            };
            goog.iter.every = function(iterable, f, opt_obj) {
              iterable = goog.iter.toIterator(iterable);
              try {
                for (;;) {
                  if (!f.call(opt_obj, iterable.next(), void 0, iterable)) {
                    return !1;
                  }
                }
              } catch (ex) {
                if (ex !== goog.iter.StopIteration) {
                  throw ex;
                }
              }
              return !0;
            };
            goog.iter.chain = function(var_args) {
              return goog.iter.chainFromIterable(arguments);
            };
            goog.iter.chainFromIterable = function(iterable) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              var current = null;
              iterable.next = function() {
                for (;;) {
                  if (null == current) {
                    var it = iterator.next();
                    current = goog.iter.toIterator(it);
                  }
                  try {
                    return current.next();
                  } catch (ex) {
                    if (ex !== goog.iter.StopIteration) {
                      throw ex;
                    }
                    current = null;
                  }
                }
              };
              return iterable;
            };
            goog.iter.dropWhile = function(iterable, f, opt_obj) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              var dropping = !0;
              iterable.next = function() {
                for (;;) {
                  var val = iterator.next();
                  if (!dropping || !f.call(opt_obj, val, void 0, iterator)) {
                    return dropping = !1, val;
                  }
                }
              };
              return iterable;
            };
            goog.iter.takeWhile = function(iterable, f, opt_obj) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              iterable.next = function() {
                var val = iterator.next();
                if (f.call(opt_obj, val, void 0, iterator)) {
                  return val;
                }
                throw goog.iter.StopIteration;
              };
              return iterable;
            };
            goog.iter.toArray = function(iterable) {
              if (goog.isArrayLike(iterable)) {
                return goog.array.toArray(iterable);
              }
              iterable = goog.iter.toIterator(iterable);
              var array = [];
              goog.iter.forEach(iterable, function(val) {
                array.push(val);
              });
              return array;
            };
            goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
              iterable1 = goog.iter.zipLongest({}, iterable1, iterable2);
              var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
              return goog.iter.every(iterable1, function(pair) {
                return equalsFn(pair[0], pair[1]);
              });
            };
            goog.iter.nextOrValue = function(iterable, defaultValue) {
              try {
                return goog.iter.toIterator(iterable).next();
              } catch (e) {
                if (e != goog.iter.StopIteration) {
                  throw e;
                }
                return defaultValue;
              }
            };
            goog.iter.product = function(var_args) {
              if (goog.array.some(arguments, function(arr) {
                return !arr.length;
              }) || !arguments.length) {
                return new goog.iter.Iterator;
              }
              var iter = new goog.iter.Iterator, arrays = arguments, indicies = goog.array.repeat(0, arrays.length);
              iter.next = function() {
                if (indicies) {
                  for (var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
                    return arrays[arrayIndex][valueIndex];
                  }), i = indicies.length - 1; 0 <= i; i--) {
                    goog.asserts.assert(indicies);
                    if (indicies[i] < arrays[i].length - 1) {
                      indicies[i]++;
                      break;
                    }
                    if (0 == i) {
                      indicies = null;
                      break;
                    }
                    indicies[i] = 0;
                  }
                  return retVal;
                }
                throw goog.iter.StopIteration;
              };
              return iter;
            };
            goog.iter.cycle = function(iterable) {
              var baseIterator = goog.iter.toIterator(iterable), cache = [], cacheIndex = 0;
              iterable = new goog.iter.Iterator;
              var useCache = !1;
              iterable.next = function() {
                var returnElement = null;
                if (!useCache) {
                  try {
                    return returnElement = baseIterator.next(), cache.push(returnElement), returnElement;
                  } catch (e) {
                    if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
                      throw e;
                    }
                    useCache = !0;
                  }
                }
                returnElement = cache[cacheIndex];
                cacheIndex = (cacheIndex + 1) % cache.length;
                return returnElement;
              };
              return iterable;
            };
            goog.iter.count = function(opt_start, opt_step) {
              var counter = opt_start || 0, step = goog.isDef(opt_step) ? opt_step : 1;
              opt_start = new goog.iter.Iterator;
              opt_start.next = function() {
                var returnValue = counter;
                counter += step;
                return returnValue;
              };
              return opt_start;
            };
            goog.iter.repeat = function(value) {
              var iter = new goog.iter.Iterator;
              iter.next = goog.functions.constant(value);
              return iter;
            };
            goog.iter.accumulate = function(iterable) {
              var iterator = goog.iter.toIterator(iterable), total = 0;
              iterable = new goog.iter.Iterator;
              iterable.next = function() {
                return total += iterator.next();
              };
              return iterable;
            };
            goog.iter.zip = function(var_args) {
              var args = arguments, iter = new goog.iter.Iterator;
              if (0 < args.length) {
                var iterators = goog.array.map(args, goog.iter.toIterator);
                iter.next = function() {
                  return goog.array.map(iterators, function(it) {
                    return it.next();
                  });
                };
              }
              return iter;
            };
            goog.iter.zipLongest = function(fillValue, var_args) {
              var args = goog.array.slice(arguments, 1), iter = new goog.iter.Iterator;
              if (0 < args.length) {
                var iterators = goog.array.map(args, goog.iter.toIterator);
                iter.next = function() {
                  var iteratorsHaveValues = !1, arr = goog.array.map(iterators, function(it) {
                    try {
                      var returnValue = it.next();
                      iteratorsHaveValues = !0;
                    } catch (ex) {
                      if (ex !== goog.iter.StopIteration) {
                        throw ex;
                      }
                      returnValue = fillValue;
                    }
                    return returnValue;
                  });
                  if (!iteratorsHaveValues) {
                    throw goog.iter.StopIteration;
                  }
                  return arr;
                };
              }
              return iter;
            };
            goog.iter.compress = function(iterable, selectors) {
              var selectorIterator = goog.iter.toIterator(selectors);
              return goog.iter.filter(iterable, function() {
                return !!selectorIterator.next();
              });
            };
            goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
              this.iterator = goog.iter.toIterator(iterable);
              this.keyFunc = opt_keyFunc || goog.functions.identity;
            };
            goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
            goog.iter.GroupByIterator_.prototype.next = function() {
              for (; this.currentKey == this.targetKey;) {
                this.currentValue = this.iterator.next(), this.currentKey = this.keyFunc(this.currentValue);
              }
              this.targetKey = this.currentKey;
              return [this.currentKey, this.groupItems_(this.targetKey)];
            };
            goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
              for (var arr = []; this.currentKey == targetKey;) {
                arr.push(this.currentValue);
                try {
                  this.currentValue = this.iterator.next();
                } catch (ex) {
                  if (ex !== goog.iter.StopIteration) {
                    throw ex;
                  }
                  break;
                }
                this.currentKey = this.keyFunc(this.currentValue);
              }
              return arr;
            };
            goog.iter.groupBy = function(iterable, opt_keyFunc) {
              return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
            };
            goog.iter.starMap = function(iterable, f, opt_obj) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              iterable.next = function() {
                var args = goog.iter.toArray(iterator.next());
                return f.apply(opt_obj, goog.array.concat(args, void 0, iterator));
              };
              return iterable;
            };
            goog.iter.tee = function(iterable, opt_num) {
              var iterator = goog.iter.toIterator(iterable);
              iterable = goog.isNumber(opt_num) ? opt_num : 2;
              var buffers = goog.array.map(goog.array.range(iterable), function() {
                return [];
              }), addNextIteratorValueToBuffers = function() {
                var val = iterator.next();
                goog.array.forEach(buffers, function(buffer) {
                  buffer.push(val);
                });
              };
              return goog.array.map(buffers, function(buffer) {
                var iter = new goog.iter.Iterator;
                iter.next = function() {
                  goog.array.isEmpty(buffer) && addNextIteratorValueToBuffers();
                  goog.asserts.assert(!goog.array.isEmpty(buffer));
                  return buffer.shift();
                };
                return iter;
              });
            };
            goog.iter.enumerate = function(iterable, opt_start) {
              return goog.iter.zip(goog.iter.count(opt_start), iterable);
            };
            goog.iter.limit = function(iterable, limitSize) {
              goog.asserts.assert(goog.math.isInt(limitSize) && 0 <= limitSize);
              var iterator = goog.iter.toIterator(iterable);
              iterable = new goog.iter.Iterator;
              var remaining = limitSize;
              iterable.next = function() {
                if (0 < remaining--) {
                  return iterator.next();
                }
                throw goog.iter.StopIteration;
              };
              return iterable;
            };
            goog.iter.consume = function(iterable, count) {
              goog.asserts.assert(goog.math.isInt(count) && 0 <= count);
              for (iterable = goog.iter.toIterator(iterable); 0 < count--;) {
                goog.iter.nextOrValue(iterable, null);
              }
              return iterable;
            };
            goog.iter.slice = function(iterable, start, opt_end) {
              goog.asserts.assert(goog.math.isInt(start) && 0 <= start);
              iterable = goog.iter.consume(iterable, start);
              goog.isNumber(opt_end) && (goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start), iterable = goog.iter.limit(iterable, opt_end - start));
              return iterable;
            };
            goog.iter.hasDuplicates_ = function(arr) {
              var deduped = [];
              goog.array.removeDuplicates(arr, deduped);
              return arr.length != deduped.length;
            };
            goog.iter.permutations = function(iterable, opt_length) {
              iterable = goog.iter.toArray(iterable);
              opt_length = goog.isNumber(opt_length) ? opt_length : iterable.length;
              opt_length = goog.array.repeat(iterable, opt_length);
              opt_length = goog.iter.product.apply(void 0, opt_length);
              return goog.iter.filter(opt_length, function(arr) {
                return !goog.iter.hasDuplicates_(arr);
              });
            };
            goog.iter.combinations = function(iterable, length) {
              function getIndexFromElements(index) {
                return elements[index];
              }
              var elements = goog.iter.toArray(iterable);
              iterable = goog.iter.range(elements.length);
              length = goog.iter.permutations(iterable, length);
              var sortedIndexIterator = goog.iter.filter(length, function(arr) {
                return goog.array.isSorted(arr);
              });
              length = new goog.iter.Iterator;
              length.next = function() {
                return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
              };
              return length;
            };
            goog.iter.combinationsWithReplacement = function(iterable, length) {
              function getIndexFromElements(index) {
                return elements[index];
              }
              var elements = goog.iter.toArray(iterable);
              iterable = goog.array.range(elements.length);
              length = goog.array.repeat(iterable, length);
              length = goog.iter.product.apply(void 0, length);
              var sortedIndexIterator = goog.iter.filter(length, function(arr) {
                return goog.array.isSorted(arr);
              });
              length = new goog.iter.Iterator;
              length.next = function() {
                return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
              };
              return length;
            };
            goog.structs.Map = function(opt_map, var_args) {
              this.map_ = {};
              this.keys_ = [];
              this.version_ = this.count_ = 0;
              var argLength = arguments.length;
              if (1 < argLength) {
                if (argLength % 2) {
                  throw Error("Uneven number of arguments");
                }
                for (var i = 0; i < argLength; i += 2) {
                  this.set(arguments[i], arguments[i + 1]);
                }
              } else {
                opt_map && this.addAll(opt_map);
              }
            };
            goog.structs.Map.prototype.getCount = function() {
              return this.count_;
            };
            goog.structs.Map.prototype.getValues = function() {
              this.cleanupKeysArray_();
              for (var rv = [], i = 0; i < this.keys_.length; i++) {
                rv.push(this.map_[this.keys_[i]]);
              }
              return rv;
            };
            goog.structs.Map.prototype.getKeys = function() {
              this.cleanupKeysArray_();
              return this.keys_.concat();
            };
            goog.structs.Map.prototype.containsKey = function(key) {
              return goog.structs.Map.hasKey_(this.map_, key);
            };
            goog.structs.Map.prototype.containsValue = function(val) {
              for (var i = 0; i < this.keys_.length; i++) {
                var key = this.keys_[i];
                if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
                  return !0;
                }
              }
              return !1;
            };
            goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
              if (this === otherMap) {
                return !0;
              }
              if (this.count_ != otherMap.getCount()) {
                return !1;
              }
              opt_equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
              this.cleanupKeysArray_();
              for (var key, i = 0; key = this.keys_[i]; i++) {
                if (!opt_equalityFn(this.get(key), otherMap.get(key))) {
                  return !1;
                }
              }
              return !0;
            };
            goog.structs.Map.defaultEquals = function(a, b) {
              return a === b;
            };
            goog.structs.Map.prototype.isEmpty = function() {
              return 0 == this.count_;
            };
            goog.structs.Map.prototype.clear = function() {
              this.map_ = {};
              this.version_ = this.count_ = this.keys_.length = 0;
            };
            goog.structs.Map.prototype.remove = function(key) {
              return goog.structs.Map.hasKey_(this.map_, key) ? (delete this.map_[key], this.count_--, this.version_++, this.keys_.length > 2 * this.count_ && this.cleanupKeysArray_(), !0) : !1;
            };
            goog.structs.Map.prototype.cleanupKeysArray_ = function() {
              if (this.count_ != this.keys_.length) {
                for (var srcIndex = 0, destIndex = 0; srcIndex < this.keys_.length;) {
                  var key = this.keys_[srcIndex];
                  goog.structs.Map.hasKey_(this.map_, key) && (this.keys_[destIndex++] = key);
                  srcIndex++;
                }
                this.keys_.length = destIndex;
              }
              if (this.count_ != this.keys_.length) {
                var seen = {};
                for (destIndex = srcIndex = 0; srcIndex < this.keys_.length;) {
                  key = this.keys_[srcIndex], goog.structs.Map.hasKey_(seen, key) || (this.keys_[destIndex++] = key, seen[key] = 1), srcIndex++;
                }
                this.keys_.length = destIndex;
              }
            };
            goog.structs.Map.prototype.get = function(key, opt_val) {
              return goog.structs.Map.hasKey_(this.map_, key) ? this.map_[key] : opt_val;
            };
            goog.structs.Map.prototype.set = function(key, value) {
              goog.structs.Map.hasKey_(this.map_, key) || (this.count_++, this.keys_.push(key), this.version_++);
              this.map_[key] = value;
            };
            goog.structs.Map.prototype.addAll = function(map) {
              if (map instanceof goog.structs.Map) {
                for (var keys = map.getKeys(), i = 0; i < keys.length; i++) {
                  this.set(keys[i], map.get(keys[i]));
                }
              } else {
                for (keys in map) {
                  this.set(keys, map[keys]);
                }
              }
            };
            goog.structs.Map.prototype.forEach = function(f, opt_obj) {
              for (var keys = this.getKeys(), i = 0; i < keys.length; i++) {
                var key = keys[i], value = this.get(key);
                f.call(opt_obj, value, key, this);
              }
            };
            goog.structs.Map.prototype.clone = function() {
              return new goog.structs.Map(this);
            };
            goog.structs.Map.prototype.transpose = function() {
              for (var transposed = new goog.structs.Map, i = 0; i < this.keys_.length; i++) {
                var key = this.keys_[i];
                transposed.set(this.map_[key], key);
              }
              return transposed;
            };
            goog.structs.Map.prototype.toObject = function() {
              this.cleanupKeysArray_();
              for (var obj = {}, i = 0; i < this.keys_.length; i++) {
                var key = this.keys_[i];
                obj[key] = this.map_[key];
              }
              return obj;
            };
            goog.structs.Map.prototype.getKeyIterator = function() {
              return this.__iterator__(!0);
            };
            goog.structs.Map.prototype.getValueIterator = function() {
              return this.__iterator__(!1);
            };
            goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
              this.cleanupKeysArray_();
              var i = 0, version = this.version_, selfObj = this, newIter = new goog.iter.Iterator;
              newIter.next = function() {
                if (version != selfObj.version_) {
                  throw Error("The map has changed since the iterator was created");
                }
                if (i >= selfObj.keys_.length) {
                  throw goog.iter.StopIteration;
                }
                var key = selfObj.keys_[i++];
                return opt_keys ? key : selfObj.map_[key];
              };
              return newIter;
            };
            goog.structs.Map.hasKey_ = function(obj, key) {
              return Object.prototype.hasOwnProperty.call(obj, key);
            };
            goog.uri = {};
            goog.uri.utils = {};
            goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
            goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
              var out = "";
              opt_scheme && (out += opt_scheme + ":");
              opt_domain && (out += "//", opt_userInfo && (out += opt_userInfo + "@"), out += opt_domain, opt_port && (out += ":" + opt_port));
              opt_path && (out += opt_path);
              opt_queryData && (out += "?" + opt_queryData);
              opt_fragment && (out += "#" + opt_fragment);
              return out;
            };
            goog.uri.utils.splitRe_ = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
            goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
            goog.uri.utils.split = function(uri) {
              return uri.match(goog.uri.utils.splitRe_);
            };
            goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
              return uri ? opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri) : uri;
            };
            goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
              return goog.uri.utils.split(uri)[componentIndex] || null;
            };
            goog.uri.utils.getScheme = function(uri) {
              return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
            };
            goog.uri.utils.getEffectiveScheme = function(uri) {
              uri = goog.uri.utils.getScheme(uri);
              !uri && goog.global.self && goog.global.self.location && (uri = goog.global.self.location.protocol, uri = uri.substr(0, uri.length - 1));
              return uri ? uri.toLowerCase() : "";
            };
            goog.uri.utils.getUserInfoEncoded = function(uri) {
              return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
            };
            goog.uri.utils.getUserInfo = function(uri) {
              return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
            };
            goog.uri.utils.getDomainEncoded = function(uri) {
              return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
            };
            goog.uri.utils.getDomain = function(uri) {
              return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), !0);
            };
            goog.uri.utils.getPort = function(uri) {
              return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
            };
            goog.uri.utils.getPathEncoded = function(uri) {
              return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
            };
            goog.uri.utils.getPath = function(uri) {
              return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), !0);
            };
            goog.uri.utils.getQueryData = function(uri) {
              return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
            };
            goog.uri.utils.getFragmentEncoded = function(uri) {
              var hashIndex = uri.indexOf("#");
              return 0 > hashIndex ? null : uri.substr(hashIndex + 1);
            };
            goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
              return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
            };
            goog.uri.utils.getFragment = function(uri) {
              return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
            };
            goog.uri.utils.getHost = function(uri) {
              uri = goog.uri.utils.split(uri);
              return goog.uri.utils.buildFromEncodedParts(uri[goog.uri.utils.ComponentIndex.SCHEME], uri[goog.uri.utils.ComponentIndex.USER_INFO], uri[goog.uri.utils.ComponentIndex.DOMAIN], uri[goog.uri.utils.ComponentIndex.PORT]);
            };
            goog.uri.utils.getOrigin = function(uri) {
              uri = goog.uri.utils.split(uri);
              return goog.uri.utils.buildFromEncodedParts(uri[goog.uri.utils.ComponentIndex.SCHEME], null, uri[goog.uri.utils.ComponentIndex.DOMAIN], uri[goog.uri.utils.ComponentIndex.PORT]);
            };
            goog.uri.utils.getPathAndAfter = function(uri) {
              uri = goog.uri.utils.split(uri);
              return goog.uri.utils.buildFromEncodedParts(null, null, null, null, uri[goog.uri.utils.ComponentIndex.PATH], uri[goog.uri.utils.ComponentIndex.QUERY_DATA], uri[goog.uri.utils.ComponentIndex.FRAGMENT]);
            };
            goog.uri.utils.removeFragment = function(uri) {
              var hashIndex = uri.indexOf("#");
              return 0 > hashIndex ? uri : uri.substr(0, hashIndex);
            };
            goog.uri.utils.haveSameDomain = function(uri1, uri2) {
              uri1 = goog.uri.utils.split(uri1);
              uri2 = goog.uri.utils.split(uri2);
              return uri1[goog.uri.utils.ComponentIndex.DOMAIN] == uri2[goog.uri.utils.ComponentIndex.DOMAIN] && uri1[goog.uri.utils.ComponentIndex.SCHEME] == uri2[goog.uri.utils.ComponentIndex.SCHEME] && uri1[goog.uri.utils.ComponentIndex.PORT] == uri2[goog.uri.utils.ComponentIndex.PORT];
            };
            goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
              goog.asserts.assert(0 > uri.indexOf("#") && 0 > uri.indexOf("?"), "goog.uri.utils: Fragment or query identifiers are not supported: [%s]", uri);
            };
            goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
              if (encodedQuery) {
                encodedQuery = encodedQuery.split("\x26");
                for (var i = 0; i < encodedQuery.length; i++) {
                  var indexOfEquals = encodedQuery[i].indexOf("\x3d"), value = null;
                  if (0 <= indexOfEquals) {
                    var name = encodedQuery[i].substring(0, indexOfEquals);
                    value = encodedQuery[i].substring(indexOfEquals + 1);
                  } else {
                    name = encodedQuery[i];
                  }
                  callback(name, value ? goog.string.urlDecode(value) : "");
                }
              }
            };
            goog.uri.utils.splitQueryData_ = function(uri) {
              var hashIndex = uri.indexOf("#");
              0 > hashIndex && (hashIndex = uri.length);
              var questionIndex = uri.indexOf("?");
              if (0 > questionIndex || questionIndex > hashIndex) {
                questionIndex = hashIndex;
                var queryData = "";
              } else {
                queryData = uri.substring(questionIndex + 1, hashIndex);
              }
              return [uri.substr(0, questionIndex), queryData, uri.substr(hashIndex)];
            };
            goog.uri.utils.joinQueryData_ = function(parts) {
              return parts[0] + (parts[1] ? "?" + parts[1] : "") + parts[2];
            };
            goog.uri.utils.appendQueryData_ = function(queryData, newData) {
              return newData ? queryData ? queryData + "\x26" + newData : newData : queryData;
            };
            goog.uri.utils.appendQueryDataToUri_ = function(uri, queryData) {
              if (!queryData) {
                return uri;
              }
              uri = goog.uri.utils.splitQueryData_(uri);
              uri[1] = goog.uri.utils.appendQueryData_(uri[1], queryData);
              return goog.uri.utils.joinQueryData_(uri);
            };
            goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
              goog.asserts.assertString(key);
              if (goog.isArray(value)) {
                goog.asserts.assertArray(value);
                for (var j = 0; j < value.length; j++) {
                  goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
                }
              } else {
                null != value && pairs.push(key + ("" === value ? "" : "\x3d" + goog.string.urlEncode(value)));
              }
            };
            goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
              goog.asserts.assert(0 == Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2, "goog.uri.utils: Key/value lists must be even in length.");
              var params = [];
              for (opt_startIndex = opt_startIndex || 0; opt_startIndex < keysAndValues.length; opt_startIndex += 2) {
                goog.uri.utils.appendKeyValuePairs_(keysAndValues[opt_startIndex], keysAndValues[opt_startIndex + 1], params);
              }
              return params.join("\x26");
            };
            goog.uri.utils.buildQueryDataFromMap = function(map) {
              var params = [], key;
              for (key in map) {
                goog.uri.utils.appendKeyValuePairs_(key, map[key], params);
              }
              return params.join("\x26");
            };
            goog.uri.utils.appendParams = function(uri, var_args) {
              var queryData = 2 == arguments.length ? goog.uri.utils.buildQueryData(arguments[1], 0) : goog.uri.utils.buildQueryData(arguments, 1);
              return goog.uri.utils.appendQueryDataToUri_(uri, queryData);
            };
            goog.uri.utils.appendParamsFromMap = function(uri, map) {
              map = goog.uri.utils.buildQueryDataFromMap(map);
              return goog.uri.utils.appendQueryDataToUri_(uri, map);
            };
            goog.uri.utils.appendParam = function(uri, key, opt_value) {
              opt_value = goog.isDefAndNotNull(opt_value) ? "\x3d" + goog.string.urlEncode(opt_value) : "";
              return goog.uri.utils.appendQueryDataToUri_(uri, key + opt_value);
            };
            goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
              for (var keyLength = keyEncoded.length; 0 <= (startIndex = uri.indexOf(keyEncoded, startIndex)) && startIndex < hashOrEndIndex;) {
                var precedingChar = uri.charCodeAt(startIndex - 1);
                if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
                  if (precedingChar = uri.charCodeAt(startIndex + keyLength), !precedingChar || precedingChar == goog.uri.utils.CharCode_.EQUAL || precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.HASH) {
                    return startIndex;
                  }
                }
                startIndex += keyLength + 1;
              }
              return -1;
            };
            goog.uri.utils.hashOrEndRe_ = /#|$/;
            goog.uri.utils.hasParam = function(uri, keyEncoded) {
              return 0 <= goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_));
            };
            goog.uri.utils.getParamValue = function(uri, keyEncoded) {
              var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
              if (0 > foundIndex) {
                return null;
              }
              var endPosition = uri.indexOf("\x26", foundIndex);
              if (0 > endPosition || endPosition > hashOrEndIndex) {
                endPosition = hashOrEndIndex;
              }
              foundIndex += keyEncoded.length + 1;
              return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
            };
            goog.uri.utils.getParamValues = function(uri, keyEncoded) {
              for (var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), position = 0, foundIndex, result = []; 0 <= (foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex));) {
                position = uri.indexOf("\x26", foundIndex);
                if (0 > position || position > hashOrEndIndex) {
                  position = hashOrEndIndex;
                }
                foundIndex += keyEncoded.length + 1;
                result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
              }
              return result;
            };
            goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
            goog.uri.utils.removeParam = function(uri, keyEncoded) {
              for (var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), position = 0, foundIndex, buffer = []; 0 <= (foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex));) {
                buffer.push(uri.substring(position, foundIndex)), position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
              }
              buffer.push(uri.substr(position));
              return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
            };
            goog.uri.utils.setParam = function(uri, keyEncoded, value) {
              return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
            };
            goog.uri.utils.setParamsFromMap = function(uri, params) {
              uri = goog.uri.utils.splitQueryData_(uri);
              var queryData = uri[1], buffer = [];
              queryData && goog.array.forEach(queryData.split("\x26"), function(pair) {
                var indexOfEquals = pair.indexOf("\x3d");
                indexOfEquals = 0 <= indexOfEquals ? pair.substr(0, indexOfEquals) : pair;
                params.hasOwnProperty(indexOfEquals) || buffer.push(pair);
              });
              uri[1] = goog.uri.utils.appendQueryData_(buffer.join("\x26"), goog.uri.utils.buildQueryDataFromMap(params));
              return goog.uri.utils.joinQueryData_(uri);
            };
            goog.uri.utils.appendPath = function(baseUri, path) {
              goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
              goog.string.endsWith(baseUri, "/") && (baseUri = baseUri.substr(0, baseUri.length - 1));
              goog.string.startsWith(path, "/") && (path = path.substr(1));
              return goog.string.buildString(baseUri, "/", path);
            };
            goog.uri.utils.setPath = function(uri, path) {
              goog.string.startsWith(path, "/") || (path = "/" + path);
              uri = goog.uri.utils.split(uri);
              return goog.uri.utils.buildFromEncodedParts(uri[goog.uri.utils.ComponentIndex.SCHEME], uri[goog.uri.utils.ComponentIndex.USER_INFO], uri[goog.uri.utils.ComponentIndex.DOMAIN], uri[goog.uri.utils.ComponentIndex.PORT], path, uri[goog.uri.utils.ComponentIndex.QUERY_DATA], uri[goog.uri.utils.ComponentIndex.FRAGMENT]);
            };
            goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
            goog.uri.utils.makeUnique = function(uri) {
              return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
            };
            goog.Uri = function(opt_uri, opt_ignoreCase) {
              this.domain_ = this.userInfo_ = this.scheme_ = "";
              this.port_ = null;
              this.fragment_ = this.path_ = "";
              this.ignoreCase_ = this.isReadOnly_ = !1;
              var m;
              opt_uri instanceof goog.Uri ? (this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase(), this.setScheme(opt_uri.getScheme()), this.setUserInfo(opt_uri.getUserInfo()), this.setDomain(opt_uri.getDomain()), this.setPort(opt_uri.getPort()), this.setPath(opt_uri.getPath()), this.setQueryData(opt_uri.getQueryData().clone()), this.setFragment(opt_uri.getFragment())) : opt_uri && (m = goog.uri.utils.split(String(opt_uri))) ? (this.ignoreCase_ = !!opt_ignoreCase, this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || 
              "", !0), this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", !0), this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", !0), this.setPort(m[goog.uri.utils.ComponentIndex.PORT]), this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", !0), this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", !0), this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", !0)) : (this.ignoreCase_ = !!opt_ignoreCase, this.queryData_ = new goog.Uri.QueryData(null, null, 
              this.ignoreCase_));
            };
            goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
            goog.Uri.prototype.toString = function() {
              var out = [], scheme = this.getScheme();
              scheme && out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, !0), ":");
              var domain = this.getDomain();
              if (domain || "file" == scheme) {
                out.push("//"), (scheme = this.getUserInfo()) && out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, !0), "@"), out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain))), domain = this.getPort(), null != domain && out.push(":", String(domain));
              }
              if (domain = this.getPath()) {
                this.hasDomain() && "/" != domain.charAt(0) && out.push("/"), out.push(goog.Uri.encodeSpecialChars_(domain, "/" == domain.charAt(0) ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, !0));
              }
              (domain = this.getEncodedQuery()) && out.push("?", domain);
              (domain = this.getFragment()) && out.push("#", goog.Uri.encodeSpecialChars_(domain, goog.Uri.reDisallowedInFragment_));
              return out.join("");
            };
            goog.Uri.prototype.resolve = function(relativeUri) {
              var absoluteUri = this.clone(), overridden = relativeUri.hasScheme();
              overridden ? absoluteUri.setScheme(relativeUri.getScheme()) : overridden = relativeUri.hasUserInfo();
              overridden ? absoluteUri.setUserInfo(relativeUri.getUserInfo()) : overridden = relativeUri.hasDomain();
              overridden ? absoluteUri.setDomain(relativeUri.getDomain()) : overridden = relativeUri.hasPort();
              var path = relativeUri.getPath();
              if (overridden) {
                absoluteUri.setPort(relativeUri.getPort());
              } else {
                if (overridden = relativeUri.hasPath()) {
                  if ("/" != path.charAt(0)) {
                    if (this.hasDomain() && !this.hasPath()) {
                      path = "/" + path;
                    } else {
                      var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
                      -1 != lastSlashIndex && (path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path);
                    }
                  }
                  path = goog.Uri.removeDotSegments(path);
                }
              }
              overridden ? absoluteUri.setPath(path) : overridden = relativeUri.hasQuery();
              overridden ? absoluteUri.setQueryData(relativeUri.getQueryData().clone()) : overridden = relativeUri.hasFragment();
              overridden && absoluteUri.setFragment(relativeUri.getFragment());
              return absoluteUri;
            };
            goog.Uri.prototype.clone = function() {
              return new goog.Uri(this);
            };
            goog.Uri.prototype.getScheme = function() {
              return this.scheme_;
            };
            goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
              this.enforceReadOnly();
              if (this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, !0) : newScheme) {
                this.scheme_ = this.scheme_.replace(/:$/, "");
              }
              return this;
            };
            goog.Uri.prototype.hasScheme = function() {
              return !!this.scheme_;
            };
            goog.Uri.prototype.getUserInfo = function() {
              return this.userInfo_;
            };
            goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
              this.enforceReadOnly();
              this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
              return this;
            };
            goog.Uri.prototype.hasUserInfo = function() {
              return !!this.userInfo_;
            };
            goog.Uri.prototype.getDomain = function() {
              return this.domain_;
            };
            goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
              this.enforceReadOnly();
              this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, !0) : newDomain;
              return this;
            };
            goog.Uri.prototype.hasDomain = function() {
              return !!this.domain_;
            };
            goog.Uri.prototype.getPort = function() {
              return this.port_;
            };
            goog.Uri.prototype.setPort = function(newPort) {
              this.enforceReadOnly();
              if (newPort) {
                newPort = Number(newPort);
                if (isNaN(newPort) || 0 > newPort) {
                  throw Error("Bad port number " + newPort);
                }
                this.port_ = newPort;
              } else {
                this.port_ = null;
              }
              return this;
            };
            goog.Uri.prototype.hasPort = function() {
              return null != this.port_;
            };
            goog.Uri.prototype.getPath = function() {
              return this.path_;
            };
            goog.Uri.prototype.setPath = function(newPath, opt_decode) {
              this.enforceReadOnly();
              this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, !0) : newPath;
              return this;
            };
            goog.Uri.prototype.hasPath = function() {
              return !!this.path_;
            };
            goog.Uri.prototype.hasQuery = function() {
              return "" !== this.queryData_.toString();
            };
            goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
              this.enforceReadOnly();
              queryData instanceof goog.Uri.QueryData ? (this.queryData_ = queryData, this.queryData_.setIgnoreCase(this.ignoreCase_)) : (opt_decode || (queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_)), this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_));
              return this;
            };
            goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
              return this.setQueryData(newQuery, opt_decode);
            };
            goog.Uri.prototype.getEncodedQuery = function() {
              return this.queryData_.toString();
            };
            goog.Uri.prototype.getDecodedQuery = function() {
              return this.queryData_.toDecodedString();
            };
            goog.Uri.prototype.getQueryData = function() {
              return this.queryData_;
            };
            goog.Uri.prototype.getQuery = function() {
              return this.getEncodedQuery();
            };
            goog.Uri.prototype.setParameterValue = function(key, value) {
              this.enforceReadOnly();
              this.queryData_.set(key, value);
              return this;
            };
            goog.Uri.prototype.setParameterValues = function(key, values) {
              this.enforceReadOnly();
              goog.isArray(values) || (values = [String(values)]);
              this.queryData_.setValues(key, values);
              return this;
            };
            goog.Uri.prototype.getParameterValues = function(name) {
              return this.queryData_.getValues(name);
            };
            goog.Uri.prototype.getParameterValue = function(paramName) {
              return this.queryData_.get(paramName);
            };
            goog.Uri.prototype.getFragment = function() {
              return this.fragment_;
            };
            goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
              this.enforceReadOnly();
              this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
              return this;
            };
            goog.Uri.prototype.hasFragment = function() {
              return !!this.fragment_;
            };
            goog.Uri.prototype.hasSameDomainAs = function(uri2) {
              return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
            };
            goog.Uri.prototype.makeUnique = function() {
              this.enforceReadOnly();
              this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
              return this;
            };
            goog.Uri.prototype.removeParameter = function(key) {
              this.enforceReadOnly();
              this.queryData_.remove(key);
              return this;
            };
            goog.Uri.prototype.setReadOnly = function(isReadOnly) {
              this.isReadOnly_ = isReadOnly;
              return this;
            };
            goog.Uri.prototype.isReadOnly = function() {
              return this.isReadOnly_;
            };
            goog.Uri.prototype.enforceReadOnly = function() {
              if (this.isReadOnly_) {
                throw Error("Tried to modify a read-only Uri");
              }
            };
            goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
              this.ignoreCase_ = ignoreCase;
              this.queryData_ && this.queryData_.setIgnoreCase(ignoreCase);
              return this;
            };
            goog.Uri.prototype.getIgnoreCase = function() {
              return this.ignoreCase_;
            };
            goog.Uri.parse = function(uri, opt_ignoreCase) {
              return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
            };
            goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
              opt_ignoreCase = new goog.Uri(null, opt_ignoreCase);
              opt_scheme && opt_ignoreCase.setScheme(opt_scheme);
              opt_userInfo && opt_ignoreCase.setUserInfo(opt_userInfo);
              opt_domain && opt_ignoreCase.setDomain(opt_domain);
              opt_port && opt_ignoreCase.setPort(opt_port);
              opt_path && opt_ignoreCase.setPath(opt_path);
              opt_query && opt_ignoreCase.setQueryData(opt_query);
              opt_fragment && opt_ignoreCase.setFragment(opt_fragment);
              return opt_ignoreCase;
            };
            goog.Uri.resolve = function(base, rel) {
              base instanceof goog.Uri || (base = goog.Uri.parse(base));
              rel instanceof goog.Uri || (rel = goog.Uri.parse(rel));
              return base.resolve(rel);
            };
            goog.Uri.removeDotSegments = function(path) {
              if (".." == path || "." == path) {
                return "";
              }
              if (goog.string.contains(path, "./") || goog.string.contains(path, "/.")) {
                var leadingSlash = goog.string.startsWith(path, "/");
                path = path.split("/");
                for (var out = [], pos = 0; pos < path.length;) {
                  var segment = path[pos++];
                  "." == segment ? leadingSlash && pos == path.length && out.push("") : ".." == segment ? ((1 < out.length || 1 == out.length && "" != out[0]) && out.pop(), leadingSlash && pos == path.length && out.push("")) : (out.push(segment), leadingSlash = !0);
                }
                return out.join("/");
              }
              return path;
            };
            goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
              return val ? opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val) : "";
            };
            goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
              return goog.isString(unescapedPart) ? (unescapedPart = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_), opt_removeDoubleEncoding && (unescapedPart = goog.Uri.removeDoubleEncoding_(unescapedPart)), unescapedPart) : null;
            };
            goog.Uri.encodeChar_ = function(ch) {
              ch = ch.charCodeAt(0);
              return "%" + (ch >> 4 & 15).toString(16) + (ch & 15).toString(16);
            };
            goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
              return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
            };
            goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
            goog.Uri.reDisallowedInRelativePath_ = /[#\?:]/g;
            goog.Uri.reDisallowedInAbsolutePath_ = /[#\?]/g;
            goog.Uri.reDisallowedInQuery_ = /[#\?@]/g;
            goog.Uri.reDisallowedInFragment_ = /#/g;
            goog.Uri.haveSameDomain = function(uri1String, uri2String) {
              uri1String = goog.uri.utils.split(uri1String);
              uri2String = goog.uri.utils.split(uri2String);
              return uri1String[goog.uri.utils.ComponentIndex.DOMAIN] == uri2String[goog.uri.utils.ComponentIndex.DOMAIN] && uri1String[goog.uri.utils.ComponentIndex.PORT] == uri2String[goog.uri.utils.ComponentIndex.PORT];
            };
            goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
              this.count_ = this.keyMap_ = null;
              this.encodedQuery_ = opt_query || null;
              this.ignoreCase_ = !!opt_ignoreCase;
            };
            goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
              if (!this.keyMap_ && (this.keyMap_ = new goog.structs.Map, this.count_ = 0, this.encodedQuery_)) {
                var self = this;
                goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
                  self.add(goog.string.urlDecode(name), value);
                });
              }
            };
            goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
              opt_uri = goog.structs.getKeys(map);
              if ("undefined" == typeof opt_uri) {
                throw Error("Keys are undefined");
              }
              opt_ignoreCase = new goog.Uri.QueryData(null, null, opt_ignoreCase);
              map = goog.structs.getValues(map);
              for (var i = 0; i < opt_uri.length; i++) {
                var key = opt_uri[i], value = map[i];
                goog.isArray(value) ? opt_ignoreCase.setValues(key, value) : opt_ignoreCase.add(key, value);
              }
              return opt_ignoreCase;
            };
            goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
              if (keys.length != values.length) {
                throw Error("Mismatched lengths for keys/values");
              }
              opt_uri = new goog.Uri.QueryData(null, null, opt_ignoreCase);
              for (opt_ignoreCase = 0; opt_ignoreCase < keys.length; opt_ignoreCase++) {
                opt_uri.add(keys[opt_ignoreCase], values[opt_ignoreCase]);
              }
              return opt_uri;
            };
            goog.Uri.QueryData.prototype.getCount = function() {
              this.ensureKeyMapInitialized_();
              return this.count_;
            };
            goog.Uri.QueryData.prototype.add = function(key, value) {
              this.ensureKeyMapInitialized_();
              this.invalidateCache_();
              key = this.getKeyName_(key);
              var values = this.keyMap_.get(key);
              values || this.keyMap_.set(key, values = []);
              values.push(value);
              this.count_ = goog.asserts.assertNumber(this.count_) + 1;
              return this;
            };
            goog.Uri.QueryData.prototype.remove = function(key) {
              this.ensureKeyMapInitialized_();
              key = this.getKeyName_(key);
              return this.keyMap_.containsKey(key) ? (this.invalidateCache_(), this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length, this.keyMap_.remove(key)) : !1;
            };
            goog.Uri.QueryData.prototype.clear = function() {
              this.invalidateCache_();
              this.keyMap_ = null;
              this.count_ = 0;
            };
            goog.Uri.QueryData.prototype.isEmpty = function() {
              this.ensureKeyMapInitialized_();
              return 0 == this.count_;
            };
            goog.Uri.QueryData.prototype.containsKey = function(key) {
              this.ensureKeyMapInitialized_();
              key = this.getKeyName_(key);
              return this.keyMap_.containsKey(key);
            };
            goog.Uri.QueryData.prototype.containsValue = function(value) {
              var vals = this.getValues();
              return goog.array.contains(vals, value);
            };
            goog.Uri.QueryData.prototype.forEach = function(f, opt_scope) {
              this.ensureKeyMapInitialized_();
              this.keyMap_.forEach(function(values, key) {
                goog.array.forEach(values, function(value) {
                  f.call(opt_scope, value, key, this);
                }, this);
              }, this);
            };
            goog.Uri.QueryData.prototype.getKeys = function() {
              this.ensureKeyMapInitialized_();
              for (var vals = this.keyMap_.getValues(), keys = this.keyMap_.getKeys(), rv = [], i = 0; i < keys.length; i++) {
                for (var val = vals[i], j = 0; j < val.length; j++) {
                  rv.push(keys[i]);
                }
              }
              return rv;
            };
            goog.Uri.QueryData.prototype.getValues = function(opt_key) {
              this.ensureKeyMapInitialized_();
              var rv = [];
              if (goog.isString(opt_key)) {
                this.containsKey(opt_key) && (rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key))));
              } else {
                opt_key = this.keyMap_.getValues();
                for (var i = 0; i < opt_key.length; i++) {
                  rv = goog.array.concat(rv, opt_key[i]);
                }
              }
              return rv;
            };
            goog.Uri.QueryData.prototype.set = function(key, value) {
              this.ensureKeyMapInitialized_();
              this.invalidateCache_();
              key = this.getKeyName_(key);
              this.containsKey(key) && (this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length);
              this.keyMap_.set(key, [value]);
              this.count_ = goog.asserts.assertNumber(this.count_) + 1;
              return this;
            };
            goog.Uri.QueryData.prototype.get = function(key, opt_default) {
              if (!key) {
                return opt_default;
              }
              key = this.getValues(key);
              return 0 < key.length ? String(key[0]) : opt_default;
            };
            goog.Uri.QueryData.prototype.setValues = function(key, values) {
              this.remove(key);
              0 < values.length && (this.invalidateCache_(), this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values)), this.count_ = goog.asserts.assertNumber(this.count_) + values.length);
            };
            goog.Uri.QueryData.prototype.toString = function() {
              if (this.encodedQuery_) {
                return this.encodedQuery_;
              }
              if (!this.keyMap_) {
                return "";
              }
              for (var sb = [], keys = this.keyMap_.getKeys(), i = 0; i < keys.length; i++) {
                var key = keys[i], encodedKey = goog.string.urlEncode(key);
                key = this.getValues(key);
                for (var j = 0; j < key.length; j++) {
                  var param = encodedKey;
                  "" !== key[j] && (param += "\x3d" + goog.string.urlEncode(key[j]));
                  sb.push(param);
                }
              }
              return this.encodedQuery_ = sb.join("\x26");
            };
            goog.Uri.QueryData.prototype.toDecodedString = function() {
              return goog.Uri.decodeOrEmpty_(this.toString());
            };
            goog.Uri.QueryData.prototype.invalidateCache_ = function() {
              this.encodedQuery_ = null;
            };
            goog.Uri.QueryData.prototype.filterKeys = function(keys) {
              this.ensureKeyMapInitialized_();
              this.keyMap_.forEach(function(value, key) {
                goog.array.contains(keys, key) || this.remove(key);
              }, this);
              return this;
            };
            goog.Uri.QueryData.prototype.clone = function() {
              var rv = new goog.Uri.QueryData;
              rv.encodedQuery_ = this.encodedQuery_;
              this.keyMap_ && (rv.keyMap_ = this.keyMap_.clone(), rv.count_ = this.count_);
              return rv;
            };
            goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
              arg = String(arg);
              this.ignoreCase_ && (arg = arg.toLowerCase());
              return arg;
            };
            goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
              ignoreCase && !this.ignoreCase_ && (this.ensureKeyMapInitialized_(), this.invalidateCache_(), this.keyMap_.forEach(function(value, key) {
                var lowerCase = key.toLowerCase();
                key != lowerCase && (this.remove(key), this.setValues(lowerCase, value));
              }, this));
              this.ignoreCase_ = ignoreCase;
            };
            goog.Uri.QueryData.prototype.extend = function(var_args) {
              for (var i = 0; i < arguments.length; i++) {
                goog.structs.forEach(arguments[i], function(value, key) {
                  this.add(key, value);
                }, this);
              }
            };
            goog.string.StringBuffer = function(opt_a1, var_args) {
              null != opt_a1 && this.append.apply(this, arguments);
            };
            goog.string.StringBuffer.prototype.buffer_ = "";
            goog.string.StringBuffer.prototype.set = function(s) {
              this.buffer_ = "" + s;
            };
            goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
              this.buffer_ += String(a1);
              if (null != opt_a2) {
                for (var i = 1; i < arguments.length; i++) {
                  this.buffer_ += arguments[i];
                }
              }
              return this;
            };
            goog.string.StringBuffer.prototype.clear = function() {
              this.buffer_ = "";
            };
            goog.string.StringBuffer.prototype.getLength = function() {
              return this.buffer_.length;
            };
            goog.string.StringBuffer.prototype.toString = function() {
              return this.buffer_;
            };
            var cljs = {core:{}};
            cljs.core._STAR_clojurescript_version_STAR_ = "1.10.520";
            cljs.core._STAR_unchecked_if_STAR_ = !1;
            cljs.core._STAR_unchecked_arrays_STAR_ = !1;
            cljs.core._STAR_warn_on_infer_STAR_ = !1;
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core.PROTOCOL_SENTINEL) {
              cljs.core.PROTOCOL_SENTINEL = {};
            }
            cljs.core.MODULE_URIS = null;
            cljs.core.MODULE_INFOS = null;
            cljs.core._STAR_target_STAR_ = "nodejs";
            cljs.core._STAR_ns_STAR_ = null;
            cljs.core._STAR_out_STAR_ = null;
            cljs.core._STAR_assert_STAR_ = !0;
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core._STAR_print_fn_STAR_) {
              cljs.core._STAR_print_fn_STAR_ = null;
            }
            cljs.core._STAR_exec_tap_fn_STAR_ = function(f) {
              var and__4120__auto__ = "undefined" !== typeof setTimeout;
              return and__4120__auto__ ? (f = setTimeout(f, 0), cljs.core.truth_(f) ? !0 : f) : and__4120__auto__;
            };
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core._STAR_print_err_fn_STAR_) {
              cljs.core._STAR_print_err_fn_STAR_ = null;
            }
            cljs.core.set_print_fn_BANG_ = function(f) {
              return cljs.core._STAR_print_fn_STAR_ = f;
            };
            cljs.core.set_print_err_fn_BANG_ = function(f) {
              return cljs.core._STAR_print_err_fn_STAR_ = f;
            };
            cljs.core._STAR_flush_on_newline_STAR_ = !0;
            cljs.core._STAR_print_newline_STAR_ = !0;
            cljs.core._STAR_print_readably_STAR_ = !0;
            cljs.core._STAR_print_meta_STAR_ = !1;
            cljs.core._STAR_print_dup_STAR_ = !1;
            cljs.core._STAR_print_namespace_maps_STAR_ = !1;
            cljs.core._STAR_print_length_STAR_ = null;
            cljs.core._STAR_print_level_STAR_ = null;
            cljs.core._STAR_print_fn_bodies_STAR_ = !1;
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core._STAR_loaded_libs_STAR_) {
              cljs.core._STAR_loaded_libs_STAR_ = null;
            }
            cljs.core.pr_opts = function() {
              return new cljs.core.PersistentArrayMap(null, 5, [cljs$cst$keyword$flush_DASH_on_DASH_newline, cljs.core._STAR_flush_on_newline_STAR_, cljs$cst$keyword$readably, cljs.core._STAR_print_readably_STAR_, cljs$cst$keyword$meta, cljs.core._STAR_print_meta_STAR_, cljs$cst$keyword$dup, cljs.core._STAR_print_dup_STAR_, cljs$cst$keyword$print_DASH_length, cljs.core._STAR_print_length_STAR_], null);
            };
            cljs.core.enable_console_print_BANG_ = function() {
              cljs.core._STAR_print_newline_STAR_ = !1;
              cljs.core.set_print_fn_BANG_(function() {
                return console.log.apply(console, goog.array.clone(arguments));
              });
              cljs.core.set_print_err_fn_BANG_(function() {
                return console.error.apply(console, goog.array.clone(arguments));
              });
              return null;
            };
            cljs.core.truth_ = function(x) {
              return null != x && !1 !== x;
            };
            cljs.core.not_native = null;
            cljs.core.identical_QMARK_ = function(x, y) {
              return x === y;
            };
            cljs.core.nil_QMARK_ = function(x) {
              return null == x;
            };
            cljs.core.array_QMARK_ = function(x) {
              return "nodejs" === cljs.core._STAR_target_STAR_ ? Array.isArray(x) : x instanceof Array;
            };
            cljs.core.number_QMARK_ = function(x) {
              return "number" === typeof x;
            };
            cljs.core.not = function(x) {
              return null == x ? !0 : !1 === x ? !0 : !1;
            };
            cljs.core.some_QMARK_ = function(x) {
              return null != x;
            };
            cljs.core.object_QMARK_ = function(x) {
              return null != x ? x.constructor === Object : !1;
            };
            cljs.core.string_QMARK_ = function(x) {
              return goog.isString(x);
            };
            cljs.core.char_QMARK_ = function(x) {
              return "string" === typeof x && 1 === x.length;
            };
            cljs.core.any_QMARK_ = function(x) {
              return !0;
            };
            cljs.core.native_satisfies_QMARK_ = function(p, x) {
              return p[goog.typeOf(null == x ? null : x)] ? !0 : p._ ? !0 : !1;
            };
            cljs.core.is_proto_ = function(x) {
              return x.constructor.prototype === x;
            };
            cljs.core._STAR_main_cli_fn_STAR_ = null;
            cljs.core._STAR_command_line_args_STAR_ = null;
            cljs.core.type = function(x) {
              return null == x ? null : x.constructor;
            };
            cljs.core.missing_protocol = function(proto, obj) {
              var ty = cljs.core.type(obj);
              ty = cljs.core.truth_(cljs.core.truth_(ty) ? ty.cljs$lang$type : ty) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
              return Error(["No protocol method ", proto, " defined for type ", ty, ": ", obj].join(""));
            };
            cljs.core.type__GT_str = function(ty) {
              var temp__5733__auto__ = ty.cljs$lang$ctorStr;
              return cljs.core.truth_(temp__5733__auto__) ? temp__5733__auto__ : cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
            };
            cljs.core.load_file = function(file) {
              return cljs.core.truth_(COMPILED) ? null : goog.nodeGlobalRequire(file);
            };
            "undefined" !== typeof Symbol && "function" === goog.typeOf(Symbol) ? cljs.core.ITER_SYMBOL = Symbol.iterator : cljs.core.ITER_SYMBOL = "@@iterator";
            cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
            cljs.core.DEMUNGE_MAP = {_RBRACE_:"}", _COLON_:":", _BANG_:"!", _QMARK_:"?", _BSLASH_:"\\\\", _SLASH_:"/", _PERCENT_:"%", _PLUS_:"+", _SHARP_:"#", _LBRACE_:"{", _BAR_:"|", _LBRACK_:"[", _EQ_:"\x3d", _:"-", _TILDE_:"~", _RBRACK_:"]", _GT_:"\x3e", _SINGLEQUOTE_:"'", _CIRCA_:"@", _AMPERSAND_:"\x26", _DOUBLEQUOTE_:'\\"', _CARET_:"^", _LT_:"\x3c", _STAR_:"*"};
            cljs.core.DEMUNGE_PATTERN = null;
            cljs.core.system_time = function() {
              if ("undefined" !== typeof performance && null != performance.now) {
                return performance.now();
              }
              if ("undefined" !== typeof process && null != process.hrtime) {
                var t = process.hrtime();
                return (1.0E9 * t[0] + t[1]) / 1000000.0;
              }
              return (new Date).getTime();
            };
            cljs.core.make_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7467 = arguments.length, i__4731__auto___7468 = 0;;) {
                    if (i__4731__auto___7468 < len__4730__auto___7467) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7468]), i__4731__auto___7468 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
              return Array(size);
            };
            cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
              return Array(size);
            };
            cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
              type = Array(size);
              size = type.length;
              for (var i_7473 = 0;;) {
                if (i_7473 < size) {
                  type[i_7473] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, more_sizes) : cljs.core.apply.call(null, cljs.core.make_array, null, more_sizes), i_7473 += 1;
                } else {
                  break;
                }
              }
              return type;
            };
            cljs.core.make_array.cljs$lang$applyTo = function(seq5793) {
              var G__5794 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5793) : cljs.core.first.call(null, seq5793), seq5793__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5793) : cljs.core.next.call(null, seq5793);
              seq5793 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5793__$1) : cljs.core.first.call(null, seq5793__$1);
              seq5793__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5793__$1) : cljs.core.next.call(null, seq5793__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5794, seq5793, seq5793__$1);
            };
            cljs.core.make_array.cljs$lang$maxFixedArity = 2;
            cljs.core.aclone = function(arr) {
              for (var len = arr.length, new_arr = Array(len), i_7478 = 0;;) {
                if (i_7478 < len) {
                  new_arr[i_7478] = arr[i_7478], i_7478 += 1;
                } else {
                  break;
                }
              }
              return new_arr;
            };
            cljs.core.array = function(var_args) {
              for (var a = Array(arguments.length), i = 0;;) {
                if (i < a.length) {
                  a[i] = arguments[i], i += 1;
                } else {
                  return a;
                }
              }
            };
            cljs.core.maybe_warn = function(e) {
              return cljs.core.truth_(cljs.core._STAR_print_err_fn_STAR_) ? cljs.core._STAR_print_err_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_err_fn_STAR_.cljs$core$IFn$_invoke$arity$1(e) : cljs.core._STAR_print_err_fn_STAR_.call(null, e) : null;
            };
            cljs.core.checked_aget = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7482 = arguments.length, i__4731__auto___7483 = 0;;) {
                    if (i__4731__auto___7483 < len__4730__auto___7482) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7483]), i__4731__auto___7483 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
              return array[idx];
            };
            cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
              var G__5802 = cljs.core.checked_aget;
              array = cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(array, idx);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__5802, array, idxs) : cljs.core.apply.call(null, G__5802, array, idxs);
            };
            cljs.core.checked_aget.cljs$lang$applyTo = function(seq5798) {
              var G__5799 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5798) : cljs.core.first.call(null, seq5798), seq5798__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5798) : cljs.core.next.call(null, seq5798);
              seq5798 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5798__$1) : cljs.core.first.call(null, seq5798__$1);
              seq5798__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5798__$1) : cljs.core.next.call(null, seq5798__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5799, seq5798, seq5798__$1);
            };
            cljs.core.checked_aget.cljs$lang$maxFixedArity = 2;
            cljs.core.checked_aset = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7489 = arguments.length, i__4731__auto___7490 = 0;;) {
                    if (i__4731__auto___7490 < len__4730__auto___7489) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7490]), i__4731__auto___7490 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
              return array[idx] = val;
            };
            cljs.core.checked_aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
              var G__5811 = cljs.core.checked_aset;
              array = cljs.core.checked_aget.cljs$core$IFn$_invoke$arity$2(array, idx);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__5811, array, idx2, idxv) : cljs.core.apply.call(null, G__5811, array, idx2, idxv);
            };
            cljs.core.checked_aset.cljs$lang$applyTo = function(seq5806) {
              var G__5807 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5806) : cljs.core.first.call(null, seq5806), seq5806__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5806) : cljs.core.next.call(null, seq5806);
              seq5806 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5806__$1) : cljs.core.first.call(null, seq5806__$1);
              var seq5806__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5806__$1) : cljs.core.next.call(null, seq5806__$1);
              seq5806__$1 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5806__$2) : cljs.core.first.call(null, seq5806__$2);
              seq5806__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5806__$2) : cljs.core.next.call(null, seq5806__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5807, seq5806, seq5806__$1, seq5806__$2);
            };
            cljs.core.checked_aset.cljs$lang$maxFixedArity = 3;
            cljs.core.checked_aget_SINGLEQUOTE_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7512 = arguments.length, i__4731__auto___7513 = 0;;) {
                    if (i__4731__auto___7513 < len__4730__auto___7512) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7513]), i__4731__auto___7513 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
              return array[idx];
            };
            cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
              var G__5820 = cljs.core.checked_aget_SINGLEQUOTE_;
              array = cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(array, idx);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__5820, array, idxs) : cljs.core.apply.call(null, G__5820, array, idxs);
            };
            cljs.core.checked_aget_SINGLEQUOTE_.cljs$lang$applyTo = function(seq5816) {
              var G__5817 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5816) : cljs.core.first.call(null, seq5816), seq5816__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5816) : cljs.core.next.call(null, seq5816);
              seq5816 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5816__$1) : cljs.core.first.call(null, seq5816__$1);
              seq5816__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5816__$1) : cljs.core.next.call(null, seq5816__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5817, seq5816, seq5816__$1);
            };
            cljs.core.checked_aget_SINGLEQUOTE_.cljs$lang$maxFixedArity = 2;
            cljs.core.checked_aset_SINGLEQUOTE_ = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7525 = arguments.length, i__4731__auto___7526 = 0;;) {
                    if (i__4731__auto___7526 < len__4730__auto___7525) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7526]), i__4731__auto___7526 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
              return array[idx] = val;
            };
            cljs.core.checked_aset_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
              var G__5829 = cljs.core.checked_aset_SINGLEQUOTE_;
              array = cljs.core.checked_aget_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2(array, idx);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__5829, array, idx2, idxv) : cljs.core.apply.call(null, G__5829, array, idx2, idxv);
            };
            cljs.core.checked_aset_SINGLEQUOTE_.cljs$lang$applyTo = function(seq5824) {
              var G__5825 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5824) : cljs.core.first.call(null, seq5824), seq5824__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5824) : cljs.core.next.call(null, seq5824);
              seq5824 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5824__$1) : cljs.core.first.call(null, seq5824__$1);
              var seq5824__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5824__$1) : cljs.core.next.call(null, seq5824__$1);
              seq5824__$1 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5824__$2) : cljs.core.first.call(null, seq5824__$2);
              seq5824__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5824__$2) : cljs.core.next.call(null, seq5824__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5825, seq5824, seq5824__$1, seq5824__$2);
            };
            cljs.core.checked_aset_SINGLEQUOTE_.cljs$lang$maxFixedArity = 3;
            cljs.core.aget = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7535 = arguments.length, i__4731__auto___7536 = 0;;) {
                    if (i__4731__auto___7536 < len__4730__auto___7535) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7536]), i__4731__auto___7536 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, idx) {
              return array[idx];
            };
            cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idxs) {
              var G__5838 = cljs.core.aget;
              array = array[idx];
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__5838, array, idxs) : cljs.core.apply.call(null, G__5838, array, idxs);
            };
            cljs.core.aget.cljs$lang$applyTo = function(seq5834) {
              var G__5835 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5834) : cljs.core.first.call(null, seq5834), seq5834__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5834) : cljs.core.next.call(null, seq5834);
              seq5834 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5834__$1) : cljs.core.first.call(null, seq5834__$1);
              seq5834__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5834__$1) : cljs.core.next.call(null, seq5834__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5835, seq5834, seq5834__$1);
            };
            cljs.core.aget.cljs$lang$maxFixedArity = 2;
            cljs.core.aset = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7539 = arguments.length, i__4731__auto___7540 = 0;;) {
                    if (i__4731__auto___7540 < len__4730__auto___7539) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7540]), i__4731__auto___7540 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, idx, val) {
              return array[idx] = val;
            };
            cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
              var G__5847 = cljs.core.aset;
              array = array[idx];
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__5847, array, idx2, idxv) : cljs.core.apply.call(null, G__5847, array, idx2, idxv);
            };
            cljs.core.aset.cljs$lang$applyTo = function(seq5842) {
              var G__5843 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5842) : cljs.core.first.call(null, seq5842), seq5842__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5842) : cljs.core.next.call(null, seq5842);
              seq5842 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5842__$1) : cljs.core.first.call(null, seq5842__$1);
              var seq5842__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5842__$1) : cljs.core.next.call(null, seq5842__$1);
              seq5842__$1 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5842__$2) : cljs.core.first.call(null, seq5842__$2);
              seq5842__$2 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5842__$2) : cljs.core.next.call(null, seq5842__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5843, seq5842, seq5842__$1, seq5842__$2);
            };
            cljs.core.aset.cljs$lang$maxFixedArity = 3;
            cljs.core.alength = function(array) {
              return array.length;
            };
            cljs.core.into_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
              return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
            };
            cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
              type = function(a, x) {
                a.push(x);
                return a;
              };
              var G__5854 = [];
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(type, G__5854, aseq) : cljs.core.reduce.call(null, type, G__5854, aseq);
            };
            cljs.core.into_array.cljs$lang$maxFixedArity = 2;
            cljs.core.js_invoke = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___7543 = arguments.length, i__4731__auto___7544 = 0;;) {
                if (i__4731__auto___7544 < len__4730__auto___7543) {
                  args__4736__auto__.push(arguments[i__4731__auto___7544]), i__4731__auto___7544 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 2 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(2), 0, null) : null;
              return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args__4736__auto__);
            };
            cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
              return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
            };
            cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
            cljs.core.js_invoke.cljs$lang$applyTo = function(seq5856) {
              var G__5857 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5856) : cljs.core.first.call(null, seq5856), seq5856__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5856) : cljs.core.next.call(null, seq5856);
              seq5856 = cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq5856__$1) : cljs.core.first.call(null, seq5856__$1);
              seq5856__$1 = cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq5856__$1) : cljs.core.next.call(null, seq5856__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5857, seq5856, seq5856__$1);
            };
            cljs.core.Fn = function() {
            };
            cljs.core.IFn = function() {
            };
            cljs.core._invoke = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                case 6:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                case 7:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
                case 8:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
                case 9:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                case 10:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
                case 11:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
                case 12:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
                case 13:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
                case 14:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
                case 15:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
                case 16:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                case 17:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
                case 18:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
                case 19:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
                case 20:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
                case 21:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
                case 22:
                  return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$1) {
                return this$.cljs$core$IFn$_invoke$arity$1(this$);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null, this$);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4434__auto__.call(null, this$);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$2) {
                return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4434__auto__.call(null, this$, a);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__4434__auto__.call(null, this$, a);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$3) {
                return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4434__auto__.call(null, this$, a, b);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__4434__auto__.call(null, this$, a, b);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$4) {
                return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4434__auto__.call(null, this$, a, b, c);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__4434__auto__.call(null, this$, a, b, c);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$5) {
                return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4434__auto__.call(null, this$, a, b, c, d);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__4434__auto__.call(null, this$, a, b, c, d);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$6) {
                return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$6 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4434__auto__.call(null, this$, a, b, c, d, e);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$6 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__4434__auto__.call(null, this$, a, b, c, d, e);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$7) {
                return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$7 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4434__auto__.call(null, this$, a, b, c, d, e, f);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$7 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__4434__auto__.call(null, this$, a, b, c, d, e, f);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$8) {
                return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$8 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$8 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$9) {
                return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$9 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$9 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$10) {
                return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$10 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$10 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$11) {
                return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$11 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$11 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$12) {
                return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$12 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$12 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$13) {
                return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$13 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$13 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$14) {
                return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$14 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$14 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$15) {
                return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$15 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$15 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$16) {
                return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$16 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$16 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$17) {
                return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$17 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$17 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$18) {
                return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$18 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$18 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$19) {
                return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$19 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$19 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$20) {
                return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$20 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$20 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$21) {
                return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$21 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$21 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
              if (null != this$ && null != this$.cljs$core$IFn$_invoke$arity$22) {
                return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
              }
              var m__4434__auto__ = cljs.core._invoke[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$22 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
              }
              m__4434__auto__ = cljs.core._invoke._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$22 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__4434__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
              }
              throw cljs.core.missing_protocol("IFn.-invoke", this$);
            };
            cljs.core._invoke.cljs$lang$maxFixedArity = 22;
            cljs.core.ICloneable = function() {
            };
            cljs.core._clone = function(value) {
              if (null != value && null != value.cljs$core$ICloneable$_clone$arity$1) {
                return value.cljs$core$ICloneable$_clone$arity$1(value);
              }
              var m__4434__auto__ = cljs.core._clone[goog.typeOf(null == value ? null : value)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__4434__auto__.call(null, value);
              }
              m__4434__auto__ = cljs.core._clone._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__4434__auto__.call(null, value);
              }
              throw cljs.core.missing_protocol("ICloneable.-clone", value);
            };
            cljs.core.ICounted = function() {
            };
            cljs.core._count = function(coll) {
              if (null != coll && null != coll.cljs$core$ICounted$_count$arity$1) {
                return coll.cljs$core$ICounted$_count$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._count[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._count._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("ICounted.-count", coll);
            };
            cljs.core.IEmptyableCollection = function() {
            };
            cljs.core._empty = function(coll) {
              if (null != coll && null != coll.cljs$core$IEmptyableCollection$_empty$arity$1) {
                return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._empty[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._empty._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
            };
            cljs.core.ICollection = function() {
            };
            cljs.core._conj = function(coll, o) {
              if (null != coll && null != coll.cljs$core$ICollection$_conj$arity$2) {
                return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
              }
              var m__4434__auto__ = cljs.core._conj[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4434__auto__.call(null, coll, o);
              }
              m__4434__auto__ = cljs.core._conj._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__4434__auto__.call(null, coll, o);
              }
              throw cljs.core.missing_protocol("ICollection.-conj", coll);
            };
            cljs.core.IIndexed = function() {
            };
            cljs.core._nth = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
              if (null != coll && null != coll.cljs$core$IIndexed$_nth$arity$2) {
                return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
              }
              var m__4434__auto__ = cljs.core._nth[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4434__auto__.call(null, coll, n);
              }
              m__4434__auto__ = cljs.core._nth._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__4434__auto__.call(null, coll, n);
              }
              throw cljs.core.missing_protocol("IIndexed.-nth", coll);
            };
            cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
              if (null != coll && null != coll.cljs$core$IIndexed$_nth$arity$3) {
                return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
              }
              var m__4434__auto__ = cljs.core._nth[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4434__auto__.call(null, coll, n, not_found);
              }
              m__4434__auto__ = cljs.core._nth._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__4434__auto__.call(null, coll, n, not_found);
              }
              throw cljs.core.missing_protocol("IIndexed.-nth", coll);
            };
            cljs.core._nth.cljs$lang$maxFixedArity = 3;
            cljs.core.ASeq = function() {
            };
            cljs.core.ISeq = function() {
            };
            cljs.core._first = function(coll) {
              if (null != coll && null != coll.cljs$core$ISeq$_first$arity$1) {
                return coll.cljs$core$ISeq$_first$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._first[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._first._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("ISeq.-first", coll);
            };
            cljs.core._rest = function(coll) {
              if (null != coll && null != coll.cljs$core$ISeq$_rest$arity$1) {
                return coll.cljs$core$ISeq$_rest$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._rest[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._rest._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("ISeq.-rest", coll);
            };
            cljs.core.INext = function() {
            };
            cljs.core._next = function(coll) {
              if (null != coll && null != coll.cljs$core$INext$_next$arity$1) {
                return coll.cljs$core$INext$_next$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._next[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._next._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("INext.-next", coll);
            };
            cljs.core.ILookup = function() {
            };
            cljs.core._lookup = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
              if (null != o && null != o.cljs$core$ILookup$_lookup$arity$2) {
                return o.cljs$core$ILookup$_lookup$arity$2(o, k);
              }
              var m__4434__auto__ = cljs.core._lookup[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__4434__auto__.call(null, o, k);
              }
              m__4434__auto__ = cljs.core._lookup._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__4434__auto__.call(null, o, k);
              }
              throw cljs.core.missing_protocol("ILookup.-lookup", o);
            };
            cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
              if (null != o && null != o.cljs$core$ILookup$_lookup$arity$3) {
                return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
              }
              var m__4434__auto__ = cljs.core._lookup[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4434__auto__.call(null, o, k, not_found);
              }
              m__4434__auto__ = cljs.core._lookup._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__4434__auto__.call(null, o, k, not_found);
              }
              throw cljs.core.missing_protocol("ILookup.-lookup", o);
            };
            cljs.core._lookup.cljs$lang$maxFixedArity = 3;
            cljs.core.IAssociative = function() {
            };
            cljs.core._contains_key_QMARK_ = function(coll, k) {
              if (null != coll && null != coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2) {
                return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
              }
              var m__4434__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              m__4434__auto__ = cljs.core._contains_key_QMARK_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
            };
            cljs.core._assoc = function(coll, k, v) {
              if (null != coll && null != coll.cljs$core$IAssociative$_assoc$arity$3) {
                return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
              }
              var m__4434__auto__ = cljs.core._assoc[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4434__auto__.call(null, coll, k, v);
              }
              m__4434__auto__ = cljs.core._assoc._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__4434__auto__.call(null, coll, k, v);
              }
              throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
            };
            cljs.core.IFind = function() {
            };
            cljs.core._find = function(coll, k) {
              if (null != coll && null != coll.cljs$core$IFind$_find$arity$2) {
                return coll.cljs$core$IFind$_find$arity$2(coll, k);
              }
              var m__4434__auto__ = cljs.core._find[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              m__4434__auto__ = cljs.core._find._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              throw cljs.core.missing_protocol("IFind.-find", coll);
            };
            cljs.core.IMap = function() {
            };
            cljs.core._dissoc = function(coll, k) {
              if (null != coll && null != coll.cljs$core$IMap$_dissoc$arity$2) {
                return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
              }
              var m__4434__auto__ = cljs.core._dissoc[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              m__4434__auto__ = cljs.core._dissoc._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__4434__auto__.call(null, coll, k);
              }
              throw cljs.core.missing_protocol("IMap.-dissoc", coll);
            };
            cljs.core.IMapEntry = function() {
            };
            cljs.core._key = function(coll) {
              if (null != coll && null != coll.cljs$core$IMapEntry$_key$arity$1) {
                return coll.cljs$core$IMapEntry$_key$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._key[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._key._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IMapEntry.-key", coll);
            };
            cljs.core._val = function(coll) {
              if (null != coll && null != coll.cljs$core$IMapEntry$_val$arity$1) {
                return coll.cljs$core$IMapEntry$_val$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._val[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._val._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IMapEntry.-val", coll);
            };
            cljs.core.ISet = function() {
            };
            cljs.core._disjoin = function(coll, v) {
              if (null != coll && null != coll.cljs$core$ISet$_disjoin$arity$2) {
                return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
              }
              var m__4434__auto__ = cljs.core._disjoin[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4434__auto__.call(null, coll, v);
              }
              m__4434__auto__ = cljs.core._disjoin._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__4434__auto__.call(null, coll, v);
              }
              throw cljs.core.missing_protocol("ISet.-disjoin", coll);
            };
            cljs.core.IStack = function() {
            };
            cljs.core._peek = function(coll) {
              if (null != coll && null != coll.cljs$core$IStack$_peek$arity$1) {
                return coll.cljs$core$IStack$_peek$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._peek[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._peek._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IStack.-peek", coll);
            };
            cljs.core._pop = function(coll) {
              if (null != coll && null != coll.cljs$core$IStack$_pop$arity$1) {
                return coll.cljs$core$IStack$_pop$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._pop[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._pop._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IStack.-pop", coll);
            };
            cljs.core.IVector = function() {
            };
            cljs.core._assoc_n = function(coll, n, val) {
              if (null != coll && null != coll.cljs$core$IVector$_assoc_n$arity$3) {
                return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
              }
              var m__4434__auto__ = cljs.core._assoc_n[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4434__auto__.call(null, coll, n, val);
              }
              m__4434__auto__ = cljs.core._assoc_n._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__4434__auto__.call(null, coll, n, val);
              }
              throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
            };
            cljs.core.IDeref = function() {
            };
            cljs.core._deref = function(o) {
              if (null != o && null != o.cljs$core$IDeref$_deref$arity$1) {
                return o.cljs$core$IDeref$_deref$arity$1(o);
              }
              var m__4434__auto__ = cljs.core._deref[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              m__4434__auto__ = cljs.core._deref._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              throw cljs.core.missing_protocol("IDeref.-deref", o);
            };
            cljs.core.IDerefWithTimeout = function() {
            };
            cljs.core._deref_with_timeout = function(o, msec, timeout_val) {
              if (null != o && null != o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3) {
                return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
              }
              var m__4434__auto__ = cljs.core._deref_with_timeout[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4434__auto__.call(null, o, msec, timeout_val);
              }
              m__4434__auto__ = cljs.core._deref_with_timeout._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__4434__auto__.call(null, o, msec, timeout_val);
              }
              throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
            };
            cljs.core.IMeta = function() {
            };
            cljs.core._meta = function(o) {
              if (null != o && null != o.cljs$core$IMeta$_meta$arity$1) {
                return o.cljs$core$IMeta$_meta$arity$1(o);
              }
              var m__4434__auto__ = cljs.core._meta[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              m__4434__auto__ = cljs.core._meta._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              throw cljs.core.missing_protocol("IMeta.-meta", o);
            };
            cljs.core.IWithMeta = function() {
            };
            cljs.core._with_meta = function(o, meta) {
              if (null != o && null != o.cljs$core$IWithMeta$_with_meta$arity$2) {
                return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
              }
              var m__4434__auto__ = cljs.core._with_meta[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4434__auto__.call(null, o, meta);
              }
              m__4434__auto__ = cljs.core._with_meta._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__4434__auto__.call(null, o, meta);
              }
              throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
            };
            cljs.core.IReduce = function() {
            };
            cljs.core._reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
              if (null != coll && null != coll.cljs$core$IReduce$_reduce$arity$2) {
                return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
              }
              var m__4434__auto__ = cljs.core._reduce[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4434__auto__.call(null, coll, f);
              }
              m__4434__auto__ = cljs.core._reduce._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__4434__auto__.call(null, coll, f);
              }
              throw cljs.core.missing_protocol("IReduce.-reduce", coll);
            };
            cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
              if (null != coll && null != coll.cljs$core$IReduce$_reduce$arity$3) {
                return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
              }
              var m__4434__auto__ = cljs.core._reduce[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4434__auto__.call(null, coll, f, start);
              }
              m__4434__auto__ = cljs.core._reduce._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__4434__auto__.call(null, coll, f, start);
              }
              throw cljs.core.missing_protocol("IReduce.-reduce", coll);
            };
            cljs.core._reduce.cljs$lang$maxFixedArity = 3;
            cljs.core.IKVReduce = function() {
            };
            cljs.core._kv_reduce = function(coll, f, init) {
              if (null != coll && null != coll.cljs$core$IKVReduce$_kv_reduce$arity$3) {
                return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
              }
              var m__4434__auto__ = cljs.core._kv_reduce[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4434__auto__.call(null, coll, f, init);
              }
              m__4434__auto__ = cljs.core._kv_reduce._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__4434__auto__.call(null, coll, f, init);
              }
              throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
            };
            cljs.core.IEquiv = function() {
            };
            cljs.core._equiv = function(o, other) {
              if (null != o && null != o.cljs$core$IEquiv$_equiv$arity$2) {
                return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
              }
              var m__4434__auto__ = cljs.core._equiv[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__4434__auto__.call(null, o, other);
              }
              m__4434__auto__ = cljs.core._equiv._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__4434__auto__.call(null, o, other);
              }
              throw cljs.core.missing_protocol("IEquiv.-equiv", o);
            };
            cljs.core.IHash = function() {
            };
            cljs.core._hash = function(o) {
              if (null != o && null != o.cljs$core$IHash$_hash$arity$1) {
                return o.cljs$core$IHash$_hash$arity$1(o);
              }
              var m__4434__auto__ = cljs.core._hash[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              m__4434__auto__ = cljs.core._hash._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              throw cljs.core.missing_protocol("IHash.-hash", o);
            };
            cljs.core.ISeqable = function() {
            };
            cljs.core._seq = function(o) {
              if (null != o && null != o.cljs$core$ISeqable$_seq$arity$1) {
                return o.cljs$core$ISeqable$_seq$arity$1(o);
              }
              var m__4434__auto__ = cljs.core._seq[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              m__4434__auto__ = cljs.core._seq._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__4434__auto__.call(null, o);
              }
              throw cljs.core.missing_protocol("ISeqable.-seq", o);
            };
            cljs.core.ISequential = function() {
            };
            cljs.core.IList = function() {
            };
            cljs.core.IRecord = function() {
            };
            cljs.core.IReversible = function() {
            };
            cljs.core._rseq = function(coll) {
              if (null != coll && null != coll.cljs$core$IReversible$_rseq$arity$1) {
                return coll.cljs$core$IReversible$_rseq$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._rseq[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._rseq._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IReversible.-rseq", coll);
            };
            cljs.core.ISorted = function() {
            };
            cljs.core._sorted_seq = function(coll, ascending_QMARK_) {
              if (null != coll && null != coll.cljs$core$ISorted$_sorted_seq$arity$2) {
                return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
              }
              var m__4434__auto__ = cljs.core._sorted_seq[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4434__auto__.call(null, coll, ascending_QMARK_);
              }
              m__4434__auto__ = cljs.core._sorted_seq._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__4434__auto__.call(null, coll, ascending_QMARK_);
              }
              throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
            };
            cljs.core._sorted_seq_from = function(coll, k, ascending_QMARK_) {
              if (null != coll && null != coll.cljs$core$ISorted$_sorted_seq_from$arity$3) {
                return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
              }
              var m__4434__auto__ = cljs.core._sorted_seq_from[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4434__auto__.call(null, coll, k, ascending_QMARK_);
              }
              m__4434__auto__ = cljs.core._sorted_seq_from._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__4434__auto__.call(null, coll, k, ascending_QMARK_);
              }
              throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
            };
            cljs.core._entry_key = function(coll, entry) {
              if (null != coll && null != coll.cljs$core$ISorted$_entry_key$arity$2) {
                return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
              }
              var m__4434__auto__ = cljs.core._entry_key[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4434__auto__.call(null, coll, entry);
              }
              m__4434__auto__ = cljs.core._entry_key._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__4434__auto__.call(null, coll, entry);
              }
              throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
            };
            cljs.core._comparator = function(coll) {
              if (null != coll && null != coll.cljs$core$ISorted$_comparator$arity$1) {
                return coll.cljs$core$ISorted$_comparator$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._comparator[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._comparator._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("ISorted.-comparator", coll);
            };
            cljs.core.IWriter = function() {
            };
            cljs.core._write = function(writer, s) {
              if (null != writer && null != writer.cljs$core$IWriter$_write$arity$2) {
                return writer.cljs$core$IWriter$_write$arity$2(writer, s);
              }
              var m__4434__auto__ = cljs.core._write[goog.typeOf(null == writer ? null : writer)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4434__auto__.call(null, writer, s);
              }
              m__4434__auto__ = cljs.core._write._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__4434__auto__.call(null, writer, s);
              }
              throw cljs.core.missing_protocol("IWriter.-write", writer);
            };
            cljs.core._flush = function(writer) {
              if (null != writer && null != writer.cljs$core$IWriter$_flush$arity$1) {
                return writer.cljs$core$IWriter$_flush$arity$1(writer);
              }
              var m__4434__auto__ = cljs.core._flush[goog.typeOf(null == writer ? null : writer)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__4434__auto__.call(null, writer);
              }
              m__4434__auto__ = cljs.core._flush._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__4434__auto__.call(null, writer);
              }
              throw cljs.core.missing_protocol("IWriter.-flush", writer);
            };
            cljs.core.IPrintWithWriter = function() {
            };
            cljs.core._pr_writer = function(o, writer, opts) {
              if (null != o && null != o.cljs$core$IPrintWithWriter$_pr_writer$arity$3) {
                return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
              }
              var m__4434__auto__ = cljs.core._pr_writer[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4434__auto__.call(null, o, writer, opts);
              }
              m__4434__auto__ = cljs.core._pr_writer._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__4434__auto__.call(null, o, writer, opts);
              }
              throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
            };
            cljs.core.IPending = function() {
            };
            cljs.core._realized_QMARK_ = function(x) {
              if (null != x && null != x.cljs$core$IPending$_realized_QMARK_$arity$1) {
                return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
              }
              var m__4434__auto__ = cljs.core._realized_QMARK_[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              m__4434__auto__ = cljs.core._realized_QMARK_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              throw cljs.core.missing_protocol("IPending.-realized?", x);
            };
            cljs.core.IWatchable = function() {
            };
            cljs.core._notify_watches = function(this$, oldval, newval) {
              if (null != this$ && null != this$.cljs$core$IWatchable$_notify_watches$arity$3) {
                return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
              }
              var m__4434__auto__ = cljs.core._notify_watches[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4434__auto__.call(null, this$, oldval, newval);
              }
              m__4434__auto__ = cljs.core._notify_watches._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__4434__auto__.call(null, this$, oldval, newval);
              }
              throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
            };
            cljs.core._add_watch = function(this$, key, f) {
              if (null != this$ && null != this$.cljs$core$IWatchable$_add_watch$arity$3) {
                return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
              }
              var m__4434__auto__ = cljs.core._add_watch[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4434__auto__.call(null, this$, key, f);
              }
              m__4434__auto__ = cljs.core._add_watch._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__4434__auto__.call(null, this$, key, f);
              }
              throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
            };
            cljs.core._remove_watch = function(this$, key) {
              if (null != this$ && null != this$.cljs$core$IWatchable$_remove_watch$arity$2) {
                return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
              }
              var m__4434__auto__ = cljs.core._remove_watch[goog.typeOf(null == this$ ? null : this$)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4434__auto__.call(null, this$, key);
              }
              m__4434__auto__ = cljs.core._remove_watch._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__4434__auto__.call(null, this$, key);
              }
              throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
            };
            cljs.core.IEditableCollection = function() {
            };
            cljs.core._as_transient = function(coll) {
              if (null != coll && null != coll.cljs$core$IEditableCollection$_as_transient$arity$1) {
                return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._as_transient[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._as_transient._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
            };
            cljs.core.ITransientCollection = function() {
            };
            cljs.core._conj_BANG_ = function(tcoll, val) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2) {
                return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
              }
              var m__4434__auto__ = cljs.core._conj_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4434__auto__.call(null, tcoll, val);
              }
              m__4434__auto__ = cljs.core._conj_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__4434__auto__.call(null, tcoll, val);
              }
              throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
            };
            cljs.core._persistent_BANG_ = function(tcoll) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1) {
                return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
              }
              var m__4434__auto__ = cljs.core._persistent_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4434__auto__.call(null, tcoll);
              }
              m__4434__auto__ = cljs.core._persistent_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4434__auto__.call(null, tcoll);
              }
              throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
            };
            cljs.core.ITransientAssociative = function() {
            };
            cljs.core._assoc_BANG_ = function(tcoll, key, val) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3) {
                return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
              }
              var m__4434__auto__ = cljs.core._assoc_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4434__auto__.call(null, tcoll, key, val);
              }
              m__4434__auto__ = cljs.core._assoc_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__4434__auto__.call(null, tcoll, key, val);
              }
              throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
            };
            cljs.core.ITransientMap = function() {
            };
            cljs.core._dissoc_BANG_ = function(tcoll, key) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2) {
                return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
              }
              var m__4434__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4434__auto__.call(null, tcoll, key);
              }
              m__4434__auto__ = cljs.core._dissoc_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__4434__auto__.call(null, tcoll, key);
              }
              throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
            };
            cljs.core.ITransientVector = function() {
            };
            cljs.core._assoc_n_BANG_ = function(tcoll, n, val) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3) {
                return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
              }
              var m__4434__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4434__auto__.call(null, tcoll, n, val);
              }
              m__4434__auto__ = cljs.core._assoc_n_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__4434__auto__.call(null, tcoll, n, val);
              }
              throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
            };
            cljs.core._pop_BANG_ = function(tcoll) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1) {
                return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
              }
              var m__4434__auto__ = cljs.core._pop_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4434__auto__.call(null, tcoll);
              }
              m__4434__auto__ = cljs.core._pop_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__4434__auto__.call(null, tcoll);
              }
              throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
            };
            cljs.core.ITransientSet = function() {
            };
            cljs.core._disjoin_BANG_ = function(tcoll, v) {
              if (null != tcoll && null != tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2) {
                return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
              }
              var m__4434__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(null == tcoll ? null : tcoll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4434__auto__.call(null, tcoll, v);
              }
              m__4434__auto__ = cljs.core._disjoin_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__4434__auto__.call(null, tcoll, v);
              }
              throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
            };
            cljs.core.IComparable = function() {
            };
            cljs.core._compare = function(x, y) {
              if (null != x && null != x.cljs$core$IComparable$_compare$arity$2) {
                return x.cljs$core$IComparable$_compare$arity$2(x, y);
              }
              var m__4434__auto__ = cljs.core._compare[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__4434__auto__.call(null, x, y);
              }
              m__4434__auto__ = cljs.core._compare._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__4434__auto__.call(null, x, y);
              }
              throw cljs.core.missing_protocol("IComparable.-compare", x);
            };
            cljs.core.IChunk = function() {
            };
            cljs.core._drop_first = function(coll) {
              if (null != coll && null != coll.cljs$core$IChunk$_drop_first$arity$1) {
                return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._drop_first[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._drop_first._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
            };
            cljs.core.IChunkedSeq = function() {
            };
            cljs.core._chunked_first = function(coll) {
              if (null != coll && null != coll.cljs$core$IChunkedSeq$_chunked_first$arity$1) {
                return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._chunked_first[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._chunked_first._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
            };
            cljs.core._chunked_rest = function(coll) {
              if (null != coll && null != coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1) {
                return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._chunked_rest[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._chunked_rest._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
            };
            cljs.core.IChunkedNext = function() {
            };
            cljs.core._chunked_next = function(coll) {
              if (null != coll && null != coll.cljs$core$IChunkedNext$_chunked_next$arity$1) {
                return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._chunked_next[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._chunked_next._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
            };
            cljs.core.INamed = function() {
            };
            cljs.core._name = function(x) {
              if (null != x && null != x.cljs$core$INamed$_name$arity$1) {
                return x.cljs$core$INamed$_name$arity$1(x);
              }
              var m__4434__auto__ = cljs.core._name[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              m__4434__auto__ = cljs.core._name._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              throw cljs.core.missing_protocol("INamed.-name", x);
            };
            cljs.core._namespace = function(x) {
              if (null != x && null != x.cljs$core$INamed$_namespace$arity$1) {
                return x.cljs$core$INamed$_namespace$arity$1(x);
              }
              var m__4434__auto__ = cljs.core._namespace[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              m__4434__auto__ = cljs.core._namespace._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              throw cljs.core.missing_protocol("INamed.-namespace", x);
            };
            cljs.core.IAtom = function() {
            };
            cljs.core.IReset = function() {
            };
            cljs.core._reset_BANG_ = function(o, new_value) {
              if (null != o && null != o.cljs$core$IReset$_reset_BANG_$arity$2) {
                return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
              }
              var m__4434__auto__ = cljs.core._reset_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4434__auto__.call(null, o, new_value);
              }
              m__4434__auto__ = cljs.core._reset_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4434__auto__.call(null, o, new_value);
              }
              throw cljs.core.missing_protocol("IReset.-reset!", o);
            };
            cljs.core.ISwap = function() {
            };
            cljs.core._swap_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
              if (null != o && null != o.cljs$core$ISwap$_swap_BANG_$arity$2) {
                return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
              }
              var m__4434__auto__ = cljs.core._swap_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__4434__auto__.call(null, o, f);
              }
              m__4434__auto__ = cljs.core._swap_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__4434__auto__.call(null, o, f);
              }
              throw cljs.core.missing_protocol("ISwap.-swap!", o);
            };
            cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
              if (null != o && null != o.cljs$core$ISwap$_swap_BANG_$arity$3) {
                return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
              }
              var m__4434__auto__ = cljs.core._swap_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4434__auto__.call(null, o, f, a);
              }
              m__4434__auto__ = cljs.core._swap_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__4434__auto__.call(null, o, f, a);
              }
              throw cljs.core.missing_protocol("ISwap.-swap!", o);
            };
            cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
              if (null != o && null != o.cljs$core$ISwap$_swap_BANG_$arity$4) {
                return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
              }
              var m__4434__auto__ = cljs.core._swap_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4434__auto__.call(null, o, f, a, b);
              }
              m__4434__auto__ = cljs.core._swap_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$4 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__4434__auto__.call(null, o, f, a, b);
              }
              throw cljs.core.missing_protocol("ISwap.-swap!", o);
            };
            cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
              if (null != o && null != o.cljs$core$ISwap$_swap_BANG_$arity$5) {
                return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
              }
              var m__4434__auto__ = cljs.core._swap_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4434__auto__.call(null, o, f, a, b, xs);
              }
              m__4434__auto__ = cljs.core._swap_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$5 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__4434__auto__.call(null, o, f, a, b, xs);
              }
              throw cljs.core.missing_protocol("ISwap.-swap!", o);
            };
            cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
            cljs.core.IVolatile = function() {
            };
            cljs.core._vreset_BANG_ = function(o, new_value) {
              if (null != o && null != o.cljs$core$IVolatile$_vreset_BANG_$arity$2) {
                return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
              }
              var m__4434__auto__ = cljs.core._vreset_BANG_[goog.typeOf(null == o ? null : o)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4434__auto__.call(null, o, new_value);
              }
              m__4434__auto__ = cljs.core._vreset_BANG_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__4434__auto__.call(null, o, new_value);
              }
              throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
            };
            cljs.core.IIterable = function() {
            };
            cljs.core._iterator = function(coll) {
              if (null != coll && null != coll.cljs$core$IIterable$_iterator$arity$1) {
                return coll.cljs$core$IIterable$_iterator$arity$1(coll);
              }
              var m__4434__auto__ = cljs.core._iterator[goog.typeOf(null == coll ? null : coll)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              m__4434__auto__ = cljs.core._iterator._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__4434__auto__.call(null, coll);
              }
              throw cljs.core.missing_protocol("IIterable.-iterator", coll);
            };
            cljs.core.StringBufferWriter = function(sb) {
              this.sb = sb;
              this.cljs$lang$protocol_mask$partition0$ = 1073741824;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
              return this.sb.append(s);
            };
            cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
              return null;
            };
            cljs.core.StringBufferWriter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$sb], null);
            };
            cljs.core.StringBufferWriter.cljs$lang$type = !0;
            cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
            cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/StringBufferWriter");
            };
            cljs.core.__GT_StringBufferWriter = function(sb) {
              return new cljs.core.StringBufferWriter(sb);
            };
            cljs.core.pr_str_STAR_ = function(obj) {
              var sb = new goog.string.StringBuffer, writer = new cljs.core.StringBufferWriter(sb);
              obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
              writer.cljs$core$IWriter$_flush$arity$1(null);
              return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
            };
            cljs.core.int_rotate_left = function(x, n) {
              return x << n | x >>> -n;
            };
            "undefined" !== typeof Math && "undefined" !== typeof Math.imul && 0 !== Math.imul(4294967295, 5) ? cljs.core.imul = function(a, b) {
              return Math.imul(a, b);
            } : cljs.core.imul = function(a, b) {
              var al = a & 65535, bl = b & 65535;
              return al * bl + ((a >>> 16 & 65535) * bl + al * (b >>> 16 & 65535) << 16 >>> 0) | 0;
            };
            cljs.core.m3_seed = 0;
            cljs.core.m3_C1 = -862048943;
            cljs.core.m3_C2 = 461845907;
            cljs.core.m3_mix_K1 = function(k1) {
              return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
            };
            cljs.core.m3_mix_H1 = function(h1, k1) {
              return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + -430675100 | 0;
            };
            cljs.core.m3_fmix = function(h1, len) {
              h1 = (h1 | 0) ^ len;
              h1 = cljs.core.imul(h1 ^ h1 >>> 16, -2048144789);
              h1 = cljs.core.imul(h1 ^ h1 >>> 13, -1028477387);
              return h1 ^ h1 >>> 16;
            };
            cljs.core.m3_hash_int = function(in$) {
              if (0 === in$) {
                return in$;
              }
              in$ = cljs.core.m3_mix_K1(in$);
              in$ = cljs.core.m3_mix_H1(cljs.core.m3_seed, in$);
              return cljs.core.m3_fmix(in$, 4);
            };
            cljs.core.m3_hash_unencoded_chars = function(in$) {
              a: {
                var h1 = 1;
                for (var h1$jscomp$0 = cljs.core.m3_seed;;) {
                  if (h1 < in$.length) {
                    var G__7551 = h1 + 2;
                    h1$jscomp$0 = cljs.core.m3_mix_H1(h1$jscomp$0, cljs.core.m3_mix_K1(in$.charCodeAt(h1 - 1) | in$.charCodeAt(h1) << 16));
                    h1 = G__7551;
                  } else {
                    h1 = h1$jscomp$0;
                    break a;
                  }
                }
              }
              h1 = 1 === (in$.length & 1) ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
              return cljs.core.m3_fmix(h1, cljs.core.imul(2, in$.length));
            };
            cljs.core.string_hash_cache = {};
            cljs.core.string_hash_cache_count = 0;
            cljs.core.hash_string_STAR_ = function(s) {
              if (null != s) {
                var len = s.length;
                if (0 < len) {
                  for (var i = 0, hash = 0;;) {
                    if (i < len) {
                      var G__7553 = i + 1;
                      hash = cljs.core.imul(31, hash) + s.charCodeAt(i);
                      i = G__7553;
                    } else {
                      return hash;
                    }
                  }
                } else {
                  return 0;
                }
              } else {
                return 0;
              }
            };
            cljs.core.add_to_string_hash_cache = function(k) {
              var h = cljs.core.hash_string_STAR_(k);
              goog.object.set(cljs.core.string_hash_cache, k, h);
              cljs.core.string_hash_cache_count += 1;
              return h;
            };
            cljs.core.hash_string = function(k) {
              255 < cljs.core.string_hash_cache_count && (cljs.core.string_hash_cache = {}, cljs.core.string_hash_cache_count = 0);
              if (null == k) {
                return 0;
              }
              var h = cljs.core.string_hash_cache[k];
              return "number" === typeof h ? h : cljs.core.add_to_string_hash_cache(k);
            };
            cljs.core.hash = function(o) {
              if (null != o && (o.cljs$lang$protocol_mask$partition0$ & 4194304 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IHash$)) {
                return cljs.core._hash(o) ^ 0;
              }
              if ("number" === typeof o) {
                if (cljs.core.truth_(isFinite(o))) {
                  return Math.floor(o) % 2147483647;
                }
                switch(o) {
                  case Infinity:
                    return 2146435072;
                  case -Infinity:
                    return -1048576;
                  default:
                    return 2146959360;
                }
              } else {
                return !0 === o ? 1231 : !1 === o ? 1237 : "string" === typeof o ? cljs.core.m3_hash_int(cljs.core.hash_string(o)) : o instanceof Date ? o.valueOf() ^ 0 : null == o ? 0 : cljs.core._hash(o) ^ 0;
              }
            };
            cljs.core.hash_combine = function(seed, hash) {
              return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
            };
            cljs.core.instance_QMARK_ = function(c, x) {
              return x instanceof c;
            };
            cljs.core.symbol_QMARK_ = function(x) {
              return x instanceof cljs.core.Symbol;
            };
            cljs.core.hash_symbol = function(sym) {
              return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
            };
            cljs.core.compare_symbols = function(a, b) {
              if (a.str === b.str) {
                return 0;
              }
              if (cljs.core.truth_(function() {
                var and__4120__auto__ = cljs.core.not(a.ns);
                return and__4120__auto__ ? b.ns : and__4120__auto__;
              }())) {
                return -1;
              }
              if (cljs.core.truth_(a.ns)) {
                if (cljs.core.not(b.ns)) {
                  return 1;
                }
                var nsc = goog.array.defaultCompare(a.ns, b.ns);
                return 0 === nsc ? goog.array.defaultCompare(a.name, b.name) : nsc;
              }
              return goog.array.defaultCompare(a.name, b.name);
            };
            cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
              this.ns = ns;
              this.name = name;
              this.str = str;
              this._hash = _hash;
              this._meta = _meta;
              this.cljs$lang$protocol_mask$partition0$ = 2154168321;
              this.cljs$lang$protocol_mask$partition1$ = 4096;
            };
            cljs.core.Symbol.prototype.toString = function() {
              return this.str;
            };
            cljs.core.Symbol.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
              return other instanceof cljs.core.Symbol ? this.str === other.str : !1;
            };
            cljs.core.Symbol.prototype.call = function() {
              var G__7556 = null, G__7556__2 = function(self__, coll) {
                return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, this) : cljs.core.get.call(null, coll, this);
              }, G__7556__3 = function(self__, coll, not_found) {
                return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, this, not_found) : cljs.core.get.call(null, coll, this, not_found);
              };
              G__7556 = function(self__, coll, not_found) {
                switch(arguments.length) {
                  case 2:
                    return G__7556__2.call(this, self__, coll);
                  case 3:
                    return G__7556__3.call(this, self__, coll, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__7556.cljs$core$IFn$_invoke$arity$2 = G__7556__2;
              G__7556.cljs$core$IFn$_invoke$arity$3 = G__7556__3;
              return G__7556;
            }();
            cljs.core.Symbol.prototype.apply = function(self__, args5881) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args5881)));
            };
            cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, this) : cljs.core.get.call(null, coll, this);
            };
            cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
              return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, this, not_found) : cljs.core.get.call(null, coll, this, not_found);
            };
            cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
              return this._meta;
            };
            cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
              return new cljs.core.Symbol(this.ns, this.name, this.str, this._hash, new_meta);
            };
            cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
              sym = this._hash;
              return null != sym ? sym : this._hash = sym = cljs.core.hash_symbol(this);
            };
            cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
              return this.name;
            };
            cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
              return this.ns;
            };
            cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
              return cljs.core._write(writer, this.str);
            };
            cljs.core.Symbol.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$ns, cljs$cst$symbol$name, cljs$cst$symbol$str, cljs.core.with_meta(cljs$cst$symbol$_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$_meta], null);
            };
            cljs.core.Symbol.cljs$lang$type = !0;
            cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
            cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Symbol");
            };
            cljs.core.__GT_Symbol = function(ns, name, str, _hash, _meta) {
              return new cljs.core.Symbol(ns, name, str, _hash, _meta);
            };
            cljs.core.var_QMARK_ = function(v) {
              return v instanceof cljs.core.Var;
            };
            cljs.core.symbol = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
              for (;;) {
                if (name instanceof cljs.core.Symbol) {
                  return name;
                }
                if ("string" === typeof name) {
                  var idx = name.indexOf("/");
                  return 1 > idx ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name) : cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
                }
                if (cljs.core.var_QMARK_(name)) {
                  return name.sym;
                }
                if (name instanceof cljs.core.Keyword) {
                  name = name.fqn;
                } else {
                  throw Error("no conversion to symbol");
                }
              }
            };
            cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
              var sym_str = null != ns ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), "/", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("") : name;
              return new cljs.core.Symbol(ns, name, sym_str, null, null);
            };
            cljs.core.symbol.cljs$lang$maxFixedArity = 2;
            cljs.core.Var = function(val, sym, _meta) {
              this.val = val;
              this.sym = sym;
              this._meta = _meta;
              this.cljs$lang$protocol_mask$partition0$ = 6717441;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.Var.prototype.isMacro = function() {
              return (this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null)).cljs$lang$macro;
            };
            cljs.core.Var.prototype.toString = function() {
              return ["#'", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.sym)].join("");
            };
            cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
              return this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
            };
            cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
              return this._meta;
            };
            cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
              return new cljs.core.Var(this.val, this.sym, new_meta);
            };
            cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
              return other instanceof cljs.core.Var ? (this$ = this.sym, other = other.sym, cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this$, other) : cljs.core._EQ_.call(null, this$, other)) : !1;
            };
            cljs.core.Var.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
              return cljs.core.hash_symbol(this.sym);
            };
            cljs.core.Var.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Var.prototype.call = function() {
              var G__7559 = null, G__7559__1 = function(self__) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$0 ? self__.cljs$core$IFn$_invoke$arity$0() : self__.call(null);
              }, G__7559__2 = function(self__, a) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$1 ? self__.cljs$core$IFn$_invoke$arity$1(a) : self__.call(null, a);
              }, G__7559__3 = function(self__, a, b) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$2 ? self__.cljs$core$IFn$_invoke$arity$2(a, b) : self__.call(null, a, b);
              }, G__7559__4 = function(self__, a, b, c) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$3 ? self__.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.call(null, a, b, c);
              }, G__7559__5 = function(self__, a, b, c, d) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$4 ? self__.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.call(null, a, b, c, d);
              }, G__7559__6 = function(self__, a, b, c, d, e) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$5 ? self__.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.call(null, a, b, c, d, e);
              }, G__7559__7 = function(self__, a, b, c, d, e, f) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$6 ? self__.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.call(null, a, b, c, d, e, f);
              }, G__7559__8 = function(self__, a, b, c, d, e, f, g) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$7 ? self__.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.call(null, a, b, c, d, e, f, g);
              }, G__7559__9 = function(self__, a, b, c, d, e, f, g, h) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$8 ? self__.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.call(null, a, b, c, d, e, f, g, h);
              }, G__7559__10 = function(self__, a, b, c, d, e, f, g, h, i) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$9 ? self__.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.call(null, a, b, c, d, e, f, g, h, i);
              }, G__7559__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$10 ? self__.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.call(null, a, b, c, d, e, f, g, h, i, j);
              }, G__7559__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$11 ? self__.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k);
              }, G__7559__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$12 ? self__.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
              }, G__7559__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$13 ? self__.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }, G__7559__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$14 ? self__.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }, G__7559__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$15 ? self__.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }, G__7559__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$16 ? self__.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }, G__7559__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$17 ? self__.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }, G__7559__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$18 ? self__.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }, G__7559__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$19 ? self__.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }, G__7559__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return self__.cljs$core$IFn$_invoke$arity$20 ? self__.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }, G__7559__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                self__ = this;
                self__ = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
                return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
              };
              G__7559 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                switch(arguments.length) {
                  case 1:
                    return G__7559__1.call(this, self__);
                  case 2:
                    return G__7559__2.call(this, self__, a);
                  case 3:
                    return G__7559__3.call(this, self__, a, b);
                  case 4:
                    return G__7559__4.call(this, self__, a, b, c);
                  case 5:
                    return G__7559__5.call(this, self__, a, b, c, d);
                  case 6:
                    return G__7559__6.call(this, self__, a, b, c, d, e);
                  case 7:
                    return G__7559__7.call(this, self__, a, b, c, d, e, f);
                  case 8:
                    return G__7559__8.call(this, self__, a, b, c, d, e, f, g);
                  case 9:
                    return G__7559__9.call(this, self__, a, b, c, d, e, f, g, h);
                  case 10:
                    return G__7559__10.call(this, self__, a, b, c, d, e, f, g, h, i);
                  case 11:
                    return G__7559__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
                  case 12:
                    return G__7559__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
                  case 13:
                    return G__7559__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
                  case 14:
                    return G__7559__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
                  case 15:
                    return G__7559__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
                  case 16:
                    return G__7559__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
                  case 17:
                    return G__7559__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                  case 18:
                    return G__7559__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
                  case 19:
                    return G__7559__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
                  case 20:
                    return G__7559__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
                  case 21:
                    return G__7559__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                  case 22:
                    return G__7559__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__7559.cljs$core$IFn$_invoke$arity$1 = G__7559__1;
              G__7559.cljs$core$IFn$_invoke$arity$2 = G__7559__2;
              G__7559.cljs$core$IFn$_invoke$arity$3 = G__7559__3;
              G__7559.cljs$core$IFn$_invoke$arity$4 = G__7559__4;
              G__7559.cljs$core$IFn$_invoke$arity$5 = G__7559__5;
              G__7559.cljs$core$IFn$_invoke$arity$6 = G__7559__6;
              G__7559.cljs$core$IFn$_invoke$arity$7 = G__7559__7;
              G__7559.cljs$core$IFn$_invoke$arity$8 = G__7559__8;
              G__7559.cljs$core$IFn$_invoke$arity$9 = G__7559__9;
              G__7559.cljs$core$IFn$_invoke$arity$10 = G__7559__10;
              G__7559.cljs$core$IFn$_invoke$arity$11 = G__7559__11;
              G__7559.cljs$core$IFn$_invoke$arity$12 = G__7559__12;
              G__7559.cljs$core$IFn$_invoke$arity$13 = G__7559__13;
              G__7559.cljs$core$IFn$_invoke$arity$14 = G__7559__14;
              G__7559.cljs$core$IFn$_invoke$arity$15 = G__7559__15;
              G__7559.cljs$core$IFn$_invoke$arity$16 = G__7559__16;
              G__7559.cljs$core$IFn$_invoke$arity$17 = G__7559__17;
              G__7559.cljs$core$IFn$_invoke$arity$18 = G__7559__18;
              G__7559.cljs$core$IFn$_invoke$arity$19 = G__7559__19;
              G__7559.cljs$core$IFn$_invoke$arity$20 = G__7559__20;
              G__7559.cljs$core$IFn$_invoke$arity$21 = G__7559__21;
              G__7559.cljs$core$IFn$_invoke$arity$22 = G__7559__22;
              return G__7559;
            }();
            cljs.core.Var.prototype.apply = function(self__, args5884) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args5884)));
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
              var fexpr__5930 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5930.cljs$core$IFn$_invoke$arity$0 ? fexpr__5930.cljs$core$IFn$_invoke$arity$0() : fexpr__5930.call(null);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
              var fexpr__5931 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5931.cljs$core$IFn$_invoke$arity$1 ? fexpr__5931.cljs$core$IFn$_invoke$arity$1(a) : fexpr__5931.call(null, a);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
              var fexpr__5932 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5932.cljs$core$IFn$_invoke$arity$2 ? fexpr__5932.cljs$core$IFn$_invoke$arity$2(a, b) : fexpr__5932.call(null, a, b);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
              var fexpr__5933 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5933.cljs$core$IFn$_invoke$arity$3 ? fexpr__5933.cljs$core$IFn$_invoke$arity$3(a, b, c) : fexpr__5933.call(null, a, b, c);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
              var fexpr__5934 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5934.cljs$core$IFn$_invoke$arity$4 ? fexpr__5934.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : fexpr__5934.call(null, a, b, c, d);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
              var fexpr__5935 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5935.cljs$core$IFn$_invoke$arity$5 ? fexpr__5935.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : fexpr__5935.call(null, a, b, c, d, e);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
              var fexpr__5936 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5936.cljs$core$IFn$_invoke$arity$6 ? fexpr__5936.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : fexpr__5936.call(null, a, b, c, d, e, f);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
              var fexpr__5937 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5937.cljs$core$IFn$_invoke$arity$7 ? fexpr__5937.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : fexpr__5937.call(null, a, b, c, d, e, f, g);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
              var fexpr__5938 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5938.cljs$core$IFn$_invoke$arity$8 ? fexpr__5938.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : fexpr__5938.call(null, a, b, c, d, e, f, g, h);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
              var fexpr__5939 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5939.cljs$core$IFn$_invoke$arity$9 ? fexpr__5939.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : fexpr__5939.call(null, a, b, c, d, e, f, g, h, i);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
              var fexpr__5940 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5940.cljs$core$IFn$_invoke$arity$10 ? fexpr__5940.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : fexpr__5940.call(null, a, b, c, d, e, f, g, h, i, j);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
              var fexpr__5941 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5941.cljs$core$IFn$_invoke$arity$11 ? fexpr__5941.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : fexpr__5941.call(null, a, b, c, d, e, f, g, h, i, j, k);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
              var fexpr__5942 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5942.cljs$core$IFn$_invoke$arity$12 ? fexpr__5942.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : fexpr__5942.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
              var fexpr__5943 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5943.cljs$core$IFn$_invoke$arity$13 ? fexpr__5943.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : fexpr__5943.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
              var fexpr__5944 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5944.cljs$core$IFn$_invoke$arity$14 ? fexpr__5944.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : fexpr__5944.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
              var fexpr__5945 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5945.cljs$core$IFn$_invoke$arity$15 ? fexpr__5945.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : fexpr__5945.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
              var fexpr__5946 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5946.cljs$core$IFn$_invoke$arity$16 ? fexpr__5946.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : fexpr__5946.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
              var fexpr__5947 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5947.cljs$core$IFn$_invoke$arity$17 ? fexpr__5947.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : fexpr__5947.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
              var fexpr__5948 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5948.cljs$core$IFn$_invoke$arity$18 ? fexpr__5948.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : fexpr__5948.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
              var fexpr__5949 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5949.cljs$core$IFn$_invoke$arity$19 ? fexpr__5949.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : fexpr__5949.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
              var fexpr__5950 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return fexpr__5950.cljs$core$IFn$_invoke$arity$20 ? fexpr__5950.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : fexpr__5950.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            };
            cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
              var G__5951 = this.val.cljs$core$IFn$_invoke$arity$0 ? this.val.cljs$core$IFn$_invoke$arity$0() : this.val.call(null);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__5951, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, G__5951, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
            };
            cljs.core.Var.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$val, cljs$cst$symbol$sym, cljs$cst$symbol$_meta], null);
            };
            cljs.core.Var.cljs$lang$type = !0;
            cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
            cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Var");
            };
            cljs.core.__GT_Var = function(val, sym, _meta) {
              return new cljs.core.Var(val, sym, _meta);
            };
            cljs.core.iterable_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition1$ & 131072 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIterable$ ? !0 : x.cljs$lang$protocol_mask$partition1$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
            };
            cljs.core.clone = function(value) {
              return cljs.core._clone(value);
            };
            cljs.core.cloneable_QMARK_ = function(value) {
              return null != value ? value.cljs$lang$protocol_mask$partition1$ & 8192 || cljs.core.PROTOCOL_SENTINEL === value.cljs$core$ICloneable$ ? !0 : value.cljs$lang$protocol_mask$partition1$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value) : cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
            };
            cljs.core.seq = function(coll) {
              if (null == coll) {
                return null;
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$)) {
                return cljs.core._seq(coll);
              }
              if (cljs.core.array_QMARK_(coll) || "string" === typeof coll) {
                return 0 === coll.length ? null : new cljs.core.IndexedSeq(coll, 0, null);
              }
              if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
                return cljs.core._seq(coll);
              }
              throw Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll), " is not ISeqable"].join(""));
            };
            cljs.core.first = function(coll) {
              if (null == coll) {
                return null;
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$)) {
                return cljs.core._first(coll);
              }
              coll = cljs.core.seq(coll);
              return null == coll ? null : cljs.core._first(coll);
            };
            cljs.core.rest = function(coll) {
              return null != coll ? null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) ? cljs.core._rest(coll) : (coll = cljs.core.seq(coll)) ? coll.cljs$core$ISeq$_rest$arity$1(null) : cljs.core.List.EMPTY : cljs.core.List.EMPTY;
            };
            cljs.core.next = function(coll) {
              return null == coll ? null : null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$) ? cljs.core._next(coll) : cljs.core.seq(cljs.core.rest(coll));
            };
            cljs.core._EQ_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7561 = arguments.length, i__4731__auto___7562 = 0;;) {
                    if (i__4731__auto___7562 < len__4730__auto___7561) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7562]), i__4731__auto___7562 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return null == x ? null == y : x === y || cljs.core._equiv(x, y);
            };
            cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._EQ_.cljs$lang$applyTo = function(seq5980) {
              var G__5981 = cljs.core.first(seq5980), seq5980__$1 = cljs.core.next(seq5980);
              seq5980 = cljs.core.first(seq5980__$1);
              seq5980__$1 = cljs.core.next(seq5980__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__5981, seq5980, seq5980__$1);
            };
            cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
            cljs.core.ES6Iterator = function(s) {
              this.s = s;
            };
            cljs.core.ES6Iterator.prototype.next = function() {
              if (null != this.s) {
                var x = cljs.core.first(this.s);
                this.s = cljs.core.next(this.s);
                return {value:x, done:!1};
              }
              return {value:null, done:!0};
            };
            cljs.core.ES6Iterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$s, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ES6Iterator.cljs$lang$type = !0;
            cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
            cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ES6Iterator");
            };
            cljs.core.__GT_ES6Iterator = function(s) {
              return new cljs.core.ES6Iterator(s);
            };
            cljs.core.es6_iterator = function(coll) {
              return new cljs.core.ES6Iterator(cljs.core.seq(coll));
            };
            cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
              this.value = value;
              this.iter = iter;
              this._rest = _rest;
              this.cljs$lang$protocol_mask$partition0$ = 8388672;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
              return this;
            };
            cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
              return this.value;
            };
            cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
              null == this._rest && (this._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(this.iter) : cljs.core.es6_iterator_seq.call(null, this.iter));
              return this._rest;
            };
            cljs.core.ES6IteratorSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$value, cljs$cst$symbol$iter, cljs.core.with_meta(cljs$cst$symbol$_rest, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ES6IteratorSeq.cljs$lang$type = !0;
            cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
            cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ES6IteratorSeq");
            };
            cljs.core.__GT_ES6IteratorSeq = function(value, iter, _rest) {
              return new cljs.core.ES6IteratorSeq(value, iter, _rest);
            };
            cljs.core.es6_iterator_seq = function(iter) {
              var v = iter.next();
              return cljs.core.truth_(v.done) ? cljs.core.List.EMPTY : new cljs.core.ES6IteratorSeq(v.value, iter, null);
            };
            cljs.core.mix_collection_hash = function(hash_basis, count) {
              var h1 = cljs.core.m3_seed;
              hash_basis = cljs.core.m3_mix_K1(hash_basis);
              h1 = cljs.core.m3_mix_H1(h1, hash_basis);
              return cljs.core.m3_fmix(h1, count);
            };
            cljs.core.hash_ordered_coll = function(coll) {
              var n = 0, hash_code = 1;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  n += 1, hash_code = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll)) | 0, coll = cljs.core.next(coll);
                } else {
                  return cljs.core.mix_collection_hash(hash_code, n);
                }
              }
            };
            cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
            cljs.core.hash_unordered_coll = function(coll) {
              var n = 0, hash_code = 0;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  n += 1, hash_code = hash_code + cljs.core.hash(cljs.core.first(coll)) | 0, coll = cljs.core.next(coll);
                } else {
                  return cljs.core.mix_collection_hash(hash_code, n);
                }
              }
            };
            cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
            goog.object.set(cljs.core.ICounted, "null", !0);
            var G__5984_7573 = cljs.core._count, G__5985_7574 = "null", G__5986_7575 = function(G__5984_7573, G__5985_7574) {
              return function(_) {
                return 0;
              };
            }();
            goog.object.set(G__5984_7573, G__5985_7574, G__5986_7575);
            Date.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
            Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
              return other instanceof Date && this.valueOf() === other.valueOf();
            };
            Date.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
              if (other instanceof Date) {
                return goog.array.defaultCompare(this.valueOf(), other.valueOf());
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
            };
            cljs.core.Inst = function() {
            };
            cljs.core.inst_ms_STAR_ = function(inst) {
              if (null != inst && null != inst.cljs$core$Inst$inst_ms_STAR_$arity$1) {
                return inst.cljs$core$Inst$inst_ms_STAR_$arity$1(inst);
              }
              var m__4434__auto__ = cljs.core.inst_ms_STAR_[goog.typeOf(null == inst ? null : inst)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__4434__auto__.call(null, inst);
              }
              m__4434__auto__ = cljs.core.inst_ms_STAR_._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__4434__auto__.call(null, inst);
              }
              throw cljs.core.missing_protocol("Inst.inst-ms*", inst);
            };
            Date.prototype.cljs$core$Inst$ = cljs.core.PROTOCOL_SENTINEL;
            Date.prototype.cljs$core$Inst$inst_ms_STAR_$arity$1 = function(inst) {
              return this.getTime();
            };
            cljs.core.inst_ms = function(inst) {
              return cljs.core.inst_ms_STAR_(inst);
            };
            cljs.core.inst_QMARK_ = function(x) {
              return null != x ? cljs.core.PROTOCOL_SENTINEL === x.cljs$core$Inst$ ? !0 : x.cljs$lang$protocol_mask$partition$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x) : cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
            };
            goog.object.set(cljs.core.IEquiv, "number", !0);
            var G__5990_7576 = cljs.core._equiv, G__5991_7577 = "number", G__5992_7578 = function(G__5990_7576, G__5991_7577) {
              return function(x, o) {
                return x === o;
              };
            }();
            goog.object.set(G__5990_7576, G__5991_7577, G__5992_7578);
            goog.object.set(cljs.core.Fn, "function", !0);
            goog.object.set(cljs.core.IMeta, "function", !0);
            var G__5993_7579 = cljs.core._meta, G__5994_7580 = "function", G__5995_7581 = function(G__5993_7579, G__5994_7580) {
              return function(_) {
                return null;
              };
            }();
            goog.object.set(G__5993_7579, G__5994_7580, G__5995_7581);
            goog.object.set(cljs.core.IHash, "_", !0);
            var G__5996_7582 = cljs.core._hash, G__5997_7583 = "_", G__5998_7584 = function(G__5996_7582, G__5997_7583) {
              return function(o) {
                return goog.getUid(o);
              };
            }();
            goog.object.set(G__5996_7582, G__5997_7583, G__5998_7584);
            cljs.core.inc = function(x) {
              return x + 1;
            };
            cljs.core.Reduced = function(val) {
              this.val = val;
              this.cljs$lang$protocol_mask$partition0$ = 32768;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
              return this.val;
            };
            cljs.core.Reduced.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$val], null);
            };
            cljs.core.Reduced.cljs$lang$type = !0;
            cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
            cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Reduced");
            };
            cljs.core.__GT_Reduced = function(val) {
              return new cljs.core.Reduced(val);
            };
            cljs.core.reduced = function(x) {
              return new cljs.core.Reduced(x);
            };
            cljs.core.reduced_QMARK_ = function(r) {
              return r instanceof cljs.core.Reduced;
            };
            cljs.core.ensure_reduced = function(x) {
              return cljs.core.reduced_QMARK_(x) ? x : cljs.core.reduced(x);
            };
            cljs.core.unreduced = function(x) {
              return cljs.core.reduced_QMARK_(x) ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x) : x;
            };
            cljs.core.deref = function(o) {
              return cljs.core._deref(o);
            };
            cljs.core.ci_reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
              var cnt = cljs.core._count(cicoll);
              if (0 === cnt) {
                return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
              }
              for (var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0), n = 1;;) {
                if (n < cnt) {
                  var G__6002 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
                  val = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val, G__6002) : f.call(null, val, G__6002);
                  if (cljs.core.reduced_QMARK_(val)) {
                    return cljs.core.deref(val);
                  }
                  n += 1;
                } else {
                  return val;
                }
              }
            };
            cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
              var cnt = cljs.core._count(cicoll), val__$1 = val;
              for (val = 0;;) {
                if (val < cnt) {
                  var G__6004 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, val);
                  val__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val__$1, G__6004) : f.call(null, val__$1, G__6004);
                  if (cljs.core.reduced_QMARK_(val__$1)) {
                    return cljs.core.deref(val__$1);
                  }
                  val += 1;
                } else {
                  return val__$1;
                }
              }
            };
            cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
              for (var cnt = cljs.core._count(cicoll);;) {
                if (idx < cnt) {
                  var G__6006 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, idx);
                  val = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val, G__6006) : f.call(null, val, G__6006);
                  if (cljs.core.reduced_QMARK_(val)) {
                    return cljs.core.deref(val);
                  }
                  idx += 1;
                } else {
                  return val;
                }
              }
            };
            cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
            cljs.core.array_reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
              var cnt = arr.length;
              if (0 === arr.length) {
                return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
              }
              for (var val = arr[0], n = 1;;) {
                if (n < cnt) {
                  var G__6010 = arr[n];
                  val = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val, G__6010) : f.call(null, val, G__6010);
                  if (cljs.core.reduced_QMARK_(val)) {
                    return cljs.core.deref(val);
                  }
                  n += 1;
                } else {
                  return val;
                }
              }
            };
            cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
              var cnt = arr.length, val__$1 = val;
              for (val = 0;;) {
                if (val < cnt) {
                  var G__6012 = arr[val];
                  val__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val__$1, G__6012) : f.call(null, val__$1, G__6012);
                  if (cljs.core.reduced_QMARK_(val__$1)) {
                    return cljs.core.deref(val__$1);
                  }
                  val += 1;
                } else {
                  return val__$1;
                }
              }
            };
            cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
              for (var cnt = arr.length;;) {
                if (idx < cnt) {
                  var G__6014 = arr[idx];
                  val = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val, G__6014) : f.call(null, val, G__6014);
                  if (cljs.core.reduced_QMARK_(val)) {
                    return cljs.core.deref(val);
                  }
                  idx += 1;
                } else {
                  return val;
                }
              }
            };
            cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
            cljs.core.counted_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICounted$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x) : cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
            };
            cljs.core.indexed_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIndexed$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
            };
            cljs.core._indexOf = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
              return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
            };
            cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
              var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
              if (start >= len) {
                return -1;
              }
              !(0 < start) && 0 > start && (start += len, start = 0 > start ? 0 : start);
              for (;;) {
                if (start < len) {
                  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, start) : cljs.core.nth.call(null, coll, start), x)) {
                    return start;
                  }
                  start += 1;
                } else {
                  return -1;
                }
              }
            };
            cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
            cljs.core._lastIndexOf = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
              return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
            };
            cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
              var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
              if (0 === len) {
                return -1;
              }
              0 < start ? (--len, start = len < start ? len : start) : start = 0 > start ? len + start : start;
              for (;;) {
                if (0 <= start) {
                  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, start) : cljs.core.nth.call(null, coll, start), x)) {
                    return start;
                  }
                  --start;
                } else {
                  return -1;
                }
              }
            };
            cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
            cljs.core.IndexedSeqIterator = function(arr, i) {
              this.arr = arr;
              this.i = i;
            };
            cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
              return this.i < this.arr.length;
            };
            cljs.core.IndexedSeqIterator.prototype.next = function() {
              var ret = this.arr[this.i];
              this.i += 1;
              return ret;
            };
            cljs.core.IndexedSeqIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.IndexedSeqIterator.cljs$lang$type = !0;
            cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
            cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/IndexedSeqIterator");
            };
            cljs.core.__GT_IndexedSeqIterator = function(arr, i) {
              return new cljs.core.IndexedSeqIterator(arr, i);
            };
            cljs.core.IndexedSeq = function(arr, i, meta) {
              this.arr = arr;
              this.i = i;
              this.meta = meta;
              this.cljs$lang$protocol_mask$partition0$ = 166592766;
              this.cljs$lang$protocol_mask$partition1$ = 139264;
            };
            cljs.core.IndexedSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.IndexedSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.IndexedSeq.prototype.indexOf = function() {
              var G__7603 = null, G__7603__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7603__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7603 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7603__1.call(this, x);
                  case 2:
                    return G__7603__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7603.cljs$core$IFn$_invoke$arity$1 = G__7603__1;
              G__7603.cljs$core$IFn$_invoke$arity$2 = G__7603__2;
              return G__7603;
            }();
            cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
              var G__7604 = null, G__7604__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.count.call(null, this));
              }, G__7604__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7604 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7604__1.call(this, x);
                  case 2:
                    return G__7604__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7604.cljs$core$IFn$_invoke$arity$1 = G__7604__1;
              G__7604.cljs$core$IFn$_invoke$arity$2 = G__7604__2;
              return G__7604;
            }();
            cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
              coll = n + this.i;
              if (0 <= coll && coll < this.arr.length) {
                return this.arr[coll];
              }
              throw Error("Index out of bounds");
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
              coll = n + this.i;
              return 0 <= coll && coll < this.arr.length ? this.arr[coll] : not_found;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.IndexedSeqIterator(this.arr, this.i);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.IndexedSeq(this.arr, this.i, this.meta);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
              return this.i + 1 < this.arr.length ? new cljs.core.IndexedSeq(this.arr, this.i + 1, null) : null;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
              _ = this.arr.length - this.i;
              return 0 > _ ? 0 : _;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
              coll = this.cljs$core$ICounted$_count$arity$1(null);
              return 0 < coll ? new cljs.core.RSeq(this, coll - 1, null) : null;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.hash_ordered_coll(this);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(this, other) : cljs.core.equiv_sequential.call(null, this, other);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(this.arr, f, this.arr[this.i], this.i + 1);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(this.arr, f, start, this.i);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
              return this.arr[this.i];
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
              return this.i + 1 < this.arr.length ? new cljs.core.IndexedSeq(this.arr, this.i + 1, null) : cljs.core.List.EMPTY;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
              return this.i < this.arr.length ? this : null;
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.IndexedSeq(this.arr, this.i, new_meta);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, this) : cljs.core.cons.call(null, o, this);
            };
            cljs.core.IndexedSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs$cst$symbol$i, cljs$cst$symbol$meta], null);
            };
            cljs.core.IndexedSeq.cljs$lang$type = !0;
            cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
            cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/IndexedSeq");
            };
            cljs.core.__GT_IndexedSeq = function(arr, i, meta) {
              return new cljs.core.IndexedSeq(arr, i, meta);
            };
            var G__6021_7605 = cljs.core.IndexedSeq.prototype, G__6022_7606 = cljs.core.ITER_SYMBOL, G__6023_7607 = function(G__6021_7605, G__6022_7606) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6021_7605, G__6022_7606, G__6023_7607);
            cljs.core.prim_seq = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
              return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
            };
            cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
              return i < prim.length ? new cljs.core.IndexedSeq(prim, i, null) : null;
            };
            cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
            cljs.core.array_seq = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
              return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
            };
            cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
              return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
            };
            cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
            cljs.core.RSeq = function(ci, i, meta) {
              this.ci = ci;
              this.i = i;
              this.meta = meta;
              this.cljs$lang$protocol_mask$partition0$ = 32374990;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.RSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.RSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.RSeq.prototype.indexOf = function() {
              var G__7610 = null, G__7610__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7610__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7610 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7610__1.call(this, x);
                  case 2:
                    return G__7610__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7610.cljs$core$IFn$_invoke$arity$1 = G__7610__1;
              G__7610.cljs$core$IFn$_invoke$arity$2 = G__7610__2;
              return G__7610;
            }();
            cljs.core.RSeq.prototype.lastIndexOf = function() {
              var G__7611 = null, G__7611__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.count.call(null, this));
              }, G__7611__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7611 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7611__1.call(this, x);
                  case 2:
                    return G__7611__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7611.cljs$core$IFn$_invoke$arity$1 = G__7611__1;
              G__7611.cljs$core$IFn$_invoke$arity$2 = G__7611__2;
              return G__7611;
            }();
            cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.RSeq(this.ci, this.i, this.meta);
            };
            cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return 0 < this.i ? new cljs.core.RSeq(this.ci, this.i - 1, null) : null;
            };
            cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.i + 1;
            };
            cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.hash_ordered_coll(this);
            };
            cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(this, other) : cljs.core.equiv_sequential.call(null, this, other);
            };
            cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this) : cljs.core.seq_reduce.call(null, f, this);
            };
            cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this) : cljs.core.seq_reduce.call(null, f, start, this);
            };
            cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(this.ci, this.i);
            };
            cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return 0 < this.i ? new cljs.core.RSeq(this.ci, this.i - 1, null) : cljs.core.List.EMPTY;
            };
            cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.RSeq(this.ci, this.i, new_meta);
            };
            cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, this) : cljs.core.cons.call(null, o, this);
            };
            cljs.core.RSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$ci, cljs$cst$symbol$i, cljs$cst$symbol$meta], null);
            };
            cljs.core.RSeq.cljs$lang$type = !0;
            cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
            cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RSeq");
            };
            cljs.core.__GT_RSeq = function(ci, i, meta) {
              return new cljs.core.RSeq(ci, i, meta);
            };
            var G__6028_7612 = cljs.core.RSeq.prototype, G__6029_7613 = cljs.core.ITER_SYMBOL, G__6030_7614 = function(G__6028_7612, G__6029_7613) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6028_7612, G__6029_7613, G__6030_7614);
            cljs.core.second = function(coll) {
              return cljs.core.first(cljs.core.next(coll));
            };
            cljs.core.ffirst = function(coll) {
              return cljs.core.first(cljs.core.first(coll));
            };
            cljs.core.nfirst = function(coll) {
              return cljs.core.next(cljs.core.first(coll));
            };
            cljs.core.fnext = function(coll) {
              return cljs.core.first(cljs.core.next(coll));
            };
            cljs.core.nnext = function(coll) {
              return cljs.core.next(cljs.core.next(coll));
            };
            cljs.core.last = function(s) {
              for (;;) {
                var sn = cljs.core.next(s);
                if (null != sn) {
                  s = sn;
                } else {
                  return cljs.core.first(s);
                }
              }
            };
            goog.object.set(cljs.core.IEquiv, "_", !0);
            var G__6031_7616 = cljs.core._equiv, G__6032_7617 = "_", G__6033_7618 = function(G__6031_7616, G__6032_7617) {
              return function(x, o) {
                return x === o;
              };
            }();
            goog.object.set(G__6031_7616, G__6032_7617, G__6033_7618);
            cljs.core.conj = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7620 = arguments.length, i__4731__auto___7621 = 0;;) {
                    if (i__4731__auto___7621 < len__4730__auto___7620) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7621]), i__4731__auto___7621 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.PersistentVector.EMPTY;
            };
            cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return coll;
            };
            cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
              return null != coll ? cljs.core._conj(coll, x) : new cljs.core.List(null, x, null, 1, null);
            };
            cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
              for (;;) {
                if (cljs.core.truth_(xs)) {
                  coll = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x), x = cljs.core.first(xs), xs = cljs.core.next(xs);
                } else {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
                }
              }
            };
            cljs.core.conj.cljs$lang$applyTo = function(seq6035) {
              var G__6036 = cljs.core.first(seq6035), seq6035__$1 = cljs.core.next(seq6035);
              seq6035 = cljs.core.first(seq6035__$1);
              seq6035__$1 = cljs.core.next(seq6035__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6036, seq6035, seq6035__$1);
            };
            cljs.core.conj.cljs$lang$maxFixedArity = 2;
            cljs.core.empty = function(coll) {
              return null == coll ? null : null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 4 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IEmptyableCollection$) ? cljs.core._empty(coll) : (null != coll ? coll.cljs$lang$protocol_mask$partition0$ & 4 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IEmptyableCollection$ || (coll.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IEmptyableCollection, coll)) : cljs.core.native_satisfies_QMARK_(cljs.core.IEmptyableCollection, 
              coll)) ? cljs.core._empty(coll) : null;
            };
            cljs.core.accumulating_seq_count = function(coll) {
              coll = cljs.core.seq(coll);
              for (var acc = 0;;) {
                if (cljs.core.counted_QMARK_(coll)) {
                  return acc + cljs.core._count(coll);
                }
                coll = cljs.core.next(coll);
                acc += 1;
              }
            };
            cljs.core.count = function(coll) {
              return null != coll ? null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ICounted$) ? cljs.core._count(coll) : cljs.core.array_QMARK_(coll) ? coll.length : "string" === typeof coll ? coll.length : null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$) ? cljs.core.accumulating_seq_count(coll) : cljs.core._count(coll) : 0;
            };
            cljs.core.linear_traversal_nth = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
              for (;;) {
                if (null == coll) {
                  throw Error("Index out of bounds");
                }
                if (0 === n) {
                  if (cljs.core.seq(coll)) {
                    return cljs.core.first(coll);
                  }
                  throw Error("Index out of bounds");
                }
                if (cljs.core.indexed_QMARK_(coll)) {
                  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                }
                if (cljs.core.seq(coll)) {
                  coll = cljs.core.next(coll), --n;
                } else {
                  throw Error("Index out of bounds");
                }
              }
            };
            cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
              for (;;) {
                if (null == coll) {
                  return not_found;
                }
                if (0 === n) {
                  return cljs.core.seq(coll) ? cljs.core.first(coll) : not_found;
                }
                if (cljs.core.indexed_QMARK_(coll)) {
                  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                }
                if (cljs.core.seq(coll)) {
                  coll = cljs.core.next(coll), --n;
                } else {
                  return not_found;
                }
              }
            };
            cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
            cljs.core.nth = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
              if ("number" !== typeof n) {
                throw Error("Index argument to nth must be a number");
              }
              if (null == coll) {
                return coll;
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              }
              if (cljs.core.array_QMARK_(coll)) {
                if (-1 < n && n < coll.length) {
                  return coll[n | 0];
                }
                throw Error("Index out of bounds");
              }
              if ("string" === typeof coll) {
                if (-1 < n && n < coll.length) {
                  return coll.charAt(n | 0);
                }
                throw Error("Index out of bounds");
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) || null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISequential$)) {
                if (0 > n) {
                  throw Error("Index out of bounds");
                }
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              }
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              }
              throw Error(["nth not supported on this type ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
            };
            cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
              if ("number" !== typeof n) {
                throw Error("Index argument to nth must be a number.");
              }
              if (null == coll) {
                return not_found;
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              }
              if (cljs.core.array_QMARK_(coll)) {
                return -1 < n && n < coll.length ? coll[n | 0] : not_found;
              }
              if ("string" === typeof coll) {
                return -1 < n && n < coll.length ? coll.charAt(n | 0) : not_found;
              }
              if (null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) || null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISequential$)) {
                return 0 > n ? not_found : cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              }
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              }
              throw Error(["nth not supported on this type ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
            };
            cljs.core.nth.cljs$lang$maxFixedArity = 3;
            cljs.core.nthrest = function(coll, n) {
              for (var xs = coll;;) {
                if (coll = 0 < n && cljs.core.seq(xs)) {
                  --n, xs = coll = cljs.core.rest(coll);
                } else {
                  return xs;
                }
              }
            };
            cljs.core.get = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
              return null == o ? null : null != o && (o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$) ? cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k) : cljs.core.array_QMARK_(o) ? null != k && k < o.length ? o[k | 0] : null : "string" === typeof o ? null != k && k < o.length ? o.charAt(k | 0) : null : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o) ? cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k) : null;
            };
            cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
              return null != o ? null != o && (o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$) ? cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : cljs.core.array_QMARK_(o) ? null != k && -1 < k && k < o.length ? o[k | 0] : not_found : "string" === typeof o ? null != k && -1 < k && k < o.length ? o.charAt(k | 0) : not_found : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o) ? cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : 
              not_found : not_found;
            };
            cljs.core.get.cljs$lang$maxFixedArity = 3;
            cljs.core.assoc = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7639 = arguments.length, i__4731__auto___7640 = 0;;) {
                    if (i__4731__auto___7640 < len__4730__auto___7639) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7640]), i__4731__auto___7640 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
              return null != coll ? cljs.core._assoc(coll, k, v) : cljs.core.PersistentArrayMap.createAsIfByAssoc([k, v]);
            };
            cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
              for (;;) {
                if (coll = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v), cljs.core.truth_(kvs)) {
                  k = cljs.core.first(kvs), v = cljs.core.second(kvs), kvs = cljs.core.nnext(kvs);
                } else {
                  return coll;
                }
              }
            };
            cljs.core.assoc.cljs$lang$applyTo = function(seq6060) {
              var G__6061 = cljs.core.first(seq6060), seq6060__$1 = cljs.core.next(seq6060);
              seq6060 = cljs.core.first(seq6060__$1);
              var seq6060__$2 = cljs.core.next(seq6060__$1);
              seq6060__$1 = cljs.core.first(seq6060__$2);
              seq6060__$2 = cljs.core.next(seq6060__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6061, seq6060, seq6060__$1, seq6060__$2);
            };
            cljs.core.assoc.cljs$lang$maxFixedArity = 3;
            cljs.core.dissoc = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7647 = arguments.length, i__4731__auto___7648 = 0;;) {
                    if (i__4731__auto___7648 < len__4730__auto___7647) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7648]), i__4731__auto___7648 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return coll;
            };
            cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
              return null == coll ? null : cljs.core._dissoc(coll, k);
            };
            cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
              for (;;) {
                if (null == coll) {
                  return null;
                }
                coll = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
                if (cljs.core.truth_(ks)) {
                  k = cljs.core.first(ks), ks = cljs.core.next(ks);
                } else {
                  return coll;
                }
              }
            };
            cljs.core.dissoc.cljs$lang$applyTo = function(seq6066) {
              var G__6067 = cljs.core.first(seq6066), seq6066__$1 = cljs.core.next(seq6066);
              seq6066 = cljs.core.first(seq6066__$1);
              seq6066__$1 = cljs.core.next(seq6066__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6067, seq6066, seq6066__$1);
            };
            cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
            cljs.core.fn_QMARK_ = function(f) {
              var or__4131__auto__ = goog.isFunction(f);
              return or__4131__auto__ ? or__4131__auto__ : null != f ? cljs.core.PROTOCOL_SENTINEL === f.cljs$core$Fn$ ? !0 : f.cljs$lang$protocol_mask$partition$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f) : cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
            };
            cljs.core.MetaFn = function(afn, meta) {
              this.afn = afn;
              this.meta = meta;
              this.cljs$lang$protocol_mask$partition0$ = 393217;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
              return this.meta;
            };
            cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
              return new cljs.core.MetaFn(this.afn, new_meta);
            };
            cljs.core.MetaFn.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.MetaFn.prototype.call = function() {
              var G__7653 = null, G__7653__1 = function(self__) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
              }, G__7653__2 = function(self__, a) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
              }, G__7653__3 = function(self__, a, b) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
              }, G__7653__4 = function(self__, a, b, c) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
              }, G__7653__5 = function(self__, a, b, c, d) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
              }, G__7653__6 = function(self__, a, b, c, d, e) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
              }, G__7653__7 = function(self__, a, b, c, d, e, f) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
              }, G__7653__8 = function(self__, a, b, c, d, e, f, g) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
              }, G__7653__9 = function(self__, a, b, c, d, e, f, g, h) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
              }, G__7653__10 = function(self__, a, b, c, d, e, f, g, h, i) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
              }, G__7653__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
              }, G__7653__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
              }, G__7653__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
              }, G__7653__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }, G__7653__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }, G__7653__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }, G__7653__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }, G__7653__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }, G__7653__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }, G__7653__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }, G__7653__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
                self__ = this;
                return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }, G__7653__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                self__ = this;
                return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
              };
              G__7653 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                switch(arguments.length) {
                  case 1:
                    return G__7653__1.call(this, self__);
                  case 2:
                    return G__7653__2.call(this, self__, a);
                  case 3:
                    return G__7653__3.call(this, self__, a, b);
                  case 4:
                    return G__7653__4.call(this, self__, a, b, c);
                  case 5:
                    return G__7653__5.call(this, self__, a, b, c, d);
                  case 6:
                    return G__7653__6.call(this, self__, a, b, c, d, e);
                  case 7:
                    return G__7653__7.call(this, self__, a, b, c, d, e, f);
                  case 8:
                    return G__7653__8.call(this, self__, a, b, c, d, e, f, g);
                  case 9:
                    return G__7653__9.call(this, self__, a, b, c, d, e, f, g, h);
                  case 10:
                    return G__7653__10.call(this, self__, a, b, c, d, e, f, g, h, i);
                  case 11:
                    return G__7653__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
                  case 12:
                    return G__7653__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
                  case 13:
                    return G__7653__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
                  case 14:
                    return G__7653__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
                  case 15:
                    return G__7653__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
                  case 16:
                    return G__7653__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
                  case 17:
                    return G__7653__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                  case 18:
                    return G__7653__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
                  case 19:
                    return G__7653__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
                  case 20:
                    return G__7653__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
                  case 21:
                    return G__7653__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                  case 22:
                    return G__7653__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__7653.cljs$core$IFn$_invoke$arity$1 = G__7653__1;
              G__7653.cljs$core$IFn$_invoke$arity$2 = G__7653__2;
              G__7653.cljs$core$IFn$_invoke$arity$3 = G__7653__3;
              G__7653.cljs$core$IFn$_invoke$arity$4 = G__7653__4;
              G__7653.cljs$core$IFn$_invoke$arity$5 = G__7653__5;
              G__7653.cljs$core$IFn$_invoke$arity$6 = G__7653__6;
              G__7653.cljs$core$IFn$_invoke$arity$7 = G__7653__7;
              G__7653.cljs$core$IFn$_invoke$arity$8 = G__7653__8;
              G__7653.cljs$core$IFn$_invoke$arity$9 = G__7653__9;
              G__7653.cljs$core$IFn$_invoke$arity$10 = G__7653__10;
              G__7653.cljs$core$IFn$_invoke$arity$11 = G__7653__11;
              G__7653.cljs$core$IFn$_invoke$arity$12 = G__7653__12;
              G__7653.cljs$core$IFn$_invoke$arity$13 = G__7653__13;
              G__7653.cljs$core$IFn$_invoke$arity$14 = G__7653__14;
              G__7653.cljs$core$IFn$_invoke$arity$15 = G__7653__15;
              G__7653.cljs$core$IFn$_invoke$arity$16 = G__7653__16;
              G__7653.cljs$core$IFn$_invoke$arity$17 = G__7653__17;
              G__7653.cljs$core$IFn$_invoke$arity$18 = G__7653__18;
              G__7653.cljs$core$IFn$_invoke$arity$19 = G__7653__19;
              G__7653.cljs$core$IFn$_invoke$arity$20 = G__7653__20;
              G__7653.cljs$core$IFn$_invoke$arity$21 = G__7653__21;
              G__7653.cljs$core$IFn$_invoke$arity$22 = G__7653__22;
              return G__7653;
            }();
            cljs.core.MetaFn.prototype.apply = function(self__, args6072) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6072)));
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
              return this.afn.cljs$core$IFn$_invoke$arity$0 ? this.afn.cljs$core$IFn$_invoke$arity$0() : this.afn.call(null);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
              return this.afn.cljs$core$IFn$_invoke$arity$1 ? this.afn.cljs$core$IFn$_invoke$arity$1(a) : this.afn.call(null, a);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
              return this.afn.cljs$core$IFn$_invoke$arity$2 ? this.afn.cljs$core$IFn$_invoke$arity$2(a, b) : this.afn.call(null, a, b);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
              return this.afn.cljs$core$IFn$_invoke$arity$3 ? this.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : this.afn.call(null, a, b, c);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
              return this.afn.cljs$core$IFn$_invoke$arity$4 ? this.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : this.afn.call(null, a, b, c, d);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
              return this.afn.cljs$core$IFn$_invoke$arity$5 ? this.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : this.afn.call(null, a, b, c, d, e);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
              return this.afn.cljs$core$IFn$_invoke$arity$6 ? this.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : this.afn.call(null, a, b, c, d, e, f);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
              return this.afn.cljs$core$IFn$_invoke$arity$7 ? this.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : this.afn.call(null, a, b, c, d, e, f, g);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
              return this.afn.cljs$core$IFn$_invoke$arity$8 ? this.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : this.afn.call(null, a, b, c, d, e, f, g, h);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
              return this.afn.cljs$core$IFn$_invoke$arity$9 ? this.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : this.afn.call(null, a, b, c, d, e, f, g, h, i);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
              return this.afn.cljs$core$IFn$_invoke$arity$10 ? this.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
              return this.afn.cljs$core$IFn$_invoke$arity$11 ? this.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
              return this.afn.cljs$core$IFn$_invoke$arity$12 ? this.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
              return this.afn.cljs$core$IFn$_invoke$arity$13 ? this.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
              return this.afn.cljs$core$IFn$_invoke$arity$14 ? this.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
              return this.afn.cljs$core$IFn$_invoke$arity$15 ? this.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
              return this.afn.cljs$core$IFn$_invoke$arity$16 ? this.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
              return this.afn.cljs$core$IFn$_invoke$arity$17 ? this.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
              return this.afn.cljs$core$IFn$_invoke$arity$18 ? this.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
              return this.afn.cljs$core$IFn$_invoke$arity$19 ? this.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
              return this.afn.cljs$core$IFn$_invoke$arity$20 ? this.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : this.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            };
            cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(this.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, this.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
            };
            cljs.core.MetaFn.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$afn, cljs$cst$symbol$meta], null);
            };
            cljs.core.MetaFn.cljs$lang$type = !0;
            cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
            cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/MetaFn");
            };
            cljs.core.__GT_MetaFn = function(afn, meta) {
              return new cljs.core.MetaFn(afn, meta);
            };
            cljs.core.with_meta = function(o, meta) {
              return goog.isFunction(o) ? new cljs.core.MetaFn(o, meta) : null == o ? null : cljs.core._with_meta(o, meta);
            };
            cljs.core.meta = function(o) {
              var and__4120__auto__ = null != o;
              return (and__4120__auto__ ? null != o ? o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$ || (o.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o)) : cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o) : and__4120__auto__) ? cljs.core._meta(o) : null;
            };
            cljs.core.peek = function(coll) {
              return null == coll ? null : cljs.core._peek(coll);
            };
            cljs.core.pop = function(coll) {
              return null == coll ? null : cljs.core._pop(coll);
            };
            cljs.core.disj = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7655 = arguments.length, i__4731__auto___7656 = 0;;) {
                    if (i__4731__auto___7656 < len__4730__auto___7655) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7656]), i__4731__auto___7656 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return coll;
            };
            cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
              return null == coll ? null : cljs.core._disjoin(coll, k);
            };
            cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
              for (;;) {
                if (null == coll) {
                  return null;
                }
                coll = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
                if (cljs.core.truth_(ks)) {
                  k = cljs.core.first(ks), ks = cljs.core.next(ks);
                } else {
                  return coll;
                }
              }
            };
            cljs.core.disj.cljs$lang$applyTo = function(seq6076) {
              var G__6077 = cljs.core.first(seq6076), seq6076__$1 = cljs.core.next(seq6076);
              seq6076 = cljs.core.first(seq6076__$1);
              seq6076__$1 = cljs.core.next(seq6076__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6077, seq6076, seq6076__$1);
            };
            cljs.core.disj.cljs$lang$maxFixedArity = 2;
            cljs.core.empty_QMARK_ = function(coll) {
              return null == coll || cljs.core.not(cljs.core.seq(coll));
            };
            cljs.core.coll_QMARK_ = function(x) {
              return null == x ? !1 : null != x ? x.cljs$lang$protocol_mask$partition0$ & 8 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICollection$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x) : cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
            };
            cljs.core.set_QMARK_ = function(x) {
              return null == x ? !1 : null != x ? x.cljs$lang$protocol_mask$partition0$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x) : cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
            };
            cljs.core.associative_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IAssociative$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
            };
            cljs.core.ifind_QMARK_ = function(x) {
              return null != x ? cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IFind$ ? !0 : x.cljs$lang$protocol_mask$partition$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
            };
            cljs.core.sequential_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x) : cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
            };
            cljs.core.sorted_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 268435456 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISorted$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x) : cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
            };
            cljs.core.reduceable_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IReduce$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
            };
            cljs.core.map_QMARK_ = function(x) {
              return null == x ? !1 : null != x ? x.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
            };
            cljs.core.record_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 67108864 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IRecord$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
            };
            cljs.core.vector_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 16384 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
            };
            cljs.core.chunked_seq_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition1$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IChunkedSeq$ ? !0 : !1 : !1;
            };
            cljs.core.js_obj = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7662 = arguments.length, i__4731__auto___7663 = 0;;) {
                    if (i__4731__auto___7663 < len__4730__auto___7662) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7663]), i__4731__auto___7663 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(0), 0, null);
                  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(args_arr__4751__auto__);
              }
            };
            cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
              return {};
            };
            cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
            };
            cljs.core.js_obj.cljs$lang$applyTo = function(seq6092) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq6092));
            };
            cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
            cljs.core.js_keys = function(obj) {
              return goog.object.getKeys(obj);
            };
            cljs.core.js_delete = function(obj, key) {
              return delete obj[key];
            };
            cljs.core.array_copy = function(from, i, to, j, len) {
              for (;;) {
                if (0 === len) {
                  return to;
                }
                to[j] = from[i];
                j += 1;
                --len;
                i += 1;
              }
            };
            cljs.core.array_copy_downward = function(from, i, to, j, len) {
              i += len - 1;
              for (j += len - 1;;) {
                if (0 === len) {
                  return to;
                }
                to[j] = from[i];
                --j;
                --len;
                --i;
              }
            };
            cljs.core.lookup_sentinel = {};
            cljs.core.false_QMARK_ = function(x) {
              return !1 === x;
            };
            cljs.core.true_QMARK_ = function(x) {
              return !0 === x;
            };
            cljs.core.boolean_QMARK_ = function(x) {
              return !0 === x || !1 === x;
            };
            cljs.core.undefined_QMARK_ = function(x) {
              return void 0 === x;
            };
            cljs.core.seq_QMARK_ = function(s) {
              return null == s ? !1 : null != s ? s.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeq$ ? !0 : s.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s) : cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
            };
            cljs.core.seqable_QMARK_ = function(s) {
              var or__4131__auto__ = null == s;
              return or__4131__auto__ ? or__4131__auto__ : (or__4131__auto__ = null != s ? s.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeqable$ ? !0 : s.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s) : cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s)) ? or__4131__auto__ : cljs.core.array_QMARK_(s) || "string" === typeof s;
            };
            cljs.core.boolean$ = function(x) {
              return null == x ? !1 : !1 === x ? !1 : !0;
            };
            cljs.core.ifn_QMARK_ = function(f) {
              var or__4131__auto__ = cljs.core.fn_QMARK_(f);
              return or__4131__auto__ ? or__4131__auto__ : null != f ? f.cljs$lang$protocol_mask$partition0$ & 1 || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$IFn$ ? !0 : f.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f) : cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
            };
            cljs.core.integer_QMARK_ = function(n) {
              return "number" === typeof n && !isNaN(n) && Infinity !== n && parseFloat(n) === parseInt(n, 10);
            };
            cljs.core.int_QMARK_ = function(x) {
              return cljs.core.integer_QMARK_(x) || x instanceof goog.math.Integer || x instanceof goog.math.Long;
            };
            cljs.core.pos_int_QMARK_ = function(x) {
              return cljs.core.integer_QMARK_(x) ? 0 < x : x instanceof goog.math.Integer ? cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero()) : x instanceof goog.math.Long ? cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero()) : !1;
            };
            cljs.core.neg_int_QMARK_ = function(x) {
              return cljs.core.integer_QMARK_(x) ? 0 > x : x instanceof goog.math.Integer ? x.isNegative() : x instanceof goog.math.Long ? x.isNegative() : !1;
            };
            cljs.core.nat_int_QMARK_ = function(x) {
              return cljs.core.integer_QMARK_(x) ? !(0 > x) : x instanceof goog.math.Integer ? cljs.core.not(x.isNegative()) : x instanceof goog.math.Long ? cljs.core.not(x.isNegative()) : !1;
            };
            cljs.core.float_QMARK_ = function(x) {
              return "number" === typeof x;
            };
            cljs.core.double_QMARK_ = function(x) {
              return "number" === typeof x;
            };
            cljs.core.infinite_QMARK_ = function(x) {
              return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
            };
            cljs.core.contains_QMARK_ = function(coll, v) {
              return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? !1 : !0;
            };
            cljs.core.find = function(coll, k) {
              return cljs.core.ifind_QMARK_(coll) ? cljs.core._find(coll, k) : null != coll && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k) ? new cljs.core.MapEntry(k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k), null) : null;
            };
            cljs.core.distinct_QMARK_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7672 = arguments.length, i__4731__auto___7673 = 0;;) {
                    if (i__4731__auto___7673 < len__4730__auto___7672) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7673]), i__4731__auto___7673 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
            };
            cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
                return !1;
              }
              x = cljs.core.PersistentHashSet.createAsIfByAssoc([x, y]);
              for (y = more;;) {
                var x__$1 = cljs.core.first(y);
                more = cljs.core.next(y);
                if (cljs.core.truth_(y)) {
                  if (cljs.core.contains_QMARK_(x, x__$1)) {
                    return !1;
                  }
                  x = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(x, x__$1);
                  y = more;
                } else {
                  return !0;
                }
              }
            };
            cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq6105) {
              var G__6106 = cljs.core.first(seq6105), seq6105__$1 = cljs.core.next(seq6105);
              seq6105 = cljs.core.first(seq6105__$1);
              seq6105__$1 = cljs.core.next(seq6105__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6106, seq6105, seq6105__$1);
            };
            cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
            cljs.core.compare = function(x, y) {
              if (x === y) {
                return 0;
              }
              if (null == x) {
                return -1;
              }
              if (null == y) {
                return 1;
              }
              if ("number" === typeof x) {
                if ("number" === typeof y) {
                  return goog.array.defaultCompare(x, y);
                }
                throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
              }
              if (null != x ? x.cljs$lang$protocol_mask$partition1$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IComparable$ || (x.cljs$lang$protocol_mask$partition1$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
                return cljs.core._compare(x, y);
              }
              if ("string" !== typeof x && !cljs.core.array_QMARK_(x) && !0 !== x && !1 !== x || cljs.core.type(x) !== cljs.core.type(y)) {
                throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
              }
              return goog.array.defaultCompare(x, y);
            };
            cljs.core.compare_indexed = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 4:
                  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
              var xl = cljs.core.count(xs), yl = cljs.core.count(ys);
              return xl < yl ? -1 : xl > yl ? 1 : 0 === xl ? 0 : cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
            };
            cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
              for (;;) {
                var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
                if (0 === d && n + 1 < len) {
                  n += 1;
                } else {
                  return d;
                }
              }
            };
            cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
            cljs.core.fn__GT_comparator = function(f) {
              return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare) ? cljs.core.compare : function(x, y) {
                var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
                return "number" === typeof r ? r : cljs.core.truth_(r) ? -1 : cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x)) ? 1 : 0;
              };
            };
            cljs.core.sort = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
            };
            cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
              return cljs.core.seq(coll) ? (coll = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll), comp = cljs.core.fn__GT_comparator(comp), goog.array.stableSort(coll, comp), cljs.core.seq(coll)) : cljs.core.List.EMPTY;
            };
            cljs.core.sort.cljs$lang$maxFixedArity = 2;
            cljs.core.sort_by = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
              return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
            };
            cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
              return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
                x = keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x);
                y = keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y);
                var fexpr__6118 = cljs.core.fn__GT_comparator(comp);
                return fexpr__6118.cljs$core$IFn$_invoke$arity$2 ? fexpr__6118.cljs$core$IFn$_invoke$arity$2(x, y) : fexpr__6118.call(null, x, y);
              }, coll);
            };
            cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
            cljs.core.seq_reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              var temp__5733__auto__ = cljs.core.seq(coll);
              return temp__5733__auto__ ? (coll = cljs.core.first(temp__5733__auto__), temp__5733__auto__ = cljs.core.next(temp__5733__auto__), cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f, coll, temp__5733__auto__) : cljs.core.reduce.call(null, f, coll, temp__5733__auto__)) : f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
            };
            cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
              for (coll = cljs.core.seq(coll);;) {
                if (coll) {
                  var G__6127 = cljs.core.first(coll);
                  val = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(val, G__6127) : f.call(null, val, G__6127);
                  if (cljs.core.reduced_QMARK_(val)) {
                    return cljs.core.deref(val);
                  }
                  coll = cljs.core.next(coll);
                } else {
                  return val;
                }
              }
            };
            cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
            cljs.core.shuffle = function(coll) {
              coll = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
              goog.array.shuffle(coll);
              return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vec.call(null, coll);
            };
            cljs.core.iter_reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
              coll = cljs.core._iterator(coll);
              if (cljs.core.truth_(coll.hasNext())) {
                for (var acc = coll.next();;) {
                  if (coll.hasNext()) {
                    var G__6131 = coll.next();
                    acc = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(acc, G__6131) : f.call(null, acc, G__6131);
                    if (cljs.core.reduced_QMARK_(acc)) {
                      return cljs.core.deref(acc);
                    }
                  } else {
                    return acc;
                  }
                }
              } else {
                return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
              }
            };
            cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, init) {
              for (coll = cljs.core._iterator(coll);;) {
                if (coll.hasNext()) {
                  var G__6133 = coll.next();
                  init = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(init, G__6133) : f.call(null, init, G__6133);
                  if (cljs.core.reduced_QMARK_(init)) {
                    return cljs.core.deref(init);
                  }
                } else {
                  return init;
                }
              }
            };
            cljs.core.iter_reduce.cljs$lang$maxFixedArity = 3;
            cljs.core.reduce = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$) ? cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f) : cljs.core.array_QMARK_(coll) ? cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f) : "string" === typeof coll ? cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f) : cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll) ? cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f) : 
              cljs.core.iterable_QMARK_(coll) ? cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(coll, f) : cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
            };
            cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
              return null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$) ? cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val) : cljs.core.array_QMARK_(coll) ? cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val) : "string" === typeof coll ? cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val) : cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll) ? cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, 
              f, val) : cljs.core.iterable_QMARK_(coll) ? cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val) : cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
            };
            cljs.core.reduce.cljs$lang$maxFixedArity = 3;
            cljs.core.reduce_kv = function(f, init, coll) {
              return null != coll ? cljs.core._kv_reduce(coll, f, init) : init;
            };
            cljs.core.identity = function(x) {
              return x;
            };
            cljs.core.completing = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
            };
            cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
              return function() {
                var G__7694 = null, G__7694__0 = function() {
                  return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
                }, G__7694__1 = function(x) {
                  return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
                }, G__7694__2 = function(x, y) {
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
                };
                G__7694 = function(x, y) {
                  switch(arguments.length) {
                    case 0:
                      return G__7694__0.call(this);
                    case 1:
                      return G__7694__1.call(this, x);
                    case 2:
                      return G__7694__2.call(this, x, y);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__7694.cljs$core$IFn$_invoke$arity$0 = G__7694__0;
                G__7694.cljs$core$IFn$_invoke$arity$1 = G__7694__1;
                G__7694.cljs$core$IFn$_invoke$arity$2 = G__7694__2;
                return G__7694;
              }();
            };
            cljs.core.completing.cljs$lang$maxFixedArity = 2;
            cljs.core.transduce = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
              return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
            };
            cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
              xform = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
              init = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(xform, init, coll);
              return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(init) : xform.call(null, init);
            };
            cljs.core.transduce.cljs$lang$maxFixedArity = 4;
            cljs.core._PLUS_ = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7697 = arguments.length, i__4731__auto___7698 = 0;;) {
                    if (i__4731__auto___7698 < len__4730__auto___7697) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7698]), i__4731__auto___7698 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
              return 0;
            };
            cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x + y;
            };
            cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
            };
            cljs.core._PLUS_.cljs$lang$applyTo = function(seq6143) {
              var G__6144 = cljs.core.first(seq6143), seq6143__$1 = cljs.core.next(seq6143);
              seq6143 = cljs.core.first(seq6143__$1);
              seq6143__$1 = cljs.core.next(seq6143__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6144, seq6143, seq6143__$1);
            };
            cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
            cljs.core._ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7701 = arguments.length, i__4731__auto___7702 = 0;;) {
                    if (i__4731__auto___7702 < len__4730__auto___7701) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7702]), i__4731__auto___7702 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return -x;
            };
            cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x - y;
            };
            cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
            };
            cljs.core._.cljs$lang$applyTo = function(seq6148) {
              var G__6149 = cljs.core.first(seq6148), seq6148__$1 = cljs.core.next(seq6148);
              seq6148 = cljs.core.first(seq6148__$1);
              seq6148__$1 = cljs.core.next(seq6148__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6149, seq6148, seq6148__$1);
            };
            cljs.core._.cljs$lang$maxFixedArity = 2;
            cljs.core._STAR_ = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7705 = arguments.length, i__4731__auto___7706 = 0;;) {
                    if (i__4731__auto___7706 < len__4730__auto___7705) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7706]), i__4731__auto___7706 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
              return 1;
            };
            cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x * y;
            };
            cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
            };
            cljs.core._STAR_.cljs$lang$applyTo = function(seq6153) {
              var G__6154 = cljs.core.first(seq6153), seq6153__$1 = cljs.core.next(seq6153);
              seq6153 = cljs.core.first(seq6153__$1);
              seq6153__$1 = cljs.core.next(seq6153__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6154, seq6153, seq6153__$1);
            };
            cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
            cljs.core._SLASH_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7709 = arguments.length, i__4731__auto___7710 = 0;;) {
                    if (i__4731__auto___7710 < len__4730__auto___7709) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7710]), i__4731__auto___7710 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return 1 / x;
            };
            cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x / y;
            };
            cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
            };
            cljs.core._SLASH_.cljs$lang$applyTo = function(seq6158) {
              var G__6159 = cljs.core.first(seq6158), seq6158__$1 = cljs.core.next(seq6158);
              seq6158 = cljs.core.first(seq6158__$1);
              seq6158__$1 = cljs.core.next(seq6158__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6159, seq6158, seq6158__$1);
            };
            cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
            cljs.core._LT_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7713 = arguments.length, i__4731__auto___7714 = 0;;) {
                    if (i__4731__auto___7714 < len__4730__auto___7713) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7714]), i__4731__auto___7714 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x < y;
            };
            cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (x < y) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return y < cljs.core.first(more);
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._LT_.cljs$lang$applyTo = function(seq6163) {
              var G__6164 = cljs.core.first(seq6163), seq6163__$1 = cljs.core.next(seq6163);
              seq6163 = cljs.core.first(seq6163__$1);
              seq6163__$1 = cljs.core.next(seq6163__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6164, seq6163, seq6163__$1);
            };
            cljs.core._LT_.cljs$lang$maxFixedArity = 2;
            cljs.core._LT__EQ_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7720 = arguments.length, i__4731__auto___7721 = 0;;) {
                    if (i__4731__auto___7721 < len__4730__auto___7720) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7721]), i__4731__auto___7721 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x <= y;
            };
            cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (x <= y) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return y <= cljs.core.first(more);
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq6168) {
              var G__6169 = cljs.core.first(seq6168), seq6168__$1 = cljs.core.next(seq6168);
              seq6168 = cljs.core.first(seq6168__$1);
              seq6168__$1 = cljs.core.next(seq6168__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6169, seq6168, seq6168__$1);
            };
            cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
            cljs.core._GT_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7727 = arguments.length, i__4731__auto___7728 = 0;;) {
                    if (i__4731__auto___7728 < len__4730__auto___7727) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7728]), i__4731__auto___7728 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x > y;
            };
            cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (x > y) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return y > cljs.core.first(more);
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._GT_.cljs$lang$applyTo = function(seq6173) {
              var G__6174 = cljs.core.first(seq6173), seq6173__$1 = cljs.core.next(seq6173);
              seq6173 = cljs.core.first(seq6173__$1);
              seq6173__$1 = cljs.core.next(seq6173__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6174, seq6173, seq6173__$1);
            };
            cljs.core._GT_.cljs$lang$maxFixedArity = 2;
            cljs.core._GT__EQ_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7734 = arguments.length, i__4731__auto___7735 = 0;;) {
                    if (i__4731__auto___7735 < len__4730__auto___7734) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7735]), i__4731__auto___7735 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x >= y;
            };
            cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (x >= y) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return y >= cljs.core.first(more);
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq6178) {
              var G__6179 = cljs.core.first(seq6178), seq6178__$1 = cljs.core.next(seq6178);
              seq6178 = cljs.core.first(seq6178__$1);
              seq6178__$1 = cljs.core.next(seq6178__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6179, seq6178, seq6178__$1);
            };
            cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
            cljs.core.dec = function(x) {
              return x - 1;
            };
            cljs.core.max = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7741 = arguments.length, i__4731__auto___7742 = 0;;) {
                    if (i__4731__auto___7742 < len__4730__auto___7741) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7742]), i__4731__auto___7742 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x > y ? x : y;
            };
            cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, x > y ? x : y, more);
            };
            cljs.core.max.cljs$lang$applyTo = function(seq6183) {
              var G__6184 = cljs.core.first(seq6183), seq6183__$1 = cljs.core.next(seq6183);
              seq6183 = cljs.core.first(seq6183__$1);
              seq6183__$1 = cljs.core.next(seq6183__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6184, seq6183, seq6183__$1);
            };
            cljs.core.max.cljs$lang$maxFixedArity = 2;
            cljs.core.min = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7745 = arguments.length, i__4731__auto___7746 = 0;;) {
                    if (i__4731__auto___7746 < len__4730__auto___7745) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7746]), i__4731__auto___7746 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x < y ? x : y;
            };
            cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, x < y ? x : y, more);
            };
            cljs.core.min.cljs$lang$applyTo = function(seq6188) {
              var G__6189 = cljs.core.first(seq6188), seq6188__$1 = cljs.core.next(seq6188);
              seq6188 = cljs.core.first(seq6188__$1);
              seq6188__$1 = cljs.core.next(seq6188__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6189, seq6188, seq6188__$1);
            };
            cljs.core.min.cljs$lang$maxFixedArity = 2;
            cljs.core.byte$ = function(x) {
              return x;
            };
            cljs.core.char$ = function(x) {
              if ("number" === typeof x) {
                return String.fromCharCode(x);
              }
              if ("string" === typeof x && 1 === x.length) {
                return x;
              }
              throw Error("Argument to char must be a character or number");
            };
            cljs.core.short$ = function(x) {
              return x;
            };
            cljs.core.float$ = function(x) {
              return x;
            };
            cljs.core.double$ = function(x) {
              return x;
            };
            cljs.core.unchecked_byte = function(x) {
              return x;
            };
            cljs.core.unchecked_char = function(x) {
              return x;
            };
            cljs.core.unchecked_short = function(x) {
              return x;
            };
            cljs.core.unchecked_float = function(x) {
              return x;
            };
            cljs.core.unchecked_double = function(x) {
              return x;
            };
            cljs.core.unchecked_add = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7749 = arguments.length, i__4731__auto___7750 = 0;;) {
                    if (i__4731__auto___7750 < len__4730__auto___7749) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7750]), i__4731__auto___7750 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
              return 0;
            };
            cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x + y;
            };
            cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
            };
            cljs.core.unchecked_add.cljs$lang$applyTo = function(seq6193) {
              var G__6194 = cljs.core.first(seq6193), seq6193__$1 = cljs.core.next(seq6193);
              seq6193 = cljs.core.first(seq6193__$1);
              seq6193__$1 = cljs.core.next(seq6193__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6194, seq6193, seq6193__$1);
            };
            cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_add_int = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7753 = arguments.length, i__4731__auto___7754 = 0;;) {
                    if (i__4731__auto___7754 < len__4730__auto___7753) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7754]), i__4731__auto___7754 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
              return 0;
            };
            cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x + y;
            };
            cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
            };
            cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq6198) {
              var G__6199 = cljs.core.first(seq6198), seq6198__$1 = cljs.core.next(seq6198);
              seq6198 = cljs.core.first(seq6198__$1);
              seq6198__$1 = cljs.core.next(seq6198__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6199, seq6198, seq6198__$1);
            };
            cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_dec = function(x) {
              return x - 1;
            };
            cljs.core.unchecked_dec_int = function(x) {
              return x - 1;
            };
            cljs.core.unchecked_divide_int = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7757 = arguments.length, i__4731__auto___7758 = 0;;) {
                    if (i__4731__auto___7758 < len__4730__auto___7757) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7758]), i__4731__auto___7758 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return 1 / x;
            };
            cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x / y;
            };
            cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
            };
            cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq6203) {
              var G__6204 = cljs.core.first(seq6203), seq6203__$1 = cljs.core.next(seq6203);
              seq6203 = cljs.core.first(seq6203__$1);
              seq6203__$1 = cljs.core.next(seq6203__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6204, seq6203, seq6203__$1);
            };
            cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_inc = function(x) {
              return x + 1;
            };
            cljs.core.unchecked_inc_int = function(x) {
              return x + 1;
            };
            cljs.core.unchecked_multiply = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7761 = arguments.length, i__4731__auto___7762 = 0;;) {
                    if (i__4731__auto___7762 < len__4730__auto___7761) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7762]), i__4731__auto___7762 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
              return 1;
            };
            cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x * y;
            };
            cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
            };
            cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq6208) {
              var G__6209 = cljs.core.first(seq6208), seq6208__$1 = cljs.core.next(seq6208);
              seq6208 = cljs.core.first(seq6208__$1);
              seq6208__$1 = cljs.core.next(seq6208__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6209, seq6208, seq6208__$1);
            };
            cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_multiply_int = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7765 = arguments.length, i__4731__auto___7766 = 0;;) {
                    if (i__4731__auto___7766 < len__4730__auto___7765) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7766]), i__4731__auto___7766 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
              return 1;
            };
            cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return x;
            };
            cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x * y;
            };
            cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
            };
            cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq6213) {
              var G__6214 = cljs.core.first(seq6213), seq6213__$1 = cljs.core.next(seq6213);
              seq6213 = cljs.core.first(seq6213__$1);
              seq6213__$1 = cljs.core.next(seq6213__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6214, seq6213, seq6213__$1);
            };
            cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_negate = function(x) {
              return -x;
            };
            cljs.core.unchecked_negate_int = function(x) {
              return -x;
            };
            cljs.core.unchecked_remainder_int = function(x, n) {
              return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
            };
            cljs.core.unchecked_subtract = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7769 = arguments.length, i__4731__auto___7770 = 0;;) {
                    if (i__4731__auto___7770 < len__4730__auto___7769) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7770]), i__4731__auto___7770 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return -x;
            };
            cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x - y;
            };
            cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
            };
            cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq6218) {
              var G__6219 = cljs.core.first(seq6218), seq6218__$1 = cljs.core.next(seq6218);
              seq6218 = cljs.core.first(seq6218__$1);
              seq6218__$1 = cljs.core.next(seq6218__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6219, seq6218, seq6218__$1);
            };
            cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
            cljs.core.unchecked_subtract_int = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7773 = arguments.length, i__4731__auto___7774 = 0;;) {
                    if (i__4731__auto___7774 < len__4730__auto___7773) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7774]), i__4731__auto___7774 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return -x;
            };
            cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x - y;
            };
            cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
            };
            cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq6223) {
              var G__6224 = cljs.core.first(seq6223), seq6223__$1 = cljs.core.next(seq6223);
              seq6223 = cljs.core.first(seq6223__$1);
              seq6223__$1 = cljs.core.next(seq6223__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6224, seq6223, seq6223__$1);
            };
            cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
            cljs.core.fix = function(q) {
              return 0 <= q ? Math.floor(q) : Math.ceil(q);
            };
            cljs.core.int$ = function(x) {
              return x | 0;
            };
            cljs.core.unchecked_int = function(x) {
              return cljs.core.fix(x);
            };
            cljs.core.long$ = function(x) {
              return cljs.core.fix(x);
            };
            cljs.core.unchecked_long = function(x) {
              return cljs.core.fix(x);
            };
            cljs.core.booleans = function(x) {
              return x;
            };
            cljs.core.bytes = function(x) {
              return x;
            };
            cljs.core.chars = function(x) {
              return x;
            };
            cljs.core.shorts = function(x) {
              return x;
            };
            cljs.core.ints = function(x) {
              return x;
            };
            cljs.core.floats = function(x) {
              return x;
            };
            cljs.core.doubles = function(x) {
              return x;
            };
            cljs.core.longs = function(x) {
              return x;
            };
            cljs.core.js_mod = function(n, d) {
              return n % d;
            };
            cljs.core.mod = function(n, d) {
              return (n % d + d) % d;
            };
            cljs.core.quot = function(n, d) {
              return cljs.core.fix((n - n % d) / d);
            };
            cljs.core.rem = function(n, d) {
              var q = cljs.core.quot(n, d);
              return n - d * q;
            };
            cljs.core.bit_xor = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7777 = arguments.length, i__4731__auto___7778 = 0;;) {
                    if (i__4731__auto___7778 < len__4730__auto___7777) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7778]), i__4731__auto___7778 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x ^ y;
            };
            cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
            };
            cljs.core.bit_xor.cljs$lang$applyTo = function(seq6228) {
              var G__6229 = cljs.core.first(seq6228), seq6228__$1 = cljs.core.next(seq6228);
              seq6228 = cljs.core.first(seq6228__$1);
              seq6228__$1 = cljs.core.next(seq6228__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6229, seq6228, seq6228__$1);
            };
            cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
            cljs.core.bit_and = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7781 = arguments.length, i__4731__auto___7782 = 0;;) {
                    if (i__4731__auto___7782 < len__4730__auto___7781) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7782]), i__4731__auto___7782 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x & y;
            };
            cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
            };
            cljs.core.bit_and.cljs$lang$applyTo = function(seq6233) {
              var G__6234 = cljs.core.first(seq6233), seq6233__$1 = cljs.core.next(seq6233);
              seq6233 = cljs.core.first(seq6233__$1);
              seq6233__$1 = cljs.core.next(seq6233__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6234, seq6233, seq6233__$1);
            };
            cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
            cljs.core.bit_or = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7785 = arguments.length, i__4731__auto___7786 = 0;;) {
                    if (i__4731__auto___7786 < len__4730__auto___7785) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7786]), i__4731__auto___7786 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x | y;
            };
            cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
            };
            cljs.core.bit_or.cljs$lang$applyTo = function(seq6238) {
              var G__6239 = cljs.core.first(seq6238), seq6238__$1 = cljs.core.next(seq6238);
              seq6238 = cljs.core.first(seq6238__$1);
              seq6238__$1 = cljs.core.next(seq6238__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6239, seq6238, seq6238__$1);
            };
            cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
            cljs.core.bit_and_not = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7789 = arguments.length, i__4731__auto___7790 = 0;;) {
                    if (i__4731__auto___7790 < len__4730__auto___7789) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7790]), i__4731__auto___7790 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return x & ~y;
            };
            cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
            };
            cljs.core.bit_and_not.cljs$lang$applyTo = function(seq6243) {
              var G__6244 = cljs.core.first(seq6243), seq6243__$1 = cljs.core.next(seq6243);
              seq6243 = cljs.core.first(seq6243__$1);
              seq6243__$1 = cljs.core.next(seq6243__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6244, seq6243, seq6243__$1);
            };
            cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
            cljs.core.bit_clear = function(x, n) {
              return x & ~(1 << n);
            };
            cljs.core.bit_flip = function(x, n) {
              return x ^ 1 << n;
            };
            cljs.core.bit_not = function(x) {
              return ~x;
            };
            cljs.core.bit_set = function(x, n) {
              return x | 1 << n;
            };
            cljs.core.bit_test = function(x, n) {
              return 0 != (x & 1 << n);
            };
            cljs.core.bit_shift_left = function(x, n) {
              return x << n;
            };
            cljs.core.bit_shift_right = function(x, n) {
              return x >> n;
            };
            cljs.core.bit_shift_right_zero_fill = function(x, n) {
              return x >>> n;
            };
            cljs.core.unsigned_bit_shift_right = function(x, n) {
              return x >>> n;
            };
            cljs.core.bit_count = function(v) {
              v -= v >> 1 & 1431655765;
              v = (v & 858993459) + (v >> 2 & 858993459);
              return 16843009 * (v + (v >> 4) & 252645135) >> 24;
            };
            cljs.core._EQ__EQ_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7793 = arguments.length, i__4731__auto___7794 = 0;;) {
                    if (i__4731__auto___7794 < len__4730__auto___7793) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7794]), i__4731__auto___7794 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !0;
            };
            cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return cljs.core._equiv(x, y);
            };
            cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              for (;;) {
                if (x === y) {
                  if (cljs.core.next(more)) {
                    x = y, y = cljs.core.first(more), more = cljs.core.next(more);
                  } else {
                    return y === cljs.core.first(more);
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq6248) {
              var G__6249 = cljs.core.first(seq6248), seq6248__$1 = cljs.core.next(seq6248);
              seq6248 = cljs.core.first(seq6248__$1);
              seq6248__$1 = cljs.core.next(seq6248__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6249, seq6248, seq6248__$1);
            };
            cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
            cljs.core.pos_QMARK_ = function(x) {
              return 0 < x;
            };
            cljs.core.zero_QMARK_ = function(x) {
              return 0 === x;
            };
            cljs.core.neg_QMARK_ = function(x) {
              return 0 > x;
            };
            cljs.core.nthnext = function(coll, n) {
              for (coll = cljs.core.seq(coll);;) {
                if (coll && 0 < n) {
                  --n, coll = cljs.core.next(coll);
                } else {
                  return coll;
                }
              }
            };
            cljs.core.str = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7802 = arguments.length, i__4731__auto___7803 = 0;;) {
                    if (i__4731__auto___7803 < len__4730__auto___7802) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7803]), i__4731__auto___7803 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(1), 0, null);
                  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args_arr__4751__auto__);
              }
            };
            cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
              return "";
            };
            cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return null == x ? "" : [x].join("");
            };
            cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
              for (x = new goog.string.StringBuffer(cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));;) {
                if (cljs.core.truth_(ys)) {
                  x = x.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ys))), ys = cljs.core.next(ys);
                } else {
                  return x.toString();
                }
              }
            };
            cljs.core.str.cljs$lang$applyTo = function(seq6253) {
              var G__6254 = cljs.core.first(seq6253);
              seq6253 = cljs.core.next(seq6253);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6254, seq6253);
            };
            cljs.core.str.cljs$lang$maxFixedArity = 1;
            cljs.core.subs = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
              return s.substring(start);
            };
            cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
              return s.substring(start, end);
            };
            cljs.core.subs.cljs$lang$maxFixedArity = 3;
            cljs.core.equiv_sequential = function(x, y) {
              return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && cljs.core.count(x) !== cljs.core.count(y) ? !1 : function() {
                for (var xs = cljs.core.seq(x), ys = cljs.core.seq(y);;) {
                  if (null == xs) {
                    return null == ys;
                  }
                  if (null != ys && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
                    xs = cljs.core.next(xs), ys = cljs.core.next(ys);
                  } else {
                    return !1;
                  }
                }
              }() : null);
            };
            cljs.core.hash_coll = function(coll) {
              if (cljs.core.seq(coll)) {
                var res = cljs.core.hash(cljs.core.first(coll));
                for (coll = cljs.core.next(coll);;) {
                  if (null == coll) {
                    return res;
                  }
                  res = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(coll)));
                  coll = cljs.core.next(coll);
                }
              } else {
                return 0;
              }
            };
            cljs.core.hash_imap = function(m) {
              var h = 0;
              for (m = cljs.core.seq(m);;) {
                if (m) {
                  var e = cljs.core.first(m);
                  h = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
                  m = cljs.core.next(m);
                } else {
                  return h;
                }
              }
            };
            cljs.core.hash_iset = function(s) {
              var h = 0;
              for (s = cljs.core.seq(s);;) {
                if (s) {
                  var e = cljs.core.first(s);
                  h = (h + cljs.core.hash(e)) % 4503599627370496;
                  s = cljs.core.next(s);
                } else {
                  return h;
                }
              }
            };
            cljs.core.extend_object_BANG_ = function(obj, fn_map) {
              fn_map = cljs.core.seq(fn_map);
              for (var chunk__6259_7817 = null, count__6260_7818 = 0, i__6261_7819 = 0;;) {
                if (i__6261_7819 < count__6260_7818) {
                  var vec__6268_7820 = chunk__6259_7817.cljs$core$IIndexed$_nth$arity$2(null, i__6261_7819), key_name_7821 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6268_7820, 0, null);
                  vec__6268_7820 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6268_7820, 1, null);
                  key_name_7821 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_7821) : cljs.core.name.call(null, key_name_7821);
                  goog.object.set(obj, key_name_7821, vec__6268_7820);
                  i__6261_7819 += 1;
                } else {
                  if (fn_map = cljs.core.seq(fn_map)) {
                    cljs.core.chunked_seq_QMARK_(fn_map) ? (count__6260_7818 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(fn_map) : cljs.core.chunk_first.call(null, fn_map), fn_map = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(fn_map) : cljs.core.chunk_rest.call(null, fn_map), chunk__6259_7817 = count__6260_7818, count__6260_7818 = cljs.core.count(count__6260_7818)) : (count__6260_7818 = 
                    cljs.core.first(fn_map), chunk__6259_7817 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(count__6260_7818, 0, null), count__6260_7818 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(count__6260_7818, 1, null), chunk__6259_7817 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(chunk__6259_7817) : cljs.core.name.call(null, chunk__6259_7817), goog.object.set(obj, chunk__6259_7817, count__6260_7818), fn_map = cljs.core.next(fn_map), chunk__6259_7817 = 
                    null, count__6260_7818 = 0), i__6261_7819 = 0;
                  } else {
                    break;
                  }
                }
              }
              return obj;
            };
            cljs.core.List = function(meta, first, rest, count, __hash) {
              this.meta = meta;
              this.first = first;
              this.rest = rest;
              this.count = count;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 65937646;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.List.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.List.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.List.prototype.indexOf = function() {
              var G__7843 = null, G__7843__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7843__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7843 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7843__1.call(this, x);
                  case 2:
                    return G__7843__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7843.cljs$core$IFn$_invoke$arity$1 = G__7843__1;
              G__7843.cljs$core$IFn$_invoke$arity$2 = G__7843__2;
              return G__7843;
            }();
            cljs.core.List.prototype.lastIndexOf = function() {
              var G__7844 = null, G__7844__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, this.count);
              }, G__7844__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7844 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7844__1.call(this, x);
                  case 2:
                    return G__7844__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7844.cljs$core$IFn$_invoke$arity$1 = G__7844__1;
              G__7844.cljs$core$IFn$_invoke$arity$2 = G__7844__2;
              return G__7844;
            }();
            cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.List(this.meta, this.first, this.rest, this.count, this.__hash);
            };
            cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return 1 === this.count ? null : this.rest;
            };
            cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.count;
            };
            cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
              return this.first;
            };
            cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
              return this.cljs$core$ISeq$_rest$arity$1(null);
            };
            cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.List.EMPTY, this.meta);
            };
            cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.first;
            };
            cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return 1 === this.count ? cljs.core.List.EMPTY : this.rest;
            };
            cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.List(new_meta, this.first, this.rest, this.count, this.__hash);
            };
            cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return new cljs.core.List(this.meta, o, this, this.count + 1, null);
            };
            cljs.core.List.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$first, cljs$cst$symbol$rest, cljs$cst$symbol$count, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.List.cljs$lang$type = !0;
            cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
            cljs.core.List.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/List");
            };
            cljs.core.__GT_List = function(meta, first, rest, count, __hash) {
              return new cljs.core.List(meta, first, rest, count, __hash);
            };
            cljs.core.list_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 33554432 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IList$ ? !0 : x.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IList, x) : cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
            };
            var G__6275_7845 = cljs.core.List.prototype, G__6276_7846 = cljs.core.ITER_SYMBOL, G__6277_7847 = function(G__6275_7845, G__6276_7846) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6275_7845, G__6276_7846, G__6277_7847);
            cljs.core.EmptyList = function(meta) {
              this.meta = meta;
              this.cljs$lang$protocol_mask$partition0$ = 65937614;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.EmptyList.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.EmptyList.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.EmptyList.prototype.indexOf = function() {
              var G__7848 = null, G__7848__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7848__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7848 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7848__1.call(this, x);
                  case 2:
                    return G__7848__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7848.cljs$core$IFn$_invoke$arity$1 = G__7848__1;
              G__7848.cljs$core$IFn$_invoke$arity$2 = G__7848__2;
              return G__7848;
            }();
            cljs.core.EmptyList.prototype.lastIndexOf = function() {
              var G__7849 = null, G__7849__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__7849__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7849 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7849__1.call(this, x);
                  case 2:
                    return G__7849__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7849.cljs$core$IFn$_invoke$arity$1 = G__7849__1;
              G__7849.cljs$core$IFn$_invoke$arity$2 = G__7849__2;
              return G__7849;
            }();
            cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.EmptyList(this.meta);
            };
            cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return null;
            };
            cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return 0;
            };
            cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
              return null;
            };
            cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
              throw Error("Can't pop empty list");
            };
            cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.empty_ordered_hash;
            };
            cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other) ? null == cljs.core.seq(other) : !1;
            };
            cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return this;
            };
            cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return null;
            };
            cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return null;
            };
            cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.EmptyList(new_meta);
            };
            cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return new cljs.core.List(this.meta, o, null, 1, null);
            };
            cljs.core.EmptyList.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta], null);
            };
            cljs.core.EmptyList.cljs$lang$type = !0;
            cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
            cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/EmptyList");
            };
            cljs.core.__GT_EmptyList = function(meta) {
              return new cljs.core.EmptyList(meta);
            };
            cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
            var G__6278_7850 = cljs.core.EmptyList.prototype, G__6279_7851 = cljs.core.ITER_SYMBOL, G__6280_7852 = function(G__6278_7850, G__6279_7851) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6278_7850, G__6279_7851, G__6280_7852);
            cljs.core.reversible_QMARK_ = function(coll) {
              return null != coll ? coll.cljs$lang$protocol_mask$partition0$ & 134217728 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReversible$ ? !0 : coll.cljs$lang$protocol_mask$partition0$ ? !1 : cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll) : cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
            };
            cljs.core.rseq = function(rev) {
              return cljs.core._rseq(rev);
            };
            cljs.core.reverse = function(coll) {
              return cljs.core.reversible_QMARK_(coll) ? (coll = cljs.core.rseq(coll)) ? coll : cljs.core.List.EMPTY : cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
            };
            cljs.core.list = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___7853 = arguments.length, i__4731__auto___7854 = 0;;) {
                if (i__4731__auto___7854 < len__4730__auto___7853) {
                  args__4736__auto__.push(arguments[i__4731__auto___7854]), i__4731__auto___7854 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
              if (xs instanceof cljs.core.IndexedSeq && 0 === xs.i) {
                var JSCompiler_temp = xs.arr;
              } else {
                a: {
                  for (JSCompiler_temp = [];;) {
                    if (null != xs) {
                      JSCompiler_temp.push(cljs.core._first(xs)), xs = cljs.core._next(xs);
                    } else {
                      break a;
                    }
                  }
                }
              }
              xs = JSCompiler_temp.length;
              for (var r = cljs.core.List.EMPTY;;) {
                if (0 < xs) {
                  var G__7857 = xs - 1;
                  r = cljs.core._conj(r, JSCompiler_temp[xs - 1]);
                  xs = G__7857;
                } else {
                  return r;
                }
              }
            };
            cljs.core.list.cljs$lang$maxFixedArity = 0;
            cljs.core.list.cljs$lang$applyTo = function(seq6282) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq6282));
            };
            cljs.core.Cons = function(meta, first, rest, __hash) {
              this.meta = meta;
              this.first = first;
              this.rest = rest;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 65929452;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.Cons.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Cons.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Cons.prototype.indexOf = function() {
              var G__7859 = null, G__7859__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7859__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7859 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7859__1.call(this, x);
                  case 2:
                    return G__7859__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7859.cljs$core$IFn$_invoke$arity$1 = G__7859__1;
              G__7859.cljs$core$IFn$_invoke$arity$2 = G__7859__2;
              return G__7859;
            }();
            cljs.core.Cons.prototype.lastIndexOf = function() {
              var G__7860 = null, G__7860__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__7860__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7860 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7860__1.call(this, x);
                  case 2:
                    return G__7860__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7860.cljs$core$IFn$_invoke$arity$1 = G__7860__1;
              G__7860.cljs$core$IFn$_invoke$arity$2 = G__7860__2;
              return G__7860;
            }();
            cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.Cons(this.meta, this.first, this.rest, this.__hash);
            };
            cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return null == this.rest ? null : cljs.core.seq(this.rest);
            };
            cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.first;
            };
            cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return null == this.rest ? cljs.core.List.EMPTY : this.rest;
            };
            cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.Cons(new_meta, this.first, this.rest, this.__hash);
            };
            cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return new cljs.core.Cons(null, o, this, null);
            };
            cljs.core.Cons.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$first, cljs$cst$symbol$rest, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Cons.cljs$lang$type = !0;
            cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
            cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Cons");
            };
            cljs.core.__GT_Cons = function(meta, first, rest, __hash) {
              return new cljs.core.Cons(meta, first, rest, __hash);
            };
            var G__6283_7861 = cljs.core.Cons.prototype, G__6284_7862 = cljs.core.ITER_SYMBOL, G__6285_7863 = function(G__6283_7861, G__6284_7862) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6283_7861, G__6284_7862, G__6285_7863);
            cljs.core.cons = function(x, coll) {
              return null == coll ? new cljs.core.List(null, x, null, 1, null) : null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) ? new cljs.core.Cons(null, x, coll, null) : new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
            };
            cljs.core.hash_keyword = function(k) {
              return cljs.core.hash_symbol(k) + 2654435769 | 0;
            };
            cljs.core.compare_keywords = function(a, b) {
              if (a.fqn === b.fqn) {
                return 0;
              }
              if (cljs.core.truth_(function() {
                var and__4120__auto__ = cljs.core.not(a.ns);
                return and__4120__auto__ ? b.ns : and__4120__auto__;
              }())) {
                return -1;
              }
              if (cljs.core.truth_(a.ns)) {
                if (cljs.core.not(b.ns)) {
                  return 1;
                }
                var nsc = goog.array.defaultCompare(a.ns, b.ns);
                return 0 === nsc ? goog.array.defaultCompare(a.name, b.name) : nsc;
              }
              return goog.array.defaultCompare(a.name, b.name);
            };
            cljs.core.Keyword = function(ns, name, fqn, _hash) {
              this.ns = ns;
              this.name = name;
              this.fqn = fqn;
              this._hash = _hash;
              this.cljs$lang$protocol_mask$partition0$ = 2153775105;
              this.cljs$lang$protocol_mask$partition1$ = 4096;
            };
            cljs.core.Keyword.prototype.toString = function() {
              return [":", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.fqn)].join("");
            };
            cljs.core.Keyword.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
              return other instanceof cljs.core.Keyword ? this.fqn === other.fqn : !1;
            };
            cljs.core.Keyword.prototype.call = function() {
              var G__7864 = null, G__7864__2 = function(self__, coll) {
                return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, this);
              }, G__7864__3 = function(self__, coll, not_found) {
                return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, this, not_found);
              };
              G__7864 = function(self__, coll, not_found) {
                switch(arguments.length) {
                  case 2:
                    return G__7864__2.call(this, self__, coll);
                  case 3:
                    return G__7864__3.call(this, self__, coll, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__7864.cljs$core$IFn$_invoke$arity$2 = G__7864__2;
              G__7864.cljs$core$IFn$_invoke$arity$3 = G__7864__3;
              return G__7864;
            }();
            cljs.core.Keyword.prototype.apply = function(self__, args6293) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6293)));
            };
            cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, this);
            };
            cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
              return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, this, not_found);
            };
            cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
              this$ = this._hash;
              return null != this$ ? this$ : this._hash = this$ = cljs.core.hash_keyword(this);
            };
            cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
              return this.name;
            };
            cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
              return this.ns;
            };
            cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
              return cljs.core._write(writer, [":", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.fqn)].join(""));
            };
            cljs.core.Keyword.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$ns, cljs$cst$symbol$name, cljs$cst$symbol$fqn, cljs.core.with_meta(cljs$cst$symbol$_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Keyword.cljs$lang$type = !0;
            cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
            cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Keyword");
            };
            cljs.core.__GT_Keyword = function(ns, name, fqn, _hash) {
              return new cljs.core.Keyword(ns, name, fqn, _hash);
            };
            cljs.core.keyword_QMARK_ = function(x) {
              return x instanceof cljs.core.Keyword;
            };
            cljs.core.keyword_identical_QMARK_ = function(x, y) {
              return x === y ? !0 : x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword ? x.fqn === y.fqn : !1;
            };
            cljs.core.symbol_identical_QMARK_ = function(x, y) {
              return x === y ? !0 : x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol ? x.str === y.str : !1;
            };
            cljs.core.namespace = function(x) {
              if (null != x && (x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$)) {
                return cljs.core._namespace(x);
              }
              throw Error(["Doesn't support namespace: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
            };
            cljs.core.ident_QMARK_ = function(x) {
              return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
            };
            cljs.core.simple_ident_QMARK_ = function(x) {
              return cljs.core.ident_QMARK_(x) && null == cljs.core.namespace(x);
            };
            cljs.core.qualified_ident_QMARK_ = function(x) {
              return cljs.core.boolean$(function() {
                var and__4120__auto__ = cljs.core.ident_QMARK_(x);
                return and__4120__auto__ ? (and__4120__auto__ = cljs.core.namespace(x), cljs.core.truth_(and__4120__auto__) ? !0 : and__4120__auto__) : and__4120__auto__;
              }());
            };
            cljs.core.simple_symbol_QMARK_ = function(x) {
              return x instanceof cljs.core.Symbol && null == cljs.core.namespace(x);
            };
            cljs.core.qualified_symbol_QMARK_ = function(x) {
              return cljs.core.boolean$(function() {
                var and__4120__auto__ = x instanceof cljs.core.Symbol;
                return and__4120__auto__ ? (and__4120__auto__ = cljs.core.namespace(x), cljs.core.truth_(and__4120__auto__) ? !0 : and__4120__auto__) : and__4120__auto__;
              }());
            };
            cljs.core.simple_keyword_QMARK_ = function(x) {
              return x instanceof cljs.core.Keyword && null == cljs.core.namespace(x);
            };
            cljs.core.qualified_keyword_QMARK_ = function(x) {
              return cljs.core.boolean$(function() {
                var and__4120__auto__ = x instanceof cljs.core.Keyword;
                return and__4120__auto__ ? (and__4120__auto__ = cljs.core.namespace(x), cljs.core.truth_(and__4120__auto__) ? !0 : and__4120__auto__) : and__4120__auto__;
              }());
            };
            cljs.core.keyword = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
              if (name instanceof cljs.core.Keyword) {
                return name;
              }
              if (name instanceof cljs.core.Symbol) {
                return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
              }
              if ("string" === typeof name) {
                var parts = name.split("/");
                return 2 === parts.length ? new cljs.core.Keyword(parts[0], parts[1], name, null) : new cljs.core.Keyword(null, parts[0], name, null);
              }
              return null;
            };
            cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
              ns = ns instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns;
              name = name instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name;
              return new cljs.core.Keyword(ns, name, [cljs.core.truth_(ns) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), "/"].join("") : null, cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""), null);
            };
            cljs.core.keyword.cljs$lang$maxFixedArity = 2;
            cljs.core.LazySeq = function(meta, fn, s, __hash) {
              this.meta = meta;
              this.fn = fn;
              this.s = s;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 1;
            };
            cljs.core.LazySeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.LazySeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.LazySeq.prototype.sval = function() {
              null != this.fn && (this.s = this.fn.cljs$core$IFn$_invoke$arity$0 ? this.fn.cljs$core$IFn$_invoke$arity$0() : this.fn.call(null), this.fn = null);
              return this.s;
            };
            cljs.core.LazySeq.prototype.indexOf = function() {
              var G__7866 = null, G__7866__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7866__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7866 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7866__1.call(this, x);
                  case 2:
                    return G__7866__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7866.cljs$core$IFn$_invoke$arity$1 = G__7866__1;
              G__7866.cljs$core$IFn$_invoke$arity$2 = G__7866__2;
              return G__7866;
            }();
            cljs.core.LazySeq.prototype.lastIndexOf = function() {
              var G__7867 = null, G__7867__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__7867__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7867 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7867__1.call(this, x);
                  case 2:
                    return G__7867__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7867.cljs$core$IFn$_invoke$arity$1 = G__7867__1;
              G__7867.cljs$core$IFn$_invoke$arity$2 = G__7867__2;
              return G__7867;
            }();
            cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              this.cljs$core$ISeqable$_seq$arity$1(null);
              return null == this.s ? null : cljs.core.next(this.s);
            };
            cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.List.EMPTY, this.meta);
            };
            cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
              return cljs.core.not(this.fn);
            };
            cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              this.cljs$core$ISeqable$_seq$arity$1(null);
              return null == this.s ? null : cljs.core.first(this.s);
            };
            cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              this.cljs$core$ISeqable$_seq$arity$1(null);
              return null != this.s ? cljs.core.rest(this.s) : cljs.core.List.EMPTY;
            };
            cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              this.sval();
              if (null == this.s) {
                return null;
              }
              for (coll = this.s;;) {
                if (coll instanceof cljs.core.LazySeq) {
                  coll = coll.sval();
                } else {
                  return this.s = coll, cljs.core.seq(this.s);
                }
              }
            };
            cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.LazySeq(new_meta, function(coll__$1) {
                return function() {
                  return coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
                };
              }(this), null, this.__hash);
            };
            cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.LazySeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs.core.with_meta(cljs$cst$symbol$fn, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$s, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.LazySeq.cljs$lang$type = !0;
            cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
            cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/LazySeq");
            };
            cljs.core.__GT_LazySeq = function(meta, fn, s, __hash) {
              return new cljs.core.LazySeq(meta, fn, s, __hash);
            };
            var G__6297_7869 = cljs.core.LazySeq.prototype, G__6298_7870 = cljs.core.ITER_SYMBOL, G__6299_7871 = function(G__6297_7869, G__6298_7870) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6297_7869, G__6298_7870, G__6299_7871);
            cljs.core.ChunkBuffer = function(buf, end) {
              this.buf = buf;
              this.end = end;
              this.cljs$lang$protocol_mask$partition0$ = 2;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.ChunkBuffer.prototype.add = function(o) {
              this.buf[this.end] = o;
              return this.end += 1;
            };
            cljs.core.ChunkBuffer.prototype.chunk = function() {
              var ret = new cljs.core.ArrayChunk(this.buf, 0, this.end);
              this.buf = null;
              return ret;
            };
            cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
              return this.end;
            };
            cljs.core.ChunkBuffer.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$buf, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$end, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ChunkBuffer.cljs$lang$type = !0;
            cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
            cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ChunkBuffer");
            };
            cljs.core.__GT_ChunkBuffer = function(buf, end) {
              return new cljs.core.ChunkBuffer(buf, end);
            };
            cljs.core.chunk_buffer = function(capacity) {
              return new cljs.core.ChunkBuffer(Array(capacity), 0);
            };
            cljs.core.ArrayChunk = function(arr, off, end) {
              this.arr = arr;
              this.off = off;
              this.end = end;
              this.cljs$lang$protocol_mask$partition0$ = 524306;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
              return this.end - this.off;
            };
            cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
              return this.arr[this.off + i];
            };
            cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
              return 0 <= i && i < this.end - this.off ? this.arr[this.off + i] : not_found;
            };
            cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
              if (this.off === this.end) {
                throw Error("-drop-first of empty chunk");
              }
              return new cljs.core.ArrayChunk(this.arr, this.off + 1, this.end);
            };
            cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(this.arr, f, this.arr[this.off], this.off + 1);
            };
            cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(this.arr, f, start, this.off);
            };
            cljs.core.ArrayChunk.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs$cst$symbol$off, cljs$cst$symbol$end], null);
            };
            cljs.core.ArrayChunk.cljs$lang$type = !0;
            cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
            cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayChunk");
            };
            cljs.core.__GT_ArrayChunk = function(arr, off, end) {
              return new cljs.core.ArrayChunk(arr, off, end);
            };
            cljs.core.array_chunk = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
              return new cljs.core.ArrayChunk(arr, 0, arr.length);
            };
            cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
              return new cljs.core.ArrayChunk(arr, off, arr.length);
            };
            cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
              return new cljs.core.ArrayChunk(arr, off, end);
            };
            cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
            cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
              this.chunk = chunk;
              this.more = more;
              this.meta = meta;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 31850732;
              this.cljs$lang$protocol_mask$partition1$ = 1536;
            };
            cljs.core.ChunkedCons.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ChunkedCons.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.ChunkedCons.prototype.indexOf = function() {
              var G__7873 = null, G__7873__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__7873__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7873 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7873__1.call(this, x);
                  case 2:
                    return G__7873__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7873.cljs$core$IFn$_invoke$arity$1 = G__7873__1;
              G__7873.cljs$core$IFn$_invoke$arity$2 = G__7873__2;
              return G__7873;
            }();
            cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
              var G__7874 = null, G__7874__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__7874__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__7874 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__7874__1.call(this, x);
                  case 2:
                    return G__7874__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__7874.cljs$core$IFn$_invoke$arity$1 = G__7874__1;
              G__7874.cljs$core$IFn$_invoke$arity$2 = G__7874__2;
              return G__7874;
            }();
            cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return 1 < cljs.core._count(this.chunk) ? new cljs.core.ChunkedCons(cljs.core._drop_first(this.chunk), this.more, null, null) : null == this.more ? null : cljs.core._seq(this.more);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(this.chunk, 0);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return 1 < cljs.core._count(this.chunk) ? new cljs.core.ChunkedCons(cljs.core._drop_first(this.chunk), this.more, null, null) : null == this.more ? cljs.core.List.EMPTY : this.more;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
              return this.chunk;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
              return null == this.more ? cljs.core.List.EMPTY : this.more;
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.ChunkedCons(this.chunk, this.more, new_meta, this.__hash);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
              return null == this.more ? null : this.more;
            };
            cljs.core.ChunkedCons.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$chunk, cljs$cst$symbol$more, cljs$cst$symbol$meta, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ChunkedCons.cljs$lang$type = !0;
            cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
            cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ChunkedCons");
            };
            cljs.core.__GT_ChunkedCons = function(chunk, more, meta, __hash) {
              return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
            };
            var G__6302_7875 = cljs.core.ChunkedCons.prototype, G__6303_7876 = cljs.core.ITER_SYMBOL, G__6304_7877 = function(G__6302_7875, G__6303_7876) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6302_7875, G__6303_7876, G__6304_7877);
            cljs.core.chunk_cons = function(chunk, rest) {
              return 0 === cljs.core._count(chunk) ? rest : new cljs.core.ChunkedCons(chunk, rest, null, null);
            };
            cljs.core.chunk_append = function(b, x) {
              return b.add(x);
            };
            cljs.core.chunk = function(b) {
              return b.chunk();
            };
            cljs.core.chunk_first = function(s) {
              return cljs.core._chunked_first(s);
            };
            cljs.core.chunk_rest = function(s) {
              return cljs.core._chunked_rest(s);
            };
            cljs.core.chunk_next = function(s) {
              return null != s && (s.cljs$lang$protocol_mask$partition1$ & 1024 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$IChunkedNext$) ? cljs.core._chunked_next(s) : cljs.core.seq(cljs.core._chunked_rest(s));
            };
            cljs.core.to_array = function(coll) {
              var ary = [];
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  ary.push(cljs.core.first(coll)), coll = cljs.core.next(coll);
                } else {
                  return ary;
                }
              }
            };
            cljs.core.to_array_2d = function(coll) {
              var ret = Array(cljs.core.count(coll)), i_7879 = 0;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  ret[i_7879] = cljs.core.to_array(cljs.core.first(coll)), i_7879 += 1, coll = cljs.core.next(coll);
                } else {
                  break;
                }
              }
              return ret;
            };
            cljs.core.int_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
              return "number" === typeof size_or_seq ? cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null) : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
            };
            cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
              var a = Array(size);
              if (cljs.core.seq_QMARK_(init_val_or_seq)) {
                var i = 0;
                for (init_val_or_seq = cljs.core.seq(init_val_or_seq);;) {
                  if (init_val_or_seq && i < size) {
                    a[i] = cljs.core.first(init_val_or_seq), i += 1, init_val_or_seq = cljs.core.next(init_val_or_seq);
                  } else {
                    return a;
                  }
                }
              } else {
                for (i = 0;;) {
                  if (i < size) {
                    a[i] = init_val_or_seq, i += 1;
                  } else {
                    break;
                  }
                }
                return a;
              }
            };
            cljs.core.int_array.cljs$lang$maxFixedArity = 2;
            cljs.core.long_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
              return "number" === typeof size_or_seq ? cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null) : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
            };
            cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
              var a = Array(size);
              if (cljs.core.seq_QMARK_(init_val_or_seq)) {
                var i = 0;
                for (init_val_or_seq = cljs.core.seq(init_val_or_seq);;) {
                  if (init_val_or_seq && i < size) {
                    a[i] = cljs.core.first(init_val_or_seq), i += 1, init_val_or_seq = cljs.core.next(init_val_or_seq);
                  } else {
                    return a;
                  }
                }
              } else {
                for (i = 0;;) {
                  if (i < size) {
                    a[i] = init_val_or_seq, i += 1;
                  } else {
                    break;
                  }
                }
                return a;
              }
            };
            cljs.core.long_array.cljs$lang$maxFixedArity = 2;
            cljs.core.double_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
              return "number" === typeof size_or_seq ? cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null) : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
            };
            cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
              var a = Array(size);
              if (cljs.core.seq_QMARK_(init_val_or_seq)) {
                var i = 0;
                for (init_val_or_seq = cljs.core.seq(init_val_or_seq);;) {
                  if (init_val_or_seq && i < size) {
                    a[i] = cljs.core.first(init_val_or_seq), i += 1, init_val_or_seq = cljs.core.next(init_val_or_seq);
                  } else {
                    return a;
                  }
                }
              } else {
                for (i = 0;;) {
                  if (i < size) {
                    a[i] = init_val_or_seq, i += 1;
                  } else {
                    break;
                  }
                }
                return a;
              }
            };
            cljs.core.double_array.cljs$lang$maxFixedArity = 2;
            cljs.core.object_array = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
              return "number" === typeof size_or_seq ? cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null) : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
            };
            cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
              var a = Array(size);
              if (cljs.core.seq_QMARK_(init_val_or_seq)) {
                var i = 0;
                for (init_val_or_seq = cljs.core.seq(init_val_or_seq);;) {
                  if (init_val_or_seq && i < size) {
                    a[i] = cljs.core.first(init_val_or_seq), i += 1, init_val_or_seq = cljs.core.next(init_val_or_seq);
                  } else {
                    return a;
                  }
                }
              } else {
                for (i = 0;;) {
                  if (i < size) {
                    a[i] = init_val_or_seq, i += 1;
                  } else {
                    break;
                  }
                }
                return a;
              }
            };
            cljs.core.object_array.cljs$lang$maxFixedArity = 2;
            cljs.core.bounded_count = function(n, coll) {
              if (cljs.core.counted_QMARK_(coll)) {
                return cljs.core.count(coll);
              }
              var i = 0;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll && i < n) {
                  i += 1, coll = cljs.core.next(coll);
                } else {
                  return i;
                }
              }
            };
            cljs.core.spread = function(arglist) {
              if (null == arglist) {
                return null;
              }
              var n = cljs.core.next(arglist);
              return null == n ? cljs.core.seq(cljs.core.first(arglist)) : cljs.core.cons(cljs.core.first(arglist), cljs.core.spread.cljs$core$IFn$_invoke$arity$1 ? cljs.core.spread.cljs$core$IFn$_invoke$arity$1(n) : cljs.core.spread.call(null, n));
            };
            cljs.core.concat = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7910 = arguments.length, i__4731__auto___7911 = 0;;) {
                    if (i__4731__auto___7911 < len__4730__auto___7910) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7911]), i__4731__auto___7911 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
              return new cljs.core.LazySeq(null, function() {
                return null;
              }, null, null);
            };
            cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return new cljs.core.LazySeq(null, function() {
                return x;
              }, null, null);
            };
            cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return new cljs.core.LazySeq(null, function() {
                var s = cljs.core.seq(x);
                return s ? cljs.core.chunked_seq_QMARK_(s) ? cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y)) : cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y)) : y;
              }, null, null);
            };
            cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
              return function cljs$core$cat(xys, zs__$1) {
                return new cljs.core.LazySeq(null, function() {
                  var xys__$1 = cljs.core.seq(xys);
                  return xys__$1 ? cljs.core.chunked_seq_QMARK_(xys__$1) ? cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1)) : cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1)) : cljs.core.truth_(zs__$1) ? cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1)) : null;
                }, null, null);
              }(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
            };
            cljs.core.concat.cljs$lang$applyTo = function(seq6315) {
              var G__6316 = cljs.core.first(seq6315), seq6315__$1 = cljs.core.next(seq6315);
              seq6315 = cljs.core.first(seq6315__$1);
              seq6315__$1 = cljs.core.next(seq6315__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6316, seq6315, seq6315__$1);
            };
            cljs.core.concat.cljs$lang$maxFixedArity = 2;
            cljs.core.list_STAR_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7914 = arguments.length, i__4731__auto___7915 = 0;;) {
                    if (i__4731__auto___7915 < len__4730__auto___7914) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7915]), i__4731__auto___7915 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
              return cljs.core.seq(args);
            };
            cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
              return cljs.core.cons(a, args);
            };
            cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
              return cljs.core.cons(a, cljs.core.cons(b, args));
            };
            cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
              return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
            };
            cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
              return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
            };
            cljs.core.list_STAR_.cljs$lang$applyTo = function(seq6320) {
              var G__6321 = cljs.core.first(seq6320), seq6320__$1 = cljs.core.next(seq6320);
              seq6320 = cljs.core.first(seq6320__$1);
              var seq6320__$2 = cljs.core.next(seq6320__$1);
              seq6320__$1 = cljs.core.first(seq6320__$2);
              var seq6320__$3 = cljs.core.next(seq6320__$2);
              seq6320__$2 = cljs.core.first(seq6320__$3);
              seq6320__$3 = cljs.core.next(seq6320__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6321, seq6320, seq6320__$1, seq6320__$2, seq6320__$3);
            };
            cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
            cljs.core.transient$ = function(coll) {
              return cljs.core._as_transient(coll);
            };
            cljs.core.persistent_BANG_ = function(tcoll) {
              return cljs.core._persistent_BANG_(tcoll);
            };
            cljs.core.conj_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7918 = arguments.length, i__4731__auto___7919 = 0;;) {
                    if (i__4731__auto___7919 < len__4730__auto___7918) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7919]), i__4731__auto___7919 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
            };
            cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(tcoll) {
              return tcoll;
            };
            cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
              return cljs.core._conj_BANG_(tcoll, val);
            };
            cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
              for (;;) {
                if (tcoll = cljs.core._conj_BANG_(tcoll, val), cljs.core.truth_(vals)) {
                  val = cljs.core.first(vals), vals = cljs.core.next(vals);
                } else {
                  return tcoll;
                }
              }
            };
            cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq6327) {
              var G__6328 = cljs.core.first(seq6327), seq6327__$1 = cljs.core.next(seq6327);
              seq6327 = cljs.core.first(seq6327__$1);
              seq6327__$1 = cljs.core.next(seq6327__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6328, seq6327, seq6327__$1);
            };
            cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
            cljs.core.assoc_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7925 = arguments.length, i__4731__auto___7926 = 0;;) {
                    if (i__4731__auto___7926 < len__4730__auto___7925) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7926]), i__4731__auto___7926 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
              return cljs.core._assoc_BANG_(tcoll, key, val);
            };
            cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
              for (;;) {
                if (tcoll = cljs.core._assoc_BANG_(tcoll, key, val), cljs.core.truth_(kvs)) {
                  key = cljs.core.first(kvs), val = cljs.core.second(kvs), kvs = cljs.core.nnext(kvs);
                } else {
                  return tcoll;
                }
              }
            };
            cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq6332) {
              var G__6333 = cljs.core.first(seq6332), seq6332__$1 = cljs.core.next(seq6332);
              seq6332 = cljs.core.first(seq6332__$1);
              var seq6332__$2 = cljs.core.next(seq6332__$1);
              seq6332__$1 = cljs.core.first(seq6332__$2);
              seq6332__$2 = cljs.core.next(seq6332__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6333, seq6332, seq6332__$1, seq6332__$2);
            };
            cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
            cljs.core.dissoc_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7933 = arguments.length, i__4731__auto___7934 = 0;;) {
                    if (i__4731__auto___7934 < len__4730__auto___7933) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7934]), i__4731__auto___7934 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
              return cljs.core._dissoc_BANG_(tcoll, key);
            };
            cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
              for (;;) {
                if (tcoll = cljs.core._dissoc_BANG_(tcoll, key), cljs.core.truth_(ks)) {
                  key = cljs.core.first(ks), ks = cljs.core.next(ks);
                } else {
                  return tcoll;
                }
              }
            };
            cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq6338) {
              var G__6339 = cljs.core.first(seq6338), seq6338__$1 = cljs.core.next(seq6338);
              seq6338 = cljs.core.first(seq6338__$1);
              seq6338__$1 = cljs.core.next(seq6338__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6339, seq6338, seq6338__$1);
            };
            cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
            cljs.core.pop_BANG_ = function(tcoll) {
              return cljs.core._pop_BANG_(tcoll);
            };
            cljs.core.disj_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7940 = arguments.length, i__4731__auto___7941 = 0;;) {
                    if (i__4731__auto___7941 < len__4730__auto___7940) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7941]), i__4731__auto___7941 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
              return cljs.core._disjoin_BANG_(tcoll, val);
            };
            cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
              for (;;) {
                if (tcoll = cljs.core._disjoin_BANG_(tcoll, val), cljs.core.truth_(vals)) {
                  val = cljs.core.first(vals), vals = cljs.core.next(vals);
                } else {
                  return tcoll;
                }
              }
            };
            cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq6343) {
              var G__6344 = cljs.core.first(seq6343), seq6343__$1 = cljs.core.next(seq6343);
              seq6343 = cljs.core.first(seq6343__$1);
              seq6343__$1 = cljs.core.next(seq6343__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6344, seq6343, seq6343__$1);
            };
            cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
            cljs.core.apply_to = function(f, argc, args) {
              var args__$1 = cljs.core.seq(args);
              if (0 === argc) {
                return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
              }
              args = cljs.core._first(args__$1);
              var args__$2 = cljs.core._rest(args__$1);
              if (1 === argc) {
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(args) : f.call(null, args);
              }
              args__$1 = cljs.core._first(args__$2);
              var args__$3 = cljs.core._rest(args__$2);
              if (2 === argc) {
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(args, args__$1) : f.call(null, args, args__$1);
              }
              args__$2 = cljs.core._first(args__$3);
              var args__$4 = cljs.core._rest(args__$3);
              if (3 === argc) {
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(args, args__$1, args__$2) : f.call(null, args, args__$1, args__$2);
              }
              args__$3 = cljs.core._first(args__$4);
              var args__$5 = cljs.core._rest(args__$4);
              if (4 === argc) {
                return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(args, args__$1, args__$2, args__$3) : f.call(null, args, args__$1, args__$2, args__$3);
              }
              args__$4 = cljs.core._first(args__$5);
              var args__$6 = cljs.core._rest(args__$5);
              if (5 === argc) {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(args, args__$1, args__$2, args__$3, args__$4) : f.call(null, args, args__$1, args__$2, args__$3, args__$4);
              }
              args__$5 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (6 === argc) {
                return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(args, args__$1, args__$2, args__$3, args__$4, args__$5) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5);
              }
              args__$6 = cljs.core._first(args__$7);
              var args__$8 = cljs.core._rest(args__$7);
              if (7 === argc) {
                return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6);
              }
              args__$7 = cljs.core._first(args__$8);
              var args__$9 = cljs.core._rest(args__$8);
              if (8 === argc) {
                return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7);
              }
              args__$8 = cljs.core._first(args__$9);
              var args__$10 = cljs.core._rest(args__$9);
              if (9 === argc) {
                return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8);
              }
              args__$9 = cljs.core._first(args__$10);
              var args__$11 = cljs.core._rest(args__$10);
              if (10 === argc) {
                return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9);
              }
              args__$10 = cljs.core._first(args__$11);
              var args__$12 = cljs.core._rest(args__$11);
              if (11 === argc) {
                return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10);
              }
              args__$11 = cljs.core._first(args__$12);
              var args__$13 = cljs.core._rest(args__$12);
              if (12 === argc) {
                return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11);
              }
              args__$12 = cljs.core._first(args__$13);
              var args__$14 = cljs.core._rest(args__$13);
              if (13 === argc) {
                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12);
              }
              args__$13 = cljs.core._first(args__$14);
              var args__$15 = cljs.core._rest(args__$14);
              if (14 === argc) {
                return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13);
              }
              args__$14 = cljs.core._first(args__$15);
              var args__$16 = cljs.core._rest(args__$15);
              if (15 === argc) {
                return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14);
              }
              args__$15 = cljs.core._first(args__$16);
              var args__$17 = cljs.core._rest(args__$16);
              if (16 === argc) {
                return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15);
              }
              args__$16 = cljs.core._first(args__$17);
              var args__$18 = cljs.core._rest(args__$17);
              if (17 === argc) {
                return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16);
              }
              args__$17 = cljs.core._first(args__$18);
              var args__$19 = cljs.core._rest(args__$18);
              if (18 === argc) {
                return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17);
              }
              args__$18 = cljs.core._first(args__$19);
              args__$19 = cljs.core._rest(args__$19);
              if (19 === argc) {
                return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17, args__$18) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17, args__$18);
              }
              var t20 = cljs.core._first(args__$19);
              cljs.core._rest(args__$19);
              if (20 === argc) {
                return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17, args__$18, t20) : f.call(null, args, args__$1, args__$2, args__$3, args__$4, args__$5, args__$6, args__$7, args__$8, args__$9, args__$10, args__$11, args__$12, args__$13, args__$14, args__$15, args__$16, args__$17, args__$18, t20);
              }
              throw Error("Only up to 20 arguments supported on functions");
            };
            cljs.core.next_STAR_ = function(coll) {
              return null != coll && (coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$) ? coll.cljs$core$INext$_next$arity$1(null) : cljs.core.seq(cljs.core.rest(coll));
            };
            cljs.core.apply_to_simple = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                case 6:
                  return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
              return null == args ? f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(f) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(f, cljs.core._first(args), cljs.core.next_STAR_(args));
            };
            cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3 = function(f, a0, args) {
              return null == args ? f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a0) : f.call(f, a0) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(f, a0, cljs.core._first(args), cljs.core.next_STAR_(args));
            };
            cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4 = function(f, a0, a1, args) {
              return null == args ? f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a0, a1) : f.call(f, a0, a1) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(f, a0, a1, cljs.core._first(args), cljs.core.next_STAR_(args));
            };
            cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5 = function(f, a0, a1, a2, args) {
              return null == args ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a0, a1, a2) : f.call(f, a0, a1, a2) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(f, a0, a1, a2, cljs.core._first(args), cljs.core.next_STAR_(args));
            };
            cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6 = function(f, a0, a1, a2, a3, args) {
              if (null == args) {
                return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a0, a1, a2, a3) : f.call(f, a0, a1, a2, a3);
              }
              var a4 = cljs.core._first(args), next_4 = cljs.core.next(args);
              if (null == next_4) {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a0, a1, a2, a3, a4) : f.call(f, a0, a1, a2, a3, a4);
              }
              args = cljs.core._first(next_4);
              var next_5 = cljs.core.next(next_4);
              if (null == next_5) {
                return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a0, a1, a2, a3, a4, args) : f.call(f, a0, a1, a2, a3, a4, args);
              }
              next_4 = cljs.core._first(next_5);
              var next_6 = cljs.core.next(next_5);
              if (null == next_6) {
                return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a0, a1, a2, a3, a4, args, next_4) : f.call(f, a0, a1, a2, a3, a4, args, next_4);
              }
              next_5 = cljs.core._first(next_6);
              var next_7 = cljs.core.next(next_6);
              if (null == next_7) {
                return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a0, a1, a2, a3, a4, args, next_4, next_5) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5);
              }
              next_6 = cljs.core._first(next_7);
              var next_8 = cljs.core.next(next_7);
              if (null == next_8) {
                return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a0, a1, a2, a3, a4, args, next_4, next_5, next_6) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6);
              }
              next_7 = cljs.core._first(next_8);
              var next_9 = cljs.core.next(next_8);
              if (null == next_9) {
                return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7);
              }
              next_8 = cljs.core._first(next_9);
              var next_10 = cljs.core.next(next_9);
              if (null == next_10) {
                return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8);
              }
              next_9 = cljs.core._first(next_10);
              var next_11 = cljs.core.next(next_10);
              if (null == next_11) {
                return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9);
              }
              next_10 = cljs.core._first(next_11);
              var next_12 = cljs.core.next(next_11);
              if (null == next_12) {
                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10);
              }
              next_11 = cljs.core._first(next_12);
              var next_13 = cljs.core.next(next_12);
              if (null == next_13) {
                return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11);
              }
              next_12 = cljs.core._first(next_13);
              var next_14 = cljs.core.next(next_13);
              if (null == next_14) {
                return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12);
              }
              next_13 = cljs.core._first(next_14);
              var next_15 = cljs.core.next(next_14);
              if (null == next_15) {
                return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13);
              }
              next_14 = cljs.core._first(next_15);
              var next_16 = cljs.core.next(next_15);
              if (null == next_16) {
                return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14);
              }
              next_15 = cljs.core._first(next_16);
              var next_17 = cljs.core.next(next_16);
              if (null == next_17) {
                return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15);
              }
              next_16 = cljs.core._first(next_17);
              var next_18 = cljs.core.next(next_17);
              if (null == next_18) {
                return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15, next_16) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15, next_16);
              }
              next_17 = cljs.core._first(next_18);
              next_18 = cljs.core.next(next_18);
              if (null == next_18) {
                return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15, next_16, next_17) : f.call(f, a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15, next_16, next_17);
              }
              a0 = [a0, a1, a2, a3, a4, args, next_4, next_5, next_6, next_7, next_8, next_9, next_10, next_11, next_12, next_13, next_14, next_15, next_16, next_17];
              for (a1 = next_18;;) {
                if (a1) {
                  a0.push(cljs.core._first(a1)), a1 = cljs.core.next(a1);
                } else {
                  break;
                }
              }
              return f.apply(f, a0);
            };
            cljs.core.apply_to_simple.cljs$lang$maxFixedArity = 6;
            cljs.core.apply = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7950 = arguments.length, i__4731__auto___7951 = 0;;) {
                    if (i__4731__auto___7951 < len__4730__auto___7950) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7951]), i__4731__auto___7951 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(5), 0, null);
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], args_arr__4751__auto__);
              }
            };
            cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
              if (f.cljs$lang$applyTo) {
                var fixed_arity = f.cljs$lang$maxFixedArity, bc = cljs.core.bounded_count(fixed_arity + 1, args);
                return bc <= fixed_arity ? cljs.core.apply_to(f, bc, args) : f.cljs$lang$applyTo(args);
              }
              return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(args));
            };
            cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
              if (f.cljs$lang$applyTo) {
                x = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
                var fixed_arity = f.cljs$lang$maxFixedArity;
                args = cljs.core.bounded_count(fixed_arity, args) + 1;
                return args <= fixed_arity ? cljs.core.apply_to(f, args, x) : f.cljs$lang$applyTo(x);
              }
              return cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$3(f, x, cljs.core.seq(args));
            };
            cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
              return f.cljs$lang$applyTo ? (x = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args), y = f.cljs$lang$maxFixedArity, args = 2 + cljs.core.bounded_count(y - 1, args), args <= y ? cljs.core.apply_to(f, args, x) : f.cljs$lang$applyTo(x)) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$4(f, x, y, cljs.core.seq(args));
            };
            cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
              return f.cljs$lang$applyTo ? (x = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args), y = f.cljs$lang$maxFixedArity, args = 3 + cljs.core.bounded_count(y - 2, args), args <= y ? cljs.core.apply_to(f, args, x) : f.cljs$lang$applyTo(x)) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$5(f, x, y, z, cljs.core.seq(args));
            };
            cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
              return f.cljs$lang$applyTo ? (args = cljs.core.spread(args), a = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, args)))), b = f.cljs$lang$maxFixedArity, args = 4 + cljs.core.bounded_count(b - 3, args), args <= b ? cljs.core.apply_to(f, args, a) : f.cljs$lang$applyTo(a)) : cljs.core.apply_to_simple.cljs$core$IFn$_invoke$arity$6(f, a, b, c, d, cljs.core.spread(args));
            };
            cljs.core.apply.cljs$lang$applyTo = function(seq6351) {
              var G__6352 = cljs.core.first(seq6351), seq6351__$1 = cljs.core.next(seq6351);
              seq6351 = cljs.core.first(seq6351__$1);
              var seq6351__$2 = cljs.core.next(seq6351__$1);
              seq6351__$1 = cljs.core.first(seq6351__$2);
              var seq6351__$3 = cljs.core.next(seq6351__$2);
              seq6351__$2 = cljs.core.first(seq6351__$3);
              var seq6351__$4 = cljs.core.next(seq6351__$3);
              seq6351__$3 = cljs.core.first(seq6351__$4);
              seq6351__$4 = cljs.core.next(seq6351__$4);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6352, seq6351, seq6351__$1, seq6351__$2, seq6351__$3, seq6351__$4);
            };
            cljs.core.apply.cljs$lang$maxFixedArity = 5;
            cljs.core.vary_meta = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                case 6:
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7954 = arguments.length, i__4731__auto___7955 = 0;;) {
                    if (i__4731__auto___7955 < len__4730__auto___7954) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7955]), i__4731__auto___7955 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(6), 0, null);
                  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], args_arr__4751__auto__);
              }
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
              return cljs.core.with_meta(obj, function() {
                var G__6367 = cljs.core.meta(obj);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6367) : f.call(null, G__6367);
              }());
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
              return cljs.core.with_meta(obj, function() {
                var G__6368 = cljs.core.meta(obj);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6368, a) : f.call(null, G__6368, a);
              }());
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
              return cljs.core.with_meta(obj, function() {
                var G__6370 = cljs.core.meta(obj);
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6370, a, b) : f.call(null, G__6370, a, b);
              }());
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
              return cljs.core.with_meta(obj, function() {
                var G__6373 = cljs.core.meta(obj);
                return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__6373, a, b, c) : f.call(null, G__6373, a, b, c);
              }());
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
              return cljs.core.with_meta(obj, function() {
                var G__6377 = cljs.core.meta(obj);
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__6377, a, b, c, d) : f.call(null, G__6377, a, b, c, d);
              }());
            };
            cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
              return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([d, args], 0)));
            };
            cljs.core.vary_meta.cljs$lang$applyTo = function(seq6359) {
              var G__6360 = cljs.core.first(seq6359), seq6359__$1 = cljs.core.next(seq6359);
              seq6359 = cljs.core.first(seq6359__$1);
              var seq6359__$2 = cljs.core.next(seq6359__$1);
              seq6359__$1 = cljs.core.first(seq6359__$2);
              var seq6359__$3 = cljs.core.next(seq6359__$2);
              seq6359__$2 = cljs.core.first(seq6359__$3);
              var seq6359__$4 = cljs.core.next(seq6359__$3);
              seq6359__$3 = cljs.core.first(seq6359__$4);
              var seq6359__$5 = cljs.core.next(seq6359__$4);
              seq6359__$4 = cljs.core.first(seq6359__$5);
              seq6359__$5 = cljs.core.next(seq6359__$5);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6360, seq6359, seq6359__$1, seq6359__$2, seq6359__$3, seq6359__$4, seq6359__$5);
            };
            cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
            cljs.core.not_EQ_ = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7958 = arguments.length, i__4731__auto___7959 = 0;;) {
                    if (i__4731__auto___7959 < len__4730__auto___7958) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7959]), i__4731__auto___7959 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return !1;
            };
            cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
              return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
            };
            cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
              return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
            };
            cljs.core.not_EQ_.cljs$lang$applyTo = function(seq6383) {
              var G__6384 = cljs.core.first(seq6383), seq6383__$1 = cljs.core.next(seq6383);
              seq6383 = cljs.core.first(seq6383__$1);
              seq6383__$1 = cljs.core.next(seq6383__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6384, seq6383, seq6383__$1);
            };
            cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
            cljs.core.not_empty = function(coll) {
              return cljs.core.seq(coll) ? coll : null;
            };
            cljs.core.nil_iter = function() {
              if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core.t_cljs$core6387) {
                cljs.core.t_cljs$core6387 = function(meta6388) {
                  this.meta6388 = meta6388;
                  this.cljs$lang$protocol_mask$partition0$ = 393216;
                  this.cljs$lang$protocol_mask$partition1$ = 0;
                }, cljs.core.t_cljs$core6387.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6389, meta6388__$1) {
                  return new cljs.core.t_cljs$core6387(meta6388__$1);
                }, cljs.core.t_cljs$core6387.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6389) {
                  return this.meta6388;
                }, cljs.core.t_cljs$core6387.prototype.hasNext = function() {
                  return !1;
                }, cljs.core.t_cljs$core6387.prototype.next = function() {
                  return Error("No such element");
                }, cljs.core.t_cljs$core6387.prototype.remove = function() {
                  return Error("Unsupported operation");
                }, cljs.core.t_cljs$core6387.getBasis = function() {
                  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta6388], null);
                }, cljs.core.t_cljs$core6387.cljs$lang$type = !0, cljs.core.t_cljs$core6387.cljs$lang$ctorStr = "cljs.core/t_cljs$core6387", cljs.core.t_cljs$core6387.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
                  return cljs.core._write(writer__4375__auto__, "cljs.core/t_cljs$core6387");
                }, cljs.core.__GT_t_cljs$core6387 = function(meta6388) {
                  return new cljs.core.t_cljs$core6387(meta6388);
                };
              }
              return new cljs.core.t_cljs$core6387(cljs.core.PersistentArrayMap.EMPTY);
            };
            cljs.core.StringIter = function(s, i) {
              this.s = s;
              this.i = i;
            };
            cljs.core.StringIter.prototype.hasNext = function() {
              return this.i < this.s.length;
            };
            cljs.core.StringIter.prototype.next = function() {
              var ret = this.s.charAt(this.i);
              this.i += 1;
              return ret;
            };
            cljs.core.StringIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.StringIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$s, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.StringIter.cljs$lang$type = !0;
            cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
            cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/StringIter");
            };
            cljs.core.__GT_StringIter = function(s, i) {
              return new cljs.core.StringIter(s, i);
            };
            cljs.core.string_iter = function(x) {
              return new cljs.core.StringIter(x, 0);
            };
            cljs.core.ArrayIter = function(arr, i) {
              this.arr = arr;
              this.i = i;
            };
            cljs.core.ArrayIter.prototype.hasNext = function() {
              return this.i < this.arr.length;
            };
            cljs.core.ArrayIter.prototype.next = function() {
              var ret = this.arr[this.i];
              this.i += 1;
              return ret;
            };
            cljs.core.ArrayIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.ArrayIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ArrayIter.cljs$lang$type = !0;
            cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
            cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayIter");
            };
            cljs.core.__GT_ArrayIter = function(arr, i) {
              return new cljs.core.ArrayIter(arr, i);
            };
            cljs.core.array_iter = function(x) {
              return new cljs.core.ArrayIter(x, 0);
            };
            cljs.core.INIT = {};
            cljs.core.START = {};
            cljs.core.SeqIter = function(_seq, _next) {
              this._seq = _seq;
              this._next = _next;
            };
            cljs.core.SeqIter.prototype.hasNext = function() {
              this._seq === cljs.core.INIT ? (this._seq = cljs.core.START, this._next = cljs.core.seq(this._next)) : this._seq === this._next && (this._next = cljs.core.next(this._seq));
              return null != this._next;
            };
            cljs.core.SeqIter.prototype.next = function() {
              if (this.hasNext()) {
                return this._seq = this._next, cljs.core.first(this._next);
              }
              throw Error("No such element");
            };
            cljs.core.SeqIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.SeqIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$_seq, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$_next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.SeqIter.cljs$lang$type = !0;
            cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
            cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/SeqIter");
            };
            cljs.core.__GT_SeqIter = function(_seq, _next) {
              return new cljs.core.SeqIter(_seq, _next);
            };
            cljs.core.seq_iter = function(coll) {
              return new cljs.core.SeqIter(cljs.core.INIT, coll);
            };
            cljs.core.iter = function(coll) {
              if (cljs.core.iterable_QMARK_(coll)) {
                return cljs.core._iterator(coll);
              }
              if (null == coll) {
                return cljs.core.nil_iter();
              }
              if ("string" === typeof coll) {
                return cljs.core.string_iter(coll);
              }
              if (cljs.core.array_QMARK_(coll)) {
                return cljs.core.array_iter(coll);
              }
              if (cljs.core.seqable_QMARK_(coll)) {
                return cljs.core.seq_iter(coll);
              }
              throw Error(["Cannot create iterator from ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll)].join(""));
            };
            cljs.core.Many = function(vals) {
              this.vals = vals;
            };
            cljs.core.Many.prototype.add = function(o) {
              this.vals.push(o);
              return this;
            };
            cljs.core.Many.prototype.remove = function() {
              return this.vals.shift();
            };
            cljs.core.Many.prototype.isEmpty = function() {
              return 0 === this.vals.length;
            };
            cljs.core.Many.prototype.toString = function() {
              return ["Many: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.vals)].join("");
            };
            cljs.core.Many.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$vals], null);
            };
            cljs.core.Many.cljs$lang$type = !0;
            cljs.core.Many.cljs$lang$ctorStr = "cljs.core/Many";
            cljs.core.Many.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Many");
            };
            cljs.core.__GT_Many = function(vals) {
              return new cljs.core.Many(vals);
            };
            cljs.core.NONE = {};
            cljs.core.Single = function(val) {
              this.val = val;
            };
            cljs.core.Single.prototype.add = function(o) {
              return this.val === cljs.core.NONE ? (this.val = o, this) : new cljs.core.Many([this.val, o]);
            };
            cljs.core.Single.prototype.remove = function() {
              if (this.val === cljs.core.NONE) {
                throw Error("Removing object from empty buffer");
              }
              var ret = this.val;
              this.val = cljs.core.NONE;
              return ret;
            };
            cljs.core.Single.prototype.isEmpty = function() {
              return this.val === cljs.core.NONE;
            };
            cljs.core.Single.prototype.toString = function() {
              return ["Single: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.val)].join("");
            };
            cljs.core.Single.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$val, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Single.cljs$lang$type = !0;
            cljs.core.Single.cljs$lang$ctorStr = "cljs.core/Single";
            cljs.core.Single.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Single");
            };
            cljs.core.__GT_Single = function(val) {
              return new cljs.core.Single(val);
            };
            cljs.core.Empty = function() {
            };
            cljs.core.Empty.prototype.add = function(o) {
              return new cljs.core.Single(o);
            };
            cljs.core.Empty.prototype.remove = function() {
              throw Error("Removing object from empty buffer");
            };
            cljs.core.Empty.prototype.isEmpty = function() {
              return !0;
            };
            cljs.core.Empty.prototype.toString = function() {
              return "Empty";
            };
            cljs.core.Empty.getBasis = function() {
              return cljs.core.PersistentVector.EMPTY;
            };
            cljs.core.Empty.cljs$lang$type = !0;
            cljs.core.Empty.cljs$lang$ctorStr = "cljs.core/Empty";
            cljs.core.Empty.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Empty");
            };
            cljs.core.__GT_Empty = function() {
              return new cljs.core.Empty;
            };
            cljs.core.EMPTY = new cljs.core.Empty;
            cljs.core.MultiIterator = function(iters) {
              this.iters = iters;
            };
            cljs.core.MultiIterator.prototype.hasNext = function() {
              for (var iters__$1 = cljs.core.seq(this.iters);;) {
                if (null != iters__$1) {
                  if (cljs.core.first(iters__$1).hasNext()) {
                    iters__$1 = cljs.core.next(iters__$1);
                  } else {
                    return !1;
                  }
                } else {
                  return !0;
                }
              }
            };
            cljs.core.MultiIterator.prototype.next = function() {
              for (var nexts = [], n__4607__auto___7962 = this.iters.length, i_7963 = 0;;) {
                if (i_7963 < n__4607__auto___7962) {
                  nexts[i_7963] = this.iters[i_7963].next(), i_7963 += 1;
                } else {
                  break;
                }
              }
              return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(nexts, 0);
            };
            cljs.core.MultiIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$iters], null);
            };
            cljs.core.MultiIterator.cljs$lang$type = !0;
            cljs.core.MultiIterator.cljs$lang$ctorStr = "cljs.core/MultiIterator";
            cljs.core.MultiIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/MultiIterator");
            };
            cljs.core.__GT_MultiIterator = function(iters) {
              return new cljs.core.MultiIterator(iters);
            };
            cljs.core.chunkIteratorSeq = function(iter) {
              return new cljs.core.LazySeq(null, function() {
                if (iter.hasNext()) {
                  for (var arr = [], n = 0;;) {
                    if (cljs.core.truth_(function() {
                      var and__4120__auto__ = iter.hasNext();
                      return cljs.core.truth_(and__4120__auto__) ? 32 > n : and__4120__auto__;
                    }())) {
                      arr[n] = iter.next(), n += 1;
                    } else {
                      return cljs.core.chunk_cons(cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arr, 0, n), cljs.core.chunkIteratorSeq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunkIteratorSeq.cljs$core$IFn$_invoke$arity$1(iter) : cljs.core.chunkIteratorSeq.call(null, iter));
                    }
                  }
                } else {
                  return null;
                }
              }, null, null);
            };
            cljs.core.TransformerIterator = function(buffer, _next, completed, xf, sourceIter, multi) {
              this.buffer = buffer;
              this._next = _next;
              this.completed = completed;
              this.xf = xf;
              this.sourceIter = sourceIter;
              this.multi = multi;
            };
            cljs.core.TransformerIterator.prototype.step = function() {
              if (this._next !== cljs.core.NONE) {
                return !0;
              }
              for (;;) {
                if (this._next === cljs.core.NONE) {
                  if (this.buffer.isEmpty()) {
                    if (this.completed) {
                      return !1;
                    }
                    if (this.sourceIter.hasNext()) {
                      if (this.multi) {
                        var JSCompiler_temp = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(this.xf, cljs.core.cons(null, this.sourceIter.next()));
                      } else {
                        JSCompiler_temp = this.sourceIter.next(), JSCompiler_temp = this.xf.cljs$core$IFn$_invoke$arity$2 ? this.xf.cljs$core$IFn$_invoke$arity$2(null, JSCompiler_temp) : this.xf.call(null, null, JSCompiler_temp);
                      }
                      cljs.core.reduced_QMARK_(JSCompiler_temp) && (this.xf.cljs$core$IFn$_invoke$arity$1 ? this.xf.cljs$core$IFn$_invoke$arity$1(null) : this.xf.call(null, null), this.completed = !0);
                    } else {
                      this.xf.cljs$core$IFn$_invoke$arity$1 ? this.xf.cljs$core$IFn$_invoke$arity$1(null) : this.xf.call(null, null), this.completed = !0;
                    }
                  } else {
                    this._next = this.buffer.remove();
                  }
                } else {
                  return !0;
                }
              }
            };
            cljs.core.TransformerIterator.prototype.hasNext = function() {
              return this.step();
            };
            cljs.core.TransformerIterator.prototype.next = function() {
              if (this.hasNext()) {
                var ret = this._next;
                this._next = cljs.core.NONE;
                return ret;
              }
              throw Error("No such element");
            };
            cljs.core.TransformerIterator.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.TransformerIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$buffer, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$_next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$completed, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$xf, 
              new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$sourceIter, cljs$cst$symbol$multi], null);
            };
            cljs.core.TransformerIterator.cljs$lang$type = !0;
            cljs.core.TransformerIterator.cljs$lang$ctorStr = "cljs.core/TransformerIterator";
            cljs.core.TransformerIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TransformerIterator");
            };
            cljs.core.__GT_TransformerIterator = function(buffer, _next, completed, xf, sourceIter, multi) {
              return new cljs.core.TransformerIterator(buffer, _next, completed, xf, sourceIter, multi);
            };
            var G__6392_7966 = cljs.core.TransformerIterator.prototype, G__6393_7967 = cljs.core.ITER_SYMBOL, G__6394_7968 = function(G__6392_7966, G__6393_7967) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6392_7966, G__6393_7967, G__6394_7968);
            cljs.core.transformer_iterator = function(xform, sourceIter, multi) {
              var iterator$jscomp$0 = new cljs.core.TransformerIterator(cljs.core.EMPTY, cljs.core.NONE, !1, null, sourceIter, multi);
              iterator$jscomp$0.xf = function() {
                var G__6395 = function(iterator) {
                  return function() {
                    var G__7969 = null, G__7969__2 = function(acc, o) {
                      iterator.buffer = iterator.buffer.add(o);
                      return acc;
                    };
                    G__7969 = function(acc, o) {
                      switch(arguments.length) {
                        case 0:
                          return null;
                        case 1:
                          return acc;
                        case 2:
                          return G__7969__2.call(this, acc, o);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__7969.cljs$core$IFn$_invoke$arity$0 = function() {
                      return null;
                    };
                    G__7969.cljs$core$IFn$_invoke$arity$1 = function(acc) {
                      return acc;
                    };
                    G__7969.cljs$core$IFn$_invoke$arity$2 = G__7969__2;
                    return G__7969;
                  }();
                }(iterator$jscomp$0);
                return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__6395) : xform.call(null, G__6395);
              }();
              return iterator$jscomp$0;
            };
            cljs.core.TransformerIterator.create = function(xform, source) {
              return cljs.core.transformer_iterator(xform, source, !1);
            };
            cljs.core.TransformerIterator.createMulti = function(xform, sources) {
              return cljs.core.transformer_iterator(xform, new cljs.core.MultiIterator(cljs.core.to_array(sources)), !0);
            };
            cljs.core.sequence = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7971 = arguments.length, i__4731__auto___7972 = 0;;) {
                    if (i__4731__auto___7972 < len__4730__auto___7971) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7972]), i__4731__auto___7972 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return cljs.core.seq_QMARK_(coll) ? coll : (coll = cljs.core.seq(coll)) ? coll : cljs.core.List.EMPTY;
            };
            cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
              xform = cljs.core.chunkIteratorSeq(cljs.core.TransformerIterator.create(xform, cljs.core.iter(coll)));
              return cljs.core.truth_(xform) ? xform : cljs.core.List.EMPTY;
            };
            cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
              xform = cljs.core.chunkIteratorSeq(cljs.core.TransformerIterator.createMulti(xform, function() {
                var G__6403 = cljs.core.iter, G__6404 = cljs.core.cons(coll, colls);
                return cljs.core.map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.map.cljs$core$IFn$_invoke$arity$2(G__6403, G__6404) : cljs.core.map.call(null, G__6403, G__6404);
              }()));
              return cljs.core.truth_(xform) ? xform : cljs.core.List.EMPTY;
            };
            cljs.core.sequence.cljs$lang$applyTo = function(seq6397) {
              var G__6398 = cljs.core.first(seq6397), seq6397__$1 = cljs.core.next(seq6397);
              seq6397 = cljs.core.first(seq6397__$1);
              seq6397__$1 = cljs.core.next(seq6397__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6398, seq6397, seq6397__$1);
            };
            cljs.core.sequence.cljs$lang$maxFixedArity = 2;
            cljs.core.every_QMARK_ = function(pred, coll) {
              for (;;) {
                if (null == cljs.core.seq(coll)) {
                  return !0;
                }
                if (cljs.core.truth_(function() {
                  var G__6405 = cljs.core.first(coll);
                  return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__6405) : pred.call(null, G__6405);
                }())) {
                  var G__7974 = pred, G__7975 = cljs.core.next(coll);
                  pred = G__7974;
                  coll = G__7975;
                } else {
                  return !1;
                }
              }
            };
            cljs.core.not_every_QMARK_ = function(pred, coll) {
              return !cljs.core.every_QMARK_(pred, coll);
            };
            cljs.core.some = function(pred, coll) {
              for (;;) {
                if (coll = cljs.core.seq(coll)) {
                  var or__4131__auto__ = cljs.core.first(coll);
                  or__4131__auto__ = pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(or__4131__auto__) : pred.call(null, or__4131__auto__);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  coll = cljs.core.next(coll);
                } else {
                  return null;
                }
              }
            };
            cljs.core.not_any_QMARK_ = function(pred, coll) {
              return cljs.core.not(cljs.core.some(pred, coll));
            };
            cljs.core.even_QMARK_ = function(n) {
              if (cljs.core.integer_QMARK_(n)) {
                return 0 === (n & 1);
              }
              throw Error(["Argument must be an integer: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join(""));
            };
            cljs.core.odd_QMARK_ = function(n) {
              return !cljs.core.even_QMARK_(n);
            };
            cljs.core.complement = function(f) {
              return function() {
                var G__7978 = null, G__7978__0 = function() {
                  return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
                }, G__7978__1 = function(x) {
                  return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
                }, G__7978__2 = function(x, y) {
                  return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
                }, G__7978__3 = function() {
                  var G__7979__delegate = function(x, y, zs) {
                    return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
                  }, G__7979 = function(x, y, var_args) {
                    var zs = null;
                    if (2 < arguments.length) {
                      zs = 0;
                      for (var G__7980__a = Array(arguments.length - 2); zs < G__7980__a.length;) {
                        G__7980__a[zs] = arguments[zs + 2], ++zs;
                      }
                      zs = new cljs.core.IndexedSeq(G__7980__a, 0, null);
                    }
                    return G__7979__delegate.call(this, x, y, zs);
                  };
                  G__7979.cljs$lang$maxFixedArity = 2;
                  G__7979.cljs$lang$applyTo = function(arglist__7981) {
                    var x = cljs.core.first(arglist__7981);
                    arglist__7981 = cljs.core.next(arglist__7981);
                    var y = cljs.core.first(arglist__7981);
                    arglist__7981 = cljs.core.rest(arglist__7981);
                    return G__7979__delegate(x, y, arglist__7981);
                  };
                  G__7979.cljs$core$IFn$_invoke$arity$variadic = G__7979__delegate;
                  return G__7979;
                }();
                G__7978 = function(x, y, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__7978__0.call(this);
                    case 1:
                      return G__7978__1.call(this, x);
                    case 2:
                      return G__7978__2.call(this, x, y);
                    default:
                      var G__7982 = null;
                      if (2 < arguments.length) {
                        G__7982 = 0;
                        for (var G__7983__a = Array(arguments.length - 2); G__7982 < G__7983__a.length;) {
                          G__7983__a[G__7982] = arguments[G__7982 + 2], ++G__7982;
                        }
                        G__7982 = new cljs.core.IndexedSeq(G__7983__a, 0, null);
                      }
                      return G__7978__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__7982);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__7978.cljs$lang$maxFixedArity = 2;
                G__7978.cljs$lang$applyTo = G__7978__3.cljs$lang$applyTo;
                G__7978.cljs$core$IFn$_invoke$arity$0 = G__7978__0;
                G__7978.cljs$core$IFn$_invoke$arity$1 = G__7978__1;
                G__7978.cljs$core$IFn$_invoke$arity$2 = G__7978__2;
                G__7978.cljs$core$IFn$_invoke$arity$variadic = G__7978__3.cljs$core$IFn$_invoke$arity$variadic;
                return G__7978;
              }();
            };
            cljs.core.constantly = function(x) {
              return function() {
                var G__7984 = function(var_args) {
                  if (0 < arguments.length) {
                    for (var G__7985__i = 0, G__7985__a = Array(arguments.length - 0); G__7985__i < G__7985__a.length;) {
                      G__7985__a[G__7985__i] = arguments[G__7985__i + 0], ++G__7985__i;
                    }
                    new cljs.core.IndexedSeq(G__7985__a, 0, null);
                  }
                  return x;
                };
                G__7984.cljs$lang$maxFixedArity = 0;
                G__7984.cljs$lang$applyTo = function(arglist__7986) {
                  cljs.core.seq(arglist__7986);
                  return x;
                };
                G__7984.cljs$core$IFn$_invoke$arity$variadic = function(args) {
                  return x;
                };
                return G__7984;
              }();
            };
            cljs.core.comp = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___7988 = arguments.length, i__4731__auto___7989 = 0;;) {
                    if (i__4731__auto___7989 < len__4730__auto___7988) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___7989]), i__4731__auto___7989 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.identity;
            };
            cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return f;
            };
            cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
              return function() {
                var G__7991 = null, G__7991__0 = function() {
                  var G__6414 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6414) : f.call(null, G__6414);
                }, G__7991__1 = function(x) {
                  x = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7991__2 = function(x, y) {
                  x = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7991__3 = function(x, y, z) {
                  x = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7991__4 = function() {
                  var G__7992__delegate = function(x, y, z, args) {
                    x = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
                    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                  }, G__7992 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__7993__a = Array(arguments.length - 3); args < G__7993__a.length;) {
                        G__7993__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__7993__a, 0, null);
                    }
                    return G__7992__delegate.call(this, x, y, z, args);
                  };
                  G__7992.cljs$lang$maxFixedArity = 3;
                  G__7992.cljs$lang$applyTo = function(arglist__7994) {
                    var x = cljs.core.first(arglist__7994);
                    arglist__7994 = cljs.core.next(arglist__7994);
                    var y = cljs.core.first(arglist__7994);
                    arglist__7994 = cljs.core.next(arglist__7994);
                    var z = cljs.core.first(arglist__7994);
                    arglist__7994 = cljs.core.rest(arglist__7994);
                    return G__7992__delegate(x, y, z, arglist__7994);
                  };
                  G__7992.cljs$core$IFn$_invoke$arity$variadic = G__7992__delegate;
                  return G__7992;
                }();
                G__7991 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__7991__0.call(this);
                    case 1:
                      return G__7991__1.call(this, x);
                    case 2:
                      return G__7991__2.call(this, x, y);
                    case 3:
                      return G__7991__3.call(this, x, y, z);
                    default:
                      var G__7995 = null;
                      if (3 < arguments.length) {
                        G__7995 = 0;
                        for (var G__7996__a = Array(arguments.length - 3); G__7995 < G__7996__a.length;) {
                          G__7996__a[G__7995] = arguments[G__7995 + 3], ++G__7995;
                        }
                        G__7995 = new cljs.core.IndexedSeq(G__7996__a, 0, null);
                      }
                      return G__7991__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__7995);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__7991.cljs$lang$maxFixedArity = 3;
                G__7991.cljs$lang$applyTo = G__7991__4.cljs$lang$applyTo;
                G__7991.cljs$core$IFn$_invoke$arity$0 = G__7991__0;
                G__7991.cljs$core$IFn$_invoke$arity$1 = G__7991__1;
                G__7991.cljs$core$IFn$_invoke$arity$2 = G__7991__2;
                G__7991.cljs$core$IFn$_invoke$arity$3 = G__7991__3;
                G__7991.cljs$core$IFn$_invoke$arity$variadic = G__7991__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__7991;
              }();
            };
            cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
              return function() {
                var G__7997 = null, G__7997__0 = function() {
                  var G__6419 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
                  G__6419 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__6419) : g.call(null, G__6419);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6419) : f.call(null, G__6419);
                }, G__7997__1 = function(x) {
                  x = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
                  x = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7997__2 = function(x, y) {
                  x = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
                  x = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7997__3 = function(x, y, z) {
                  x = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
                  x = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                }, G__7997__4 = function() {
                  var G__7998__delegate = function(x, y, z, args) {
                    x = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
                    x = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
                    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                  }, G__7998 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__7999__a = Array(arguments.length - 3); args < G__7999__a.length;) {
                        G__7999__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__7999__a, 0, null);
                    }
                    return G__7998__delegate.call(this, x, y, z, args);
                  };
                  G__7998.cljs$lang$maxFixedArity = 3;
                  G__7998.cljs$lang$applyTo = function(arglist__8000) {
                    var x = cljs.core.first(arglist__8000);
                    arglist__8000 = cljs.core.next(arglist__8000);
                    var y = cljs.core.first(arglist__8000);
                    arglist__8000 = cljs.core.next(arglist__8000);
                    var z = cljs.core.first(arglist__8000);
                    arglist__8000 = cljs.core.rest(arglist__8000);
                    return G__7998__delegate(x, y, z, arglist__8000);
                  };
                  G__7998.cljs$core$IFn$_invoke$arity$variadic = G__7998__delegate;
                  return G__7998;
                }();
                G__7997 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__7997__0.call(this);
                    case 1:
                      return G__7997__1.call(this, x);
                    case 2:
                      return G__7997__2.call(this, x, y);
                    case 3:
                      return G__7997__3.call(this, x, y, z);
                    default:
                      var G__8001 = null;
                      if (3 < arguments.length) {
                        G__8001 = 0;
                        for (var G__8002__a = Array(arguments.length - 3); G__8001 < G__8002__a.length;) {
                          G__8002__a[G__8001] = arguments[G__8001 + 3], ++G__8001;
                        }
                        G__8001 = new cljs.core.IndexedSeq(G__8002__a, 0, null);
                      }
                      return G__7997__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8001);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__7997.cljs$lang$maxFixedArity = 3;
                G__7997.cljs$lang$applyTo = G__7997__4.cljs$lang$applyTo;
                G__7997.cljs$core$IFn$_invoke$arity$0 = G__7997__0;
                G__7997.cljs$core$IFn$_invoke$arity$1 = G__7997__1;
                G__7997.cljs$core$IFn$_invoke$arity$2 = G__7997__2;
                G__7997.cljs$core$IFn$_invoke$arity$3 = G__7997__3;
                G__7997.cljs$core$IFn$_invoke$arity$variadic = G__7997__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__7997;
              }();
            };
            cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
              return function(fs__$1) {
                return function() {
                  var G__8003__delegate = function(args) {
                    args = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
                    for (var fs__$2 = cljs.core.next(fs__$1);;) {
                      if (fs__$2) {
                        var fexpr__6429 = cljs.core.first(fs__$2);
                        args = fexpr__6429.cljs$core$IFn$_invoke$arity$1 ? fexpr__6429.cljs$core$IFn$_invoke$arity$1(args) : fexpr__6429.call(null, args);
                        fs__$2 = cljs.core.next(fs__$2);
                      } else {
                        return args;
                      }
                    }
                  }, G__8003 = function(var_args) {
                    var args = null;
                    if (0 < arguments.length) {
                      args = 0;
                      for (var G__8006__a = Array(arguments.length - 0); args < G__8006__a.length;) {
                        G__8006__a[args] = arguments[args + 0], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8006__a, 0, null);
                    }
                    return G__8003__delegate.call(this, args);
                  };
                  G__8003.cljs$lang$maxFixedArity = 0;
                  G__8003.cljs$lang$applyTo = function(arglist__8007) {
                    arglist__8007 = cljs.core.seq(arglist__8007);
                    return G__8003__delegate(arglist__8007);
                  };
                  G__8003.cljs$core$IFn$_invoke$arity$variadic = G__8003__delegate;
                  return G__8003;
                }();
              }(cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs)));
            };
            cljs.core.comp.cljs$lang$applyTo = function(seq6409) {
              var G__6410 = cljs.core.first(seq6409), seq6409__$1 = cljs.core.next(seq6409);
              seq6409 = cljs.core.first(seq6409__$1);
              var seq6409__$2 = cljs.core.next(seq6409__$1);
              seq6409__$1 = cljs.core.first(seq6409__$2);
              seq6409__$2 = cljs.core.next(seq6409__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6410, seq6409, seq6409__$1, seq6409__$2);
            };
            cljs.core.comp.cljs$lang$maxFixedArity = 3;
            cljs.core.partial = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8009 = arguments.length, i__4731__auto___8010 = 0;;) {
                    if (i__4731__auto___8010 < len__4730__auto___8009) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8010]), i__4731__auto___8010 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return f;
            };
            cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
              return function() {
                var G__8012 = null, G__8012__0 = function() {
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
                }, G__8012__1 = function(x) {
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
                }, G__8012__2 = function(x, y) {
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
                }, G__8012__3 = function(x, y, z) {
                  return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
                }, G__8012__4 = function() {
                  var G__8013__delegate = function(x, y, z, args) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args], 0));
                  }, G__8013 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8014__a = Array(arguments.length - 3); args < G__8014__a.length;) {
                        G__8014__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8014__a, 0, null);
                    }
                    return G__8013__delegate.call(this, x, y, z, args);
                  };
                  G__8013.cljs$lang$maxFixedArity = 3;
                  G__8013.cljs$lang$applyTo = function(arglist__8015) {
                    var x = cljs.core.first(arglist__8015);
                    arglist__8015 = cljs.core.next(arglist__8015);
                    var y = cljs.core.first(arglist__8015);
                    arglist__8015 = cljs.core.next(arglist__8015);
                    var z = cljs.core.first(arglist__8015);
                    arglist__8015 = cljs.core.rest(arglist__8015);
                    return G__8013__delegate(x, y, z, arglist__8015);
                  };
                  G__8013.cljs$core$IFn$_invoke$arity$variadic = G__8013__delegate;
                  return G__8013;
                }();
                G__8012 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8012__0.call(this);
                    case 1:
                      return G__8012__1.call(this, x);
                    case 2:
                      return G__8012__2.call(this, x, y);
                    case 3:
                      return G__8012__3.call(this, x, y, z);
                    default:
                      var G__8016 = null;
                      if (3 < arguments.length) {
                        G__8016 = 0;
                        for (var G__8017__a = Array(arguments.length - 3); G__8016 < G__8017__a.length;) {
                          G__8017__a[G__8016] = arguments[G__8016 + 3], ++G__8016;
                        }
                        G__8016 = new cljs.core.IndexedSeq(G__8017__a, 0, null);
                      }
                      return G__8012__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8016);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8012.cljs$lang$maxFixedArity = 3;
                G__8012.cljs$lang$applyTo = G__8012__4.cljs$lang$applyTo;
                G__8012.cljs$core$IFn$_invoke$arity$0 = G__8012__0;
                G__8012.cljs$core$IFn$_invoke$arity$1 = G__8012__1;
                G__8012.cljs$core$IFn$_invoke$arity$2 = G__8012__2;
                G__8012.cljs$core$IFn$_invoke$arity$3 = G__8012__3;
                G__8012.cljs$core$IFn$_invoke$arity$variadic = G__8012__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8012;
              }();
            };
            cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
              return function() {
                var G__8018 = null, G__8018__0 = function() {
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
                }, G__8018__1 = function(x) {
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
                }, G__8018__2 = function(x, y) {
                  return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
                }, G__8018__3 = function(x, y, z) {
                  return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
                }, G__8018__4 = function() {
                  var G__8019__delegate = function(x, y, z, args) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([z, args], 0));
                  }, G__8019 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8020__a = Array(arguments.length - 3); args < G__8020__a.length;) {
                        G__8020__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8020__a, 0, null);
                    }
                    return G__8019__delegate.call(this, x, y, z, args);
                  };
                  G__8019.cljs$lang$maxFixedArity = 3;
                  G__8019.cljs$lang$applyTo = function(arglist__8021) {
                    var x = cljs.core.first(arglist__8021);
                    arglist__8021 = cljs.core.next(arglist__8021);
                    var y = cljs.core.first(arglist__8021);
                    arglist__8021 = cljs.core.next(arglist__8021);
                    var z = cljs.core.first(arglist__8021);
                    arglist__8021 = cljs.core.rest(arglist__8021);
                    return G__8019__delegate(x, y, z, arglist__8021);
                  };
                  G__8019.cljs$core$IFn$_invoke$arity$variadic = G__8019__delegate;
                  return G__8019;
                }();
                G__8018 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8018__0.call(this);
                    case 1:
                      return G__8018__1.call(this, x);
                    case 2:
                      return G__8018__2.call(this, x, y);
                    case 3:
                      return G__8018__3.call(this, x, y, z);
                    default:
                      var G__8022 = null;
                      if (3 < arguments.length) {
                        G__8022 = 0;
                        for (var G__8023__a = Array(arguments.length - 3); G__8022 < G__8023__a.length;) {
                          G__8023__a[G__8022] = arguments[G__8022 + 3], ++G__8022;
                        }
                        G__8022 = new cljs.core.IndexedSeq(G__8023__a, 0, null);
                      }
                      return G__8018__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8022);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8018.cljs$lang$maxFixedArity = 3;
                G__8018.cljs$lang$applyTo = G__8018__4.cljs$lang$applyTo;
                G__8018.cljs$core$IFn$_invoke$arity$0 = G__8018__0;
                G__8018.cljs$core$IFn$_invoke$arity$1 = G__8018__1;
                G__8018.cljs$core$IFn$_invoke$arity$2 = G__8018__2;
                G__8018.cljs$core$IFn$_invoke$arity$3 = G__8018__3;
                G__8018.cljs$core$IFn$_invoke$arity$variadic = G__8018__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8018;
              }();
            };
            cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
              return function() {
                var G__8024 = null, G__8024__0 = function() {
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
                }, G__8024__1 = function(x) {
                  return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
                }, G__8024__2 = function(x, y) {
                  return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
                }, G__8024__3 = function(x, y, z) {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
                }, G__8024__4 = function() {
                  var G__8025__delegate = function(x, y, z, args) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([y, z, args], 0));
                  }, G__8025 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8026__a = Array(arguments.length - 3); args < G__8026__a.length;) {
                        G__8026__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8026__a, 0, null);
                    }
                    return G__8025__delegate.call(this, x, y, z, args);
                  };
                  G__8025.cljs$lang$maxFixedArity = 3;
                  G__8025.cljs$lang$applyTo = function(arglist__8027) {
                    var x = cljs.core.first(arglist__8027);
                    arglist__8027 = cljs.core.next(arglist__8027);
                    var y = cljs.core.first(arglist__8027);
                    arglist__8027 = cljs.core.next(arglist__8027);
                    var z = cljs.core.first(arglist__8027);
                    arglist__8027 = cljs.core.rest(arglist__8027);
                    return G__8025__delegate(x, y, z, arglist__8027);
                  };
                  G__8025.cljs$core$IFn$_invoke$arity$variadic = G__8025__delegate;
                  return G__8025;
                }();
                G__8024 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8024__0.call(this);
                    case 1:
                      return G__8024__1.call(this, x);
                    case 2:
                      return G__8024__2.call(this, x, y);
                    case 3:
                      return G__8024__3.call(this, x, y, z);
                    default:
                      var G__8028 = null;
                      if (3 < arguments.length) {
                        G__8028 = 0;
                        for (var G__8029__a = Array(arguments.length - 3); G__8028 < G__8029__a.length;) {
                          G__8029__a[G__8028] = arguments[G__8028 + 3], ++G__8028;
                        }
                        G__8028 = new cljs.core.IndexedSeq(G__8029__a, 0, null);
                      }
                      return G__8024__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8028);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8024.cljs$lang$maxFixedArity = 3;
                G__8024.cljs$lang$applyTo = G__8024__4.cljs$lang$applyTo;
                G__8024.cljs$core$IFn$_invoke$arity$0 = G__8024__0;
                G__8024.cljs$core$IFn$_invoke$arity$1 = G__8024__1;
                G__8024.cljs$core$IFn$_invoke$arity$2 = G__8024__2;
                G__8024.cljs$core$IFn$_invoke$arity$3 = G__8024__3;
                G__8024.cljs$core$IFn$_invoke$arity$variadic = G__8024__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8024;
              }();
            };
            cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
              return function() {
                var G__8030__delegate = function(args) {
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
                }, G__8030 = function(var_args) {
                  var args = null;
                  if (0 < arguments.length) {
                    args = 0;
                    for (var G__8031__a = Array(arguments.length - 0); args < G__8031__a.length;) {
                      G__8031__a[args] = arguments[args + 0], ++args;
                    }
                    args = new cljs.core.IndexedSeq(G__8031__a, 0, null);
                  }
                  return G__8030__delegate.call(this, args);
                };
                G__8030.cljs$lang$maxFixedArity = 0;
                G__8030.cljs$lang$applyTo = function(arglist__8032) {
                  arglist__8032 = cljs.core.seq(arglist__8032);
                  return G__8030__delegate(arglist__8032);
                };
                G__8030.cljs$core$IFn$_invoke$arity$variadic = G__8030__delegate;
                return G__8030;
              }();
            };
            cljs.core.partial.cljs$lang$applyTo = function(seq6431) {
              var G__6432 = cljs.core.first(seq6431), seq6431__$1 = cljs.core.next(seq6431);
              seq6431 = cljs.core.first(seq6431__$1);
              var seq6431__$2 = cljs.core.next(seq6431__$1);
              seq6431__$1 = cljs.core.first(seq6431__$2);
              var seq6431__$3 = cljs.core.next(seq6431__$2);
              seq6431__$2 = cljs.core.first(seq6431__$3);
              seq6431__$3 = cljs.core.next(seq6431__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6432, seq6431, seq6431__$1, seq6431__$2, seq6431__$3);
            };
            cljs.core.partial.cljs$lang$maxFixedArity = 4;
            cljs.core.fnil = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
              return function() {
                var G__8034 = null, G__8034__1 = function(a) {
                  a = null == a ? x : a;
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a) : f.call(null, a);
                }, G__8034__2 = function(a, b) {
                  a = null == a ? x : a;
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a, b) : f.call(null, a, b);
                }, G__8034__3 = function(a, b, c) {
                  a = null == a ? x : a;
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a, b, c) : f.call(null, a, b, c);
                }, G__8034__4 = function() {
                  var G__8035__delegate = function(a, b, c, ds) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, null == a ? x : a, b, c, ds);
                  }, G__8035 = function(a, b, c, var_args) {
                    var ds = null;
                    if (3 < arguments.length) {
                      ds = 0;
                      for (var G__8036__a = Array(arguments.length - 3); ds < G__8036__a.length;) {
                        G__8036__a[ds] = arguments[ds + 3], ++ds;
                      }
                      ds = new cljs.core.IndexedSeq(G__8036__a, 0, null);
                    }
                    return G__8035__delegate.call(this, a, b, c, ds);
                  };
                  G__8035.cljs$lang$maxFixedArity = 3;
                  G__8035.cljs$lang$applyTo = function(arglist__8037) {
                    var a = cljs.core.first(arglist__8037);
                    arglist__8037 = cljs.core.next(arglist__8037);
                    var b = cljs.core.first(arglist__8037);
                    arglist__8037 = cljs.core.next(arglist__8037);
                    var c = cljs.core.first(arglist__8037);
                    arglist__8037 = cljs.core.rest(arglist__8037);
                    return G__8035__delegate(a, b, c, arglist__8037);
                  };
                  G__8035.cljs$core$IFn$_invoke$arity$variadic = G__8035__delegate;
                  return G__8035;
                }();
                G__8034 = function(a, b, c, var_args) {
                  switch(arguments.length) {
                    case 1:
                      return G__8034__1.call(this, a);
                    case 2:
                      return G__8034__2.call(this, a, b);
                    case 3:
                      return G__8034__3.call(this, a, b, c);
                    default:
                      var G__8038 = null;
                      if (3 < arguments.length) {
                        G__8038 = 0;
                        for (var G__8039__a = Array(arguments.length - 3); G__8038 < G__8039__a.length;) {
                          G__8039__a[G__8038] = arguments[G__8038 + 3], ++G__8038;
                        }
                        G__8038 = new cljs.core.IndexedSeq(G__8039__a, 0, null);
                      }
                      return G__8034__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8038);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8034.cljs$lang$maxFixedArity = 3;
                G__8034.cljs$lang$applyTo = G__8034__4.cljs$lang$applyTo;
                G__8034.cljs$core$IFn$_invoke$arity$1 = G__8034__1;
                G__8034.cljs$core$IFn$_invoke$arity$2 = G__8034__2;
                G__8034.cljs$core$IFn$_invoke$arity$3 = G__8034__3;
                G__8034.cljs$core$IFn$_invoke$arity$variadic = G__8034__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8034;
              }();
            };
            cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
              return function() {
                var G__8040 = null, G__8040__2 = function(a, b) {
                  a = null == a ? x : a;
                  b = null == b ? y : b;
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a, b) : f.call(null, a, b);
                }, G__8040__3 = function(a, b, c) {
                  a = null == a ? x : a;
                  b = null == b ? y : b;
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a, b, c) : f.call(null, a, b, c);
                }, G__8040__4 = function() {
                  var G__8041__delegate = function(a, b, c, ds) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, null == a ? x : a, null == b ? y : b, c, ds);
                  }, G__8041 = function(a, b, c, var_args) {
                    var ds = null;
                    if (3 < arguments.length) {
                      ds = 0;
                      for (var G__8042__a = Array(arguments.length - 3); ds < G__8042__a.length;) {
                        G__8042__a[ds] = arguments[ds + 3], ++ds;
                      }
                      ds = new cljs.core.IndexedSeq(G__8042__a, 0, null);
                    }
                    return G__8041__delegate.call(this, a, b, c, ds);
                  };
                  G__8041.cljs$lang$maxFixedArity = 3;
                  G__8041.cljs$lang$applyTo = function(arglist__8043) {
                    var a = cljs.core.first(arglist__8043);
                    arglist__8043 = cljs.core.next(arglist__8043);
                    var b = cljs.core.first(arglist__8043);
                    arglist__8043 = cljs.core.next(arglist__8043);
                    var c = cljs.core.first(arglist__8043);
                    arglist__8043 = cljs.core.rest(arglist__8043);
                    return G__8041__delegate(a, b, c, arglist__8043);
                  };
                  G__8041.cljs$core$IFn$_invoke$arity$variadic = G__8041__delegate;
                  return G__8041;
                }();
                G__8040 = function(a, b, c, var_args) {
                  switch(arguments.length) {
                    case 2:
                      return G__8040__2.call(this, a, b);
                    case 3:
                      return G__8040__3.call(this, a, b, c);
                    default:
                      var G__8044 = null;
                      if (3 < arguments.length) {
                        G__8044 = 0;
                        for (var G__8045__a = Array(arguments.length - 3); G__8044 < G__8045__a.length;) {
                          G__8045__a[G__8044] = arguments[G__8044 + 3], ++G__8044;
                        }
                        G__8044 = new cljs.core.IndexedSeq(G__8045__a, 0, null);
                      }
                      return G__8040__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8044);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8040.cljs$lang$maxFixedArity = 3;
                G__8040.cljs$lang$applyTo = G__8040__4.cljs$lang$applyTo;
                G__8040.cljs$core$IFn$_invoke$arity$2 = G__8040__2;
                G__8040.cljs$core$IFn$_invoke$arity$3 = G__8040__3;
                G__8040.cljs$core$IFn$_invoke$arity$variadic = G__8040__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8040;
              }();
            };
            cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
              return function() {
                var G__8046 = null, G__8046__2 = function(a, b) {
                  a = null == a ? x : a;
                  b = null == b ? y : b;
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a, b) : f.call(null, a, b);
                }, G__8046__3 = function(a, b, c) {
                  a = null == a ? x : a;
                  b = null == b ? y : b;
                  c = null == c ? z : c;
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a, b, c) : f.call(null, a, b, c);
                }, G__8046__4 = function() {
                  var G__8047__delegate = function(a, b, c, ds) {
                    return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, null == a ? x : a, null == b ? y : b, null == c ? z : c, ds);
                  }, G__8047 = function(a, b, c, var_args) {
                    var ds = null;
                    if (3 < arguments.length) {
                      ds = 0;
                      for (var G__8048__a = Array(arguments.length - 3); ds < G__8048__a.length;) {
                        G__8048__a[ds] = arguments[ds + 3], ++ds;
                      }
                      ds = new cljs.core.IndexedSeq(G__8048__a, 0, null);
                    }
                    return G__8047__delegate.call(this, a, b, c, ds);
                  };
                  G__8047.cljs$lang$maxFixedArity = 3;
                  G__8047.cljs$lang$applyTo = function(arglist__8049) {
                    var a = cljs.core.first(arglist__8049);
                    arglist__8049 = cljs.core.next(arglist__8049);
                    var b = cljs.core.first(arglist__8049);
                    arglist__8049 = cljs.core.next(arglist__8049);
                    var c = cljs.core.first(arglist__8049);
                    arglist__8049 = cljs.core.rest(arglist__8049);
                    return G__8047__delegate(a, b, c, arglist__8049);
                  };
                  G__8047.cljs$core$IFn$_invoke$arity$variadic = G__8047__delegate;
                  return G__8047;
                }();
                G__8046 = function(a, b, c, var_args) {
                  switch(arguments.length) {
                    case 2:
                      return G__8046__2.call(this, a, b);
                    case 3:
                      return G__8046__3.call(this, a, b, c);
                    default:
                      var G__8050 = null;
                      if (3 < arguments.length) {
                        G__8050 = 0;
                        for (var G__8051__a = Array(arguments.length - 3); G__8050 < G__8051__a.length;) {
                          G__8051__a[G__8050] = arguments[G__8050 + 3], ++G__8050;
                        }
                        G__8050 = new cljs.core.IndexedSeq(G__8051__a, 0, null);
                      }
                      return G__8046__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8050);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8046.cljs$lang$maxFixedArity = 3;
                G__8046.cljs$lang$applyTo = G__8046__4.cljs$lang$applyTo;
                G__8046.cljs$core$IFn$_invoke$arity$2 = G__8046__2;
                G__8046.cljs$core$IFn$_invoke$arity$3 = G__8046__3;
                G__8046.cljs$core$IFn$_invoke$arity$variadic = G__8046__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8046;
              }();
            };
            cljs.core.fnil.cljs$lang$maxFixedArity = 4;
            cljs.core.map_indexed = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function(rf) {
                return function(i) {
                  return function() {
                    var G__8053 = null, G__8053__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8053__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8053__2 = function(result, input) {
                      var G__6459 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
                      input = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6459, input) : f.call(null, G__6459, input);
                      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8053 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8053__0.call(this);
                        case 1:
                          return G__8053__1.call(this, result);
                        case 2:
                          return G__8053__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8053.cljs$core$IFn$_invoke$arity$0 = G__8053__0;
                    G__8053.cljs$core$IFn$_invoke$arity$1 = G__8053__1;
                    G__8053.cljs$core$IFn$_invoke$arity$2 = G__8053__2;
                    return G__8053;
                  }();
                }(cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1));
              };
            };
            cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return function cljs$core$mapi(idx, coll__$1) {
                return new cljs.core.LazySeq(null, function() {
                  var temp__5735__auto__ = cljs.core.seq(coll__$1);
                  if (temp__5735__auto__) {
                    if (cljs.core.chunked_seq_QMARK_(temp__5735__auto__)) {
                      for (var c = cljs.core.chunk_first(temp__5735__auto__), size = cljs.core.count(c), b = cljs.core.chunk_buffer(size), i_8055 = 0;;) {
                        if (i_8055 < size) {
                          cljs.core.chunk_append(b, function() {
                            var G__6465 = idx + i_8055, G__6466 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8055);
                            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6465, G__6466) : f.call(null, G__6465, G__6466);
                          }()), i_8055 += 1;
                        } else {
                          break;
                        }
                      }
                      return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(temp__5735__auto__)));
                    }
                    return cljs.core.cons(function() {
                      var G__6468 = cljs.core.first(temp__5735__auto__);
                      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(idx, G__6468) : f.call(null, idx, G__6468);
                    }(), cljs$core$mapi(idx + 1, cljs.core.rest(temp__5735__auto__)));
                  }
                  return null;
                }, null, null);
              }(0, coll);
            };
            cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
            cljs.core.keep = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function(rf) {
                return function() {
                  var G__8058 = null, G__8058__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8058__1 = function(result) {
                    return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8058__2 = function(result, input) {
                    input = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
                    return null == input ? result : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                  };
                  G__8058 = function(result, input) {
                    switch(arguments.length) {
                      case 0:
                        return G__8058__0.call(this);
                      case 1:
                        return G__8058__1.call(this, result);
                      case 2:
                        return G__8058__2.call(this, result, input);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8058.cljs$core$IFn$_invoke$arity$0 = G__8058__0;
                  G__8058.cljs$core$IFn$_invoke$arity$1 = G__8058__1;
                  G__8058.cljs$core$IFn$_invoke$arity$2 = G__8058__2;
                  return G__8058;
                }();
              };
            };
            cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                if (temp__5735__auto__) {
                  if (cljs.core.chunked_seq_QMARK_(temp__5735__auto__)) {
                    for (var c = cljs.core.chunk_first(temp__5735__auto__), size = cljs.core.count(c), b = cljs.core.chunk_buffer(size), i_8060 = 0;;) {
                      if (i_8060 < size) {
                        var x_8061 = function() {
                          var G__6471 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8060);
                          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6471) : f.call(null, G__6471);
                        }();
                        null != x_8061 && cljs.core.chunk_append(b, x_8061);
                        i_8060 += 1;
                      } else {
                        break;
                      }
                    }
                    return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(temp__5735__auto__)));
                  }
                  size = function() {
                    var G__6472 = cljs.core.first(temp__5735__auto__);
                    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6472) : f.call(null, G__6472);
                  }();
                  return null == size ? cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(temp__5735__auto__)) : cljs.core.cons(size, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(temp__5735__auto__)));
                }
                return null;
              }, null, null);
            };
            cljs.core.keep.cljs$lang$maxFixedArity = 2;
            cljs.core.Atom = function(state, meta, validator, watches) {
              this.state = state;
              this.meta = meta;
              this.validator = validator;
              this.watches = watches;
              this.cljs$lang$protocol_mask$partition1$ = 16386;
              this.cljs$lang$protocol_mask$partition0$ = 6455296;
            };
            cljs.core.Atom.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
              return this === other;
            };
            cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
              return this.state;
            };
            cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
              return this.meta;
            };
            cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
              this$ = cljs.core.seq(this.watches);
              for (var chunk__6474 = null, count__6475 = 0, i__6476 = 0;;) {
                if (i__6476 < count__6475) {
                  var vec__6483 = chunk__6474.cljs$core$IIndexed$_nth$arity$2(null, i__6476), key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6483, 0, null);
                  vec__6483 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6483, 1, null);
                  vec__6483.cljs$core$IFn$_invoke$arity$4 ? vec__6483.cljs$core$IFn$_invoke$arity$4(key, this, oldval, newval) : vec__6483.call(null, key, this, oldval, newval);
                  i__6476 += 1;
                } else {
                  if (this$ = cljs.core.seq(this$)) {
                    cljs.core.chunked_seq_QMARK_(this$) ? (chunk__6474 = cljs.core.chunk_first(this$), this$ = cljs.core.chunk_rest(this$), key = chunk__6474, count__6475 = cljs.core.count(chunk__6474), chunk__6474 = key) : (chunk__6474 = cljs.core.first(this$), key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6474, 0, null), vec__6483 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6474, 1, null), vec__6483.cljs$core$IFn$_invoke$arity$4 ? vec__6483.cljs$core$IFn$_invoke$arity$4(key, this, oldval, 
                    newval) : vec__6483.call(null, key, this, oldval, newval), this$ = cljs.core.next(this$), chunk__6474 = null, count__6475 = 0), i__6476 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
              this.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(this.watches, key, f);
              return this;
            };
            cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
              return this.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(this.watches, key);
            };
            cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
              return goog.getUid(this);
            };
            cljs.core.Atom.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$state, cljs$cst$symbol$meta, cljs$cst$symbol$validator, cljs$cst$symbol$watches], null);
            };
            cljs.core.Atom.cljs$lang$type = !0;
            cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
            cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Atom");
            };
            cljs.core.__GT_Atom = function(state, meta, validator, watches) {
              return new cljs.core.Atom(state, meta, validator, watches);
            };
            cljs.core.atom = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8076 = arguments.length, i__4731__auto___8077 = 0;;) {
                    if (i__4731__auto___8077 < len__4730__auto___8076) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8077]), i__4731__auto___8077 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(1), 0, null);
                  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args_arr__4751__auto__);
              }
            };
            cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return new cljs.core.Atom(x, null, null, null);
            };
            cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__6493) {
              var map__6494__$1 = null != p__6493 && (p__6493.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__6493.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__6493) : p__6493;
              p__6493 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6494__$1, cljs$cst$keyword$meta);
              map__6494__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6494__$1, cljs$cst$keyword$validator);
              return new cljs.core.Atom(x, p__6493, map__6494__$1, null);
            };
            cljs.core.atom.cljs$lang$applyTo = function(seq6490) {
              var G__6491 = cljs.core.first(seq6490);
              seq6490 = cljs.core.next(seq6490);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6491, seq6490);
            };
            cljs.core.atom.cljs$lang$maxFixedArity = 1;
            cljs.core.reset_BANG_ = function(a, new_value) {
              if (a instanceof cljs.core.Atom) {
                var validate = a.validator;
                if (null != validate && !cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
                  throw Error("Validator rejected reference state");
                }
                validate = a.state;
                a.state = new_value;
                null != a.watches && a.cljs$core$IWatchable$_notify_watches$arity$3(null, validate, new_value);
                return new_value;
              }
              return cljs.core._reset_BANG_(a, new_value);
            };
            cljs.core.reset_vals_BANG_ = function(a, new_value) {
              var validate = a.validator;
              if (null != validate && !cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
                throw Error("Validator rejected reference state");
              }
              validate = a.state;
              a.state = new_value;
              null != a.watches && cljs.core._notify_watches(a, validate, new_value);
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [validate, new_value], null);
            };
            cljs.core.swap_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8080 = arguments.length, i__4731__auto___8081 = 0;;) {
                    if (i__4731__auto___8081 < len__4730__auto___8080) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8081]), i__4731__auto___8081 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
              return a instanceof cljs.core.Atom ? cljs.core.reset_BANG_(a, function() {
                var G__6503 = a.state;
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6503) : f.call(null, G__6503);
              }()) : cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
            };
            cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
              return a instanceof cljs.core.Atom ? cljs.core.reset_BANG_(a, function() {
                var G__6504 = a.state;
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6504, x) : f.call(null, G__6504, x);
              }()) : cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
            };
            cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
              return a instanceof cljs.core.Atom ? cljs.core.reset_BANG_(a, function() {
                var G__6506 = a.state;
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6506, x, y) : f.call(null, G__6506, x, y);
              }()) : cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
            };
            cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
              return a instanceof cljs.core.Atom ? cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more)) : cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
            };
            cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq6497) {
              var G__6498 = cljs.core.first(seq6497), seq6497__$1 = cljs.core.next(seq6497);
              seq6497 = cljs.core.first(seq6497__$1);
              var seq6497__$2 = cljs.core.next(seq6497__$1);
              seq6497__$1 = cljs.core.first(seq6497__$2);
              var seq6497__$3 = cljs.core.next(seq6497__$2);
              seq6497__$2 = cljs.core.first(seq6497__$3);
              seq6497__$3 = cljs.core.next(seq6497__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6498, seq6497, seq6497__$1, seq6497__$2, seq6497__$3);
            };
            cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
            cljs.core.swap_vals_BANG_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8084 = arguments.length, i__4731__auto___8085 = 0;;) {
                    if (i__4731__auto___8085 < len__4730__auto___8084) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8085]), i__4731__auto___8085 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
              return cljs.core.reset_vals_BANG_(a, function() {
                var G__6516 = a.state;
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6516) : f.call(null, G__6516);
              }());
            };
            cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
              return cljs.core.reset_vals_BANG_(a, function() {
                var G__6517 = a.state;
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6517, x) : f.call(null, G__6517, x);
              }());
            };
            cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
              return cljs.core.reset_vals_BANG_(a, function() {
                var G__6519 = a.state;
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6519, x, y) : f.call(null, G__6519, x, y);
              }());
            };
            cljs.core.swap_vals_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
              return cljs.core.reset_vals_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
            };
            cljs.core.swap_vals_BANG_.cljs$lang$applyTo = function(seq6510) {
              var G__6511 = cljs.core.first(seq6510), seq6510__$1 = cljs.core.next(seq6510);
              seq6510 = cljs.core.first(seq6510__$1);
              var seq6510__$2 = cljs.core.next(seq6510__$1);
              seq6510__$1 = cljs.core.first(seq6510__$2);
              var seq6510__$3 = cljs.core.next(seq6510__$2);
              seq6510__$2 = cljs.core.first(seq6510__$3);
              seq6510__$3 = cljs.core.next(seq6510__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6511, seq6510, seq6510__$1, seq6510__$2, seq6510__$3);
            };
            cljs.core.swap_vals_BANG_.cljs$lang$maxFixedArity = 4;
            cljs.core.compare_and_set_BANG_ = function(a, oldval, newval) {
              return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval) ? (cljs.core.reset_BANG_(a, newval), !0) : !1;
            };
            cljs.core.set_validator_BANG_ = function(iref, val) {
              if (null != val && cljs.core.not(function() {
                var G__6523 = cljs.core._deref(iref);
                return val.cljs$core$IFn$_invoke$arity$1 ? val.cljs$core$IFn$_invoke$arity$1(G__6523) : val.call(null, G__6523);
              }())) {
                throw Error("Validator rejected reference state");
              }
              return iref.validator = val;
            };
            cljs.core.get_validator = function(iref) {
              return iref.validator;
            };
            cljs.core.Volatile = function(state) {
              this.state = state;
              this.cljs$lang$protocol_mask$partition0$ = 32768;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.Volatile.prototype.cljs$core$IVolatile$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
              return this.state = new_state;
            };
            cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
              return this.state;
            };
            cljs.core.Volatile.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$state, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Volatile.cljs$lang$type = !0;
            cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
            cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Volatile");
            };
            cljs.core.__GT_Volatile = function(state) {
              return new cljs.core.Volatile(state);
            };
            cljs.core.volatile_BANG_ = function(val) {
              return new cljs.core.Volatile(val);
            };
            cljs.core.volatile_QMARK_ = function(x) {
              return x instanceof cljs.core.Volatile;
            };
            cljs.core.vreset_BANG_ = function(vol, newval) {
              return cljs.core._vreset_BANG_(vol, newval);
            };
            cljs.core.keep_indexed = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function(rf) {
                return function(ia) {
                  return function() {
                    var G__8088 = null, G__8088__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8088__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8088__2 = function(result, input) {
                      var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
                      input = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
                      return null == input ? result : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8088 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8088__0.call(this);
                        case 1:
                          return G__8088__1.call(this, result);
                        case 2:
                          return G__8088__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8088.cljs$core$IFn$_invoke$arity$0 = G__8088__0;
                    G__8088.cljs$core$IFn$_invoke$arity$1 = G__8088__1;
                    G__8088.cljs$core$IFn$_invoke$arity$2 = G__8088__2;
                    return G__8088;
                  }();
                }(cljs.core.volatile_BANG_(-1));
              };
            };
            cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return function cljs$core$keepi(idx, coll__$1) {
                return new cljs.core.LazySeq(null, function() {
                  var temp__5735__auto__ = cljs.core.seq(coll__$1);
                  if (temp__5735__auto__) {
                    if (cljs.core.chunked_seq_QMARK_(temp__5735__auto__)) {
                      for (var c = cljs.core.chunk_first(temp__5735__auto__), size = cljs.core.count(c), b = cljs.core.chunk_buffer(size), i_8090 = 0;;) {
                        if (i_8090 < size) {
                          var x_8091 = function() {
                            var G__6530 = idx + i_8090, G__6531 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8090);
                            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6530, G__6531) : f.call(null, G__6530, G__6531);
                          }();
                          null != x_8091 && cljs.core.chunk_append(b, x_8091);
                          i_8090 += 1;
                        } else {
                          break;
                        }
                      }
                      return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(temp__5735__auto__)));
                    }
                    size = function() {
                      var G__6533 = cljs.core.first(temp__5735__auto__);
                      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(idx, G__6533) : f.call(null, idx, G__6533);
                    }();
                    return null == size ? cljs$core$keepi(idx + 1, cljs.core.rest(temp__5735__auto__)) : cljs.core.cons(size, cljs$core$keepi(idx + 1, cljs.core.rest(temp__5735__auto__)));
                  }
                  return null;
                }, null, null);
              }(0, coll);
            };
            cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
            cljs.core.every_pred = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8094 = arguments.length, i__4731__auto___8095 = 0;;) {
                    if (i__4731__auto___8095 < len__4730__auto___8094) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8095]), i__4731__auto___8095 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
              return function() {
                var cljs$core$ep1 = null, cljs$core$ep1__1 = function(x) {
                  return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
                }, cljs$core$ep1__2 = function(x, y) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) ? p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y) : and__4120__auto__;
                  }());
                }, cljs$core$ep1__3 = function(x, y, z) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) ? (and__4120__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y), cljs.core.truth_(and__4120__auto__) ? p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep1__4 = function() {
                  var G__8097__delegate = function(x, y, z, args) {
                    return cljs.core.boolean$(function() {
                      var and__4120__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
                      return cljs.core.truth_(and__4120__auto__) ? cljs.core.every_QMARK_(p, args) : and__4120__auto__;
                    }());
                  }, G__8097 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8098__a = Array(arguments.length - 3); args < G__8098__a.length;) {
                        G__8098__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8098__a, 0, null);
                    }
                    return G__8097__delegate.call(this, x, y, z, args);
                  };
                  G__8097.cljs$lang$maxFixedArity = 3;
                  G__8097.cljs$lang$applyTo = function(arglist__8099) {
                    var x = cljs.core.first(arglist__8099);
                    arglist__8099 = cljs.core.next(arglist__8099);
                    var y = cljs.core.first(arglist__8099);
                    arglist__8099 = cljs.core.next(arglist__8099);
                    var z = cljs.core.first(arglist__8099);
                    arglist__8099 = cljs.core.rest(arglist__8099);
                    return G__8097__delegate(x, y, z, arglist__8099);
                  };
                  G__8097.cljs$core$IFn$_invoke$arity$variadic = G__8097__delegate;
                  return G__8097;
                }();
                cljs$core$ep1 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return !0;
                    case 1:
                      return cljs$core$ep1__1.call(this, x);
                    case 2:
                      return cljs$core$ep1__2.call(this, x, y);
                    case 3:
                      return cljs$core$ep1__3.call(this, x, y, z);
                    default:
                      var G__8100 = null;
                      if (3 < arguments.length) {
                        G__8100 = 0;
                        for (var G__8101__a = Array(arguments.length - 3); G__8100 < G__8101__a.length;) {
                          G__8101__a[G__8100] = arguments[G__8100 + 3], ++G__8100;
                        }
                        G__8100 = new cljs.core.IndexedSeq(G__8101__a, 0, null);
                      }
                      return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8100);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$ep1.cljs$lang$maxFixedArity = 3;
                cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
                cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = function() {
                  return !0;
                };
                cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
                cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
                cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
                cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$ep1;
              }();
            };
            cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
              return function() {
                var cljs$core$ep2 = null, cljs$core$ep2__1 = function(x) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) ? p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x) : and__4120__auto__;
                  }());
                }, cljs$core$ep2__2 = function(x, y) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y), cljs.core.truth_(and__4120__auto__)) ? (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x), cljs.core.truth_(and__4120__auto__) ? p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep2__3 = function(x, y, z) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x), cljs.core.truth_(and__4120__auto__)))) ? 
                    (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y), cljs.core.truth_(and__4120__auto__) ? p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep2__4 = function() {
                  var G__8102__delegate = function(x, y, z, args) {
                    return cljs.core.boolean$(function() {
                      var and__4120__auto__$jscomp$0 = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
                      return cljs.core.truth_(and__4120__auto__$jscomp$0) ? cljs.core.every_QMARK_(function(and__4120__auto__) {
                        return function(p1__6534_SHARP_) {
                          var and__4120__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__6534_SHARP_) : p1.call(null, p1__6534_SHARP_);
                          return cljs.core.truth_(and__4120__auto____$1) ? p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__6534_SHARP_) : p2.call(null, p1__6534_SHARP_) : and__4120__auto____$1;
                        };
                      }(), args) : and__4120__auto__$jscomp$0;
                    }());
                  }, G__8102 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8103__a = Array(arguments.length - 3); args < G__8103__a.length;) {
                        G__8103__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8103__a, 0, null);
                    }
                    return G__8102__delegate.call(this, x, y, z, args);
                  };
                  G__8102.cljs$lang$maxFixedArity = 3;
                  G__8102.cljs$lang$applyTo = function(arglist__8104) {
                    var x = cljs.core.first(arglist__8104);
                    arglist__8104 = cljs.core.next(arglist__8104);
                    var y = cljs.core.first(arglist__8104);
                    arglist__8104 = cljs.core.next(arglist__8104);
                    var z = cljs.core.first(arglist__8104);
                    arglist__8104 = cljs.core.rest(arglist__8104);
                    return G__8102__delegate(x, y, z, arglist__8104);
                  };
                  G__8102.cljs$core$IFn$_invoke$arity$variadic = G__8102__delegate;
                  return G__8102;
                }();
                cljs$core$ep2 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return !0;
                    case 1:
                      return cljs$core$ep2__1.call(this, x);
                    case 2:
                      return cljs$core$ep2__2.call(this, x, y);
                    case 3:
                      return cljs$core$ep2__3.call(this, x, y, z);
                    default:
                      var G__8105 = null;
                      if (3 < arguments.length) {
                        G__8105 = 0;
                        for (var G__8106__a = Array(arguments.length - 3); G__8105 < G__8106__a.length;) {
                          G__8106__a[G__8105] = arguments[G__8105 + 3], ++G__8105;
                        }
                        G__8105 = new cljs.core.IndexedSeq(G__8106__a, 0, null);
                      }
                      return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8105);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$ep2.cljs$lang$maxFixedArity = 3;
                cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
                cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = function() {
                  return !0;
                };
                cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
                cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
                cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
                cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$ep2;
              }();
            };
            cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
              return function() {
                var cljs$core$ep3 = null, cljs$core$ep3__1 = function(x) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) ? (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x), cljs.core.truth_(and__4120__auto__) ? p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep3__2 = function(x, y) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y), cljs.core.truth_(and__4120__auto__)))) ? 
                    (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y), cljs.core.truth_(and__4120__auto__) ? p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep3__3 = function(x, y, z) {
                  return cljs.core.boolean$(function() {
                    var and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                    return cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y), cljs.core.truth_(and__4120__auto__) && 
                    (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y), cljs.core.truth_(and__4120__auto__) && (and__4120__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z), cljs.core.truth_(and__4120__auto__))))))) ? (and__4120__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? 
                    p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z), cljs.core.truth_(and__4120__auto__) ? p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z) : and__4120__auto__) : and__4120__auto__;
                  }());
                }, cljs$core$ep3__4 = function() {
                  var G__8107__delegate = function(x, y, z, args) {
                    return cljs.core.boolean$(function() {
                      var and__4120__auto__$jscomp$0 = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
                      return cljs.core.truth_(and__4120__auto__$jscomp$0) ? cljs.core.every_QMARK_(function(and__4120__auto__) {
                        return function(p1__6535_SHARP_) {
                          var and__4120__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__6535_SHARP_) : p1.call(null, p1__6535_SHARP_);
                          return cljs.core.truth_(and__4120__auto____$1) ? (and__4120__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__6535_SHARP_) : p2.call(null, p1__6535_SHARP_), cljs.core.truth_(and__4120__auto____$1) ? p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__6535_SHARP_) : p3.call(null, p1__6535_SHARP_) : and__4120__auto____$1) : and__4120__auto____$1;
                        };
                      }(), args) : and__4120__auto__$jscomp$0;
                    }());
                  }, G__8107 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8108__a = Array(arguments.length - 3); args < G__8108__a.length;) {
                        G__8108__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8108__a, 0, null);
                    }
                    return G__8107__delegate.call(this, x, y, z, args);
                  };
                  G__8107.cljs$lang$maxFixedArity = 3;
                  G__8107.cljs$lang$applyTo = function(arglist__8109) {
                    var x = cljs.core.first(arglist__8109);
                    arglist__8109 = cljs.core.next(arglist__8109);
                    var y = cljs.core.first(arglist__8109);
                    arglist__8109 = cljs.core.next(arglist__8109);
                    var z = cljs.core.first(arglist__8109);
                    arglist__8109 = cljs.core.rest(arglist__8109);
                    return G__8107__delegate(x, y, z, arglist__8109);
                  };
                  G__8107.cljs$core$IFn$_invoke$arity$variadic = G__8107__delegate;
                  return G__8107;
                }();
                cljs$core$ep3 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return !0;
                    case 1:
                      return cljs$core$ep3__1.call(this, x);
                    case 2:
                      return cljs$core$ep3__2.call(this, x, y);
                    case 3:
                      return cljs$core$ep3__3.call(this, x, y, z);
                    default:
                      var G__8110 = null;
                      if (3 < arguments.length) {
                        G__8110 = 0;
                        for (var G__8111__a = Array(arguments.length - 3); G__8110 < G__8111__a.length;) {
                          G__8111__a[G__8110] = arguments[G__8110 + 3], ++G__8110;
                        }
                        G__8110 = new cljs.core.IndexedSeq(G__8111__a, 0, null);
                      }
                      return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8110);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$ep3.cljs$lang$maxFixedArity = 3;
                cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
                cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = function() {
                  return !0;
                };
                cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
                cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
                cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
                cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$ep3;
              }();
            };
            cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
              return function(ps__$1$jscomp$0) {
                return function() {
                  var cljs$core$epn = null, cljs$core$epn__1 = function(x) {
                    return cljs.core.every_QMARK_(function(ps__$1) {
                      return function(p1__6536_SHARP_) {
                        return p1__6536_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6536_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6536_SHARP_.call(null, x);
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$epn__2 = function(x, y) {
                    return cljs.core.every_QMARK_(function(ps__$1) {
                      return function(p1__6537_SHARP_) {
                        var and__4120__auto__ = p1__6537_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6537_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6537_SHARP_.call(null, x);
                        return cljs.core.truth_(and__4120__auto__) ? p1__6537_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6537_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__6537_SHARP_.call(null, y) : and__4120__auto__;
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$epn__3 = function(x, y, z) {
                    return cljs.core.every_QMARK_(function(ps__$1) {
                      return function(p1__6538_SHARP_) {
                        var and__4120__auto__ = p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6538_SHARP_.call(null, x);
                        return cljs.core.truth_(and__4120__auto__) ? (and__4120__auto__ = p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__6538_SHARP_.call(null, y), cljs.core.truth_(and__4120__auto__) ? p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6538_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__6538_SHARP_.call(null, z) : and__4120__auto__) : and__4120__auto__;
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$epn__4 = function() {
                    var G__8112__delegate = function(x, y, z, args) {
                      return cljs.core.boolean$(function() {
                        var and__4120__auto__$jscomp$0 = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
                        return cljs.core.truth_(and__4120__auto__$jscomp$0) ? cljs.core.every_QMARK_(function(and__4120__auto__, ps__$1) {
                          return function(p1__6539_SHARP_) {
                            return cljs.core.every_QMARK_(p1__6539_SHARP_, args);
                          };
                        }(), ps__$1$jscomp$0) : and__4120__auto__$jscomp$0;
                      }());
                    }, G__8112 = function(x, y, z, var_args) {
                      var args = null;
                      if (3 < arguments.length) {
                        args = 0;
                        for (var G__8113__a = Array(arguments.length - 3); args < G__8113__a.length;) {
                          G__8113__a[args] = arguments[args + 3], ++args;
                        }
                        args = new cljs.core.IndexedSeq(G__8113__a, 0, null);
                      }
                      return G__8112__delegate.call(this, x, y, z, args);
                    };
                    G__8112.cljs$lang$maxFixedArity = 3;
                    G__8112.cljs$lang$applyTo = function(arglist__8114) {
                      var x = cljs.core.first(arglist__8114);
                      arglist__8114 = cljs.core.next(arglist__8114);
                      var y = cljs.core.first(arglist__8114);
                      arglist__8114 = cljs.core.next(arglist__8114);
                      var z = cljs.core.first(arglist__8114);
                      arglist__8114 = cljs.core.rest(arglist__8114);
                      return G__8112__delegate(x, y, z, arglist__8114);
                    };
                    G__8112.cljs$core$IFn$_invoke$arity$variadic = G__8112__delegate;
                    return G__8112;
                  }();
                  cljs$core$epn = function(x, y, z, var_args) {
                    switch(arguments.length) {
                      case 0:
                        return !0;
                      case 1:
                        return cljs$core$epn__1.call(this, x);
                      case 2:
                        return cljs$core$epn__2.call(this, x, y);
                      case 3:
                        return cljs$core$epn__3.call(this, x, y, z);
                      default:
                        var G__8115 = null;
                        if (3 < arguments.length) {
                          G__8115 = 0;
                          for (var G__8116__a = Array(arguments.length - 3); G__8115 < G__8116__a.length;) {
                            G__8116__a[G__8115] = arguments[G__8115 + 3], ++G__8115;
                          }
                          G__8115 = new cljs.core.IndexedSeq(G__8116__a, 0, null);
                        }
                        return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8115);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$epn.cljs$lang$maxFixedArity = 3;
                  cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
                  cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = function() {
                    return !0;
                  };
                  cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
                  cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
                  cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
                  cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
                  return cljs$core$epn;
                }();
              }(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps));
            };
            cljs.core.every_pred.cljs$lang$applyTo = function(seq6541) {
              var G__6542 = cljs.core.first(seq6541), seq6541__$1 = cljs.core.next(seq6541);
              seq6541 = cljs.core.first(seq6541__$1);
              var seq6541__$2 = cljs.core.next(seq6541__$1);
              seq6541__$1 = cljs.core.first(seq6541__$2);
              seq6541__$2 = cljs.core.next(seq6541__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6542, seq6541, seq6541__$1, seq6541__$2);
            };
            cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
            cljs.core.some_fn = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8118 = arguments.length, i__4731__auto___8119 = 0;;) {
                    if (i__4731__auto___8119 < len__4730__auto___8118) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8119]), i__4731__auto___8119 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
              return function() {
                var cljs$core$sp1 = null, cljs$core$sp1__1 = function(x) {
                  return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
                }, cljs$core$sp1__2 = function(x, y) {
                  x = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
                  return cljs.core.truth_(x) ? x : p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
                }, cljs$core$sp1__3 = function(x, y, z) {
                  x = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  y = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
                  return cljs.core.truth_(y) ? y : p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
                }, cljs$core$sp1__4 = function() {
                  var G__8121__delegate = function(x, y, z, args) {
                    x = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
                    return cljs.core.truth_(x) ? x : cljs.core.some(p, args);
                  }, G__8121 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8122__a = Array(arguments.length - 3); args < G__8122__a.length;) {
                        G__8122__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8122__a, 0, null);
                    }
                    return G__8121__delegate.call(this, x, y, z, args);
                  };
                  G__8121.cljs$lang$maxFixedArity = 3;
                  G__8121.cljs$lang$applyTo = function(arglist__8123) {
                    var x = cljs.core.first(arglist__8123);
                    arglist__8123 = cljs.core.next(arglist__8123);
                    var y = cljs.core.first(arglist__8123);
                    arglist__8123 = cljs.core.next(arglist__8123);
                    var z = cljs.core.first(arglist__8123);
                    arglist__8123 = cljs.core.rest(arglist__8123);
                    return G__8121__delegate(x, y, z, arglist__8123);
                  };
                  G__8121.cljs$core$IFn$_invoke$arity$variadic = G__8121__delegate;
                  return G__8121;
                }();
                cljs$core$sp1 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return null;
                    case 1:
                      return cljs$core$sp1__1.call(this, x);
                    case 2:
                      return cljs$core$sp1__2.call(this, x, y);
                    case 3:
                      return cljs$core$sp1__3.call(this, x, y, z);
                    default:
                      var G__8124 = null;
                      if (3 < arguments.length) {
                        G__8124 = 0;
                        for (var G__8125__a = Array(arguments.length - 3); G__8124 < G__8125__a.length;) {
                          G__8125__a[G__8124] = arguments[G__8124 + 3], ++G__8124;
                        }
                        G__8124 = new cljs.core.IndexedSeq(G__8125__a, 0, null);
                      }
                      return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8124);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$sp1.cljs$lang$maxFixedArity = 3;
                cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
                cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = function() {
                  return null;
                };
                cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
                cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
                cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
                cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$sp1;
              }();
            };
            cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
              return function() {
                var cljs$core$sp2 = null, cljs$core$sp2__1 = function(x) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                }, cljs$core$sp2__2 = function(x, y) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  x = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                  return cljs.core.truth_(x) ? x : p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                }, cljs$core$sp2__3 = function(x, y, z) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  x = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  y = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                  return cljs.core.truth_(y) ? y : p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                }, cljs$core$sp2__4 = function() {
                  var G__8126__delegate = function(x, y, z, args) {
                    x = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
                    return cljs.core.truth_(x) ? x : cljs.core.some(function(or__4131__auto__) {
                      return function(p1__6546_SHARP_) {
                        var or__4131__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__6546_SHARP_) : p1.call(null, p1__6546_SHARP_);
                        return cljs.core.truth_(or__4131__auto____$1) ? or__4131__auto____$1 : p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__6546_SHARP_) : p2.call(null, p1__6546_SHARP_);
                      };
                    }(), args);
                  }, G__8126 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8127__a = Array(arguments.length - 3); args < G__8127__a.length;) {
                        G__8127__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8127__a, 0, null);
                    }
                    return G__8126__delegate.call(this, x, y, z, args);
                  };
                  G__8126.cljs$lang$maxFixedArity = 3;
                  G__8126.cljs$lang$applyTo = function(arglist__8128) {
                    var x = cljs.core.first(arglist__8128);
                    arglist__8128 = cljs.core.next(arglist__8128);
                    var y = cljs.core.first(arglist__8128);
                    arglist__8128 = cljs.core.next(arglist__8128);
                    var z = cljs.core.first(arglist__8128);
                    arglist__8128 = cljs.core.rest(arglist__8128);
                    return G__8126__delegate(x, y, z, arglist__8128);
                  };
                  G__8126.cljs$core$IFn$_invoke$arity$variadic = G__8126__delegate;
                  return G__8126;
                }();
                cljs$core$sp2 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return null;
                    case 1:
                      return cljs$core$sp2__1.call(this, x);
                    case 2:
                      return cljs$core$sp2__2.call(this, x, y);
                    case 3:
                      return cljs$core$sp2__3.call(this, x, y, z);
                    default:
                      var G__8129 = null;
                      if (3 < arguments.length) {
                        G__8129 = 0;
                        for (var G__8130__a = Array(arguments.length - 3); G__8129 < G__8130__a.length;) {
                          G__8130__a[G__8129] = arguments[G__8129 + 3], ++G__8129;
                        }
                        G__8129 = new cljs.core.IndexedSeq(G__8130__a, 0, null);
                      }
                      return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8129);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$sp2.cljs$lang$maxFixedArity = 3;
                cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
                cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = function() {
                  return null;
                };
                cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
                cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
                cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
                cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$sp2;
              }();
            };
            cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
              return function() {
                var cljs$core$sp3 = null, cljs$core$sp3__1 = function(x) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                  return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
                }, cljs$core$sp3__2 = function(x, y) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  x = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  x = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  x = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                  return cljs.core.truth_(x) ? x : p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                }, cljs$core$sp3__3 = function(x, y, z) {
                  var or__4131__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  or__4131__auto__ = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
                  if (cljs.core.truth_(or__4131__auto__)) {
                    return or__4131__auto__;
                  }
                  x = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  x = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  x = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                  if (cljs.core.truth_(x)) {
                    return x;
                  }
                  y = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(y)) {
                    return y;
                  }
                  y = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(y)) {
                    return y;
                  }
                  y = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                  return cljs.core.truth_(y) ? y : p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                }, cljs$core$sp3__4 = function() {
                  var G__8131__delegate = function(x, y, z, args) {
                    x = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
                    return cljs.core.truth_(x) ? x : cljs.core.some(function(or__4131__auto__) {
                      return function(p1__6547_SHARP_) {
                        var or__4131__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__6547_SHARP_) : p1.call(null, p1__6547_SHARP_);
                        if (cljs.core.truth_(or__4131__auto____$1)) {
                          return or__4131__auto____$1;
                        }
                        or__4131__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__6547_SHARP_) : p2.call(null, p1__6547_SHARP_);
                        return cljs.core.truth_(or__4131__auto____$1) ? or__4131__auto____$1 : p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__6547_SHARP_) : p3.call(null, p1__6547_SHARP_);
                      };
                    }(), args);
                  }, G__8131 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8132__a = Array(arguments.length - 3); args < G__8132__a.length;) {
                        G__8132__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8132__a, 0, null);
                    }
                    return G__8131__delegate.call(this, x, y, z, args);
                  };
                  G__8131.cljs$lang$maxFixedArity = 3;
                  G__8131.cljs$lang$applyTo = function(arglist__8133) {
                    var x = cljs.core.first(arglist__8133);
                    arglist__8133 = cljs.core.next(arglist__8133);
                    var y = cljs.core.first(arglist__8133);
                    arglist__8133 = cljs.core.next(arglist__8133);
                    var z = cljs.core.first(arglist__8133);
                    arglist__8133 = cljs.core.rest(arglist__8133);
                    return G__8131__delegate(x, y, z, arglist__8133);
                  };
                  G__8131.cljs$core$IFn$_invoke$arity$variadic = G__8131__delegate;
                  return G__8131;
                }();
                cljs$core$sp3 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return null;
                    case 1:
                      return cljs$core$sp3__1.call(this, x);
                    case 2:
                      return cljs$core$sp3__2.call(this, x, y);
                    case 3:
                      return cljs$core$sp3__3.call(this, x, y, z);
                    default:
                      var G__8134 = null;
                      if (3 < arguments.length) {
                        G__8134 = 0;
                        for (var G__8135__a = Array(arguments.length - 3); G__8134 < G__8135__a.length;) {
                          G__8135__a[G__8134] = arguments[G__8134 + 3], ++G__8134;
                        }
                        G__8134 = new cljs.core.IndexedSeq(G__8135__a, 0, null);
                      }
                      return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8134);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                cljs$core$sp3.cljs$lang$maxFixedArity = 3;
                cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
                cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = function() {
                  return null;
                };
                cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
                cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
                cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
                cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
                return cljs$core$sp3;
              }();
            };
            cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
              return function(ps__$1$jscomp$0) {
                return function() {
                  var cljs$core$spn = null, cljs$core$spn__1 = function(x) {
                    return cljs.core.some(function(ps__$1) {
                      return function(p1__6548_SHARP_) {
                        return p1__6548_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6548_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6548_SHARP_.call(null, x);
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$spn__2 = function(x, y) {
                    return cljs.core.some(function(ps__$1) {
                      return function(p1__6549_SHARP_) {
                        var or__4131__auto__ = p1__6549_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6549_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6549_SHARP_.call(null, x);
                        return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : p1__6549_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6549_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__6549_SHARP_.call(null, y);
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$spn__3 = function(x, y, z) {
                    return cljs.core.some(function(ps__$1) {
                      return function(p1__6550_SHARP_) {
                        var or__4131__auto__ = p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__6550_SHARP_.call(null, x);
                        if (cljs.core.truth_(or__4131__auto__)) {
                          return or__4131__auto__;
                        }
                        or__4131__auto__ = p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__6550_SHARP_.call(null, y);
                        return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__6550_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__6550_SHARP_.call(null, z);
                      };
                    }(), ps__$1$jscomp$0);
                  }, cljs$core$spn__4 = function() {
                    var G__8136__delegate = function(x, y, z, args) {
                      x = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
                      return cljs.core.truth_(x) ? x : cljs.core.some(function(or__4131__auto__, ps__$1) {
                        return function(p1__6551_SHARP_) {
                          return cljs.core.some(p1__6551_SHARP_, args);
                        };
                      }(), ps__$1$jscomp$0);
                    }, G__8136 = function(x, y, z, var_args) {
                      var args = null;
                      if (3 < arguments.length) {
                        args = 0;
                        for (var G__8137__a = Array(arguments.length - 3); args < G__8137__a.length;) {
                          G__8137__a[args] = arguments[args + 3], ++args;
                        }
                        args = new cljs.core.IndexedSeq(G__8137__a, 0, null);
                      }
                      return G__8136__delegate.call(this, x, y, z, args);
                    };
                    G__8136.cljs$lang$maxFixedArity = 3;
                    G__8136.cljs$lang$applyTo = function(arglist__8138) {
                      var x = cljs.core.first(arglist__8138);
                      arglist__8138 = cljs.core.next(arglist__8138);
                      var y = cljs.core.first(arglist__8138);
                      arglist__8138 = cljs.core.next(arglist__8138);
                      var z = cljs.core.first(arglist__8138);
                      arglist__8138 = cljs.core.rest(arglist__8138);
                      return G__8136__delegate(x, y, z, arglist__8138);
                    };
                    G__8136.cljs$core$IFn$_invoke$arity$variadic = G__8136__delegate;
                    return G__8136;
                  }();
                  cljs$core$spn = function(x, y, z, var_args) {
                    switch(arguments.length) {
                      case 0:
                        return null;
                      case 1:
                        return cljs$core$spn__1.call(this, x);
                      case 2:
                        return cljs$core$spn__2.call(this, x, y);
                      case 3:
                        return cljs$core$spn__3.call(this, x, y, z);
                      default:
                        var G__8139 = null;
                        if (3 < arguments.length) {
                          G__8139 = 0;
                          for (var G__8140__a = Array(arguments.length - 3); G__8139 < G__8140__a.length;) {
                            G__8140__a[G__8139] = arguments[G__8139 + 3], ++G__8139;
                          }
                          G__8139 = new cljs.core.IndexedSeq(G__8140__a, 0, null);
                        }
                        return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8139);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$spn.cljs$lang$maxFixedArity = 3;
                  cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
                  cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = function() {
                    return null;
                  };
                  cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
                  cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
                  cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
                  cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
                  return cljs$core$spn;
                }();
              }(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps));
            };
            cljs.core.some_fn.cljs$lang$applyTo = function(seq6553) {
              var G__6554 = cljs.core.first(seq6553), seq6553__$1 = cljs.core.next(seq6553);
              seq6553 = cljs.core.first(seq6553__$1);
              var seq6553__$2 = cljs.core.next(seq6553__$1);
              seq6553__$1 = cljs.core.first(seq6553__$2);
              seq6553__$2 = cljs.core.next(seq6553__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6554, seq6553, seq6553__$1, seq6553__$2);
            };
            cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
            cljs.core.map = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8142 = arguments.length, i__4731__auto___8143 = 0;;) {
                    if (i__4731__auto___8143 < len__4730__auto___8142) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8143]), i__4731__auto___8143 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function(rf) {
                return function() {
                  var G__8145 = null, G__8145__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8145__1 = function(result) {
                    return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8145__2 = function(result, input) {
                    input = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
                    return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                  }, G__8145__3 = function() {
                    var G__8146__delegate = function(result, input, inputs) {
                      input = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
                      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    }, G__8146 = function(result, input, var_args) {
                      var inputs = null;
                      if (2 < arguments.length) {
                        inputs = 0;
                        for (var G__8147__a = Array(arguments.length - 2); inputs < G__8147__a.length;) {
                          G__8147__a[inputs] = arguments[inputs + 2], ++inputs;
                        }
                        inputs = new cljs.core.IndexedSeq(G__8147__a, 0, null);
                      }
                      return G__8146__delegate.call(this, result, input, inputs);
                    };
                    G__8146.cljs$lang$maxFixedArity = 2;
                    G__8146.cljs$lang$applyTo = function(arglist__8148) {
                      var result = cljs.core.first(arglist__8148);
                      arglist__8148 = cljs.core.next(arglist__8148);
                      var input = cljs.core.first(arglist__8148);
                      arglist__8148 = cljs.core.rest(arglist__8148);
                      return G__8146__delegate(result, input, arglist__8148);
                    };
                    G__8146.cljs$core$IFn$_invoke$arity$variadic = G__8146__delegate;
                    return G__8146;
                  }();
                  G__8145 = function(result, input, var_args) {
                    switch(arguments.length) {
                      case 0:
                        return G__8145__0.call(this);
                      case 1:
                        return G__8145__1.call(this, result);
                      case 2:
                        return G__8145__2.call(this, result, input);
                      default:
                        var G__8149 = null;
                        if (2 < arguments.length) {
                          G__8149 = 0;
                          for (var G__8150__a = Array(arguments.length - 2); G__8149 < G__8150__a.length;) {
                            G__8150__a[G__8149] = arguments[G__8149 + 2], ++G__8149;
                          }
                          G__8149 = new cljs.core.IndexedSeq(G__8150__a, 0, null);
                        }
                        return G__8145__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__8149);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8145.cljs$lang$maxFixedArity = 2;
                  G__8145.cljs$lang$applyTo = G__8145__3.cljs$lang$applyTo;
                  G__8145.cljs$core$IFn$_invoke$arity$0 = G__8145__0;
                  G__8145.cljs$core$IFn$_invoke$arity$1 = G__8145__1;
                  G__8145.cljs$core$IFn$_invoke$arity$2 = G__8145__2;
                  G__8145.cljs$core$IFn$_invoke$arity$variadic = G__8145__3.cljs$core$IFn$_invoke$arity$variadic;
                  return G__8145;
                }();
              };
            };
            cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                if (temp__5735__auto__) {
                  if (cljs.core.chunked_seq_QMARK_(temp__5735__auto__)) {
                    for (var c = cljs.core.chunk_first(temp__5735__auto__), size = cljs.core.count(c), b = cljs.core.chunk_buffer(size), i_8152 = 0;;) {
                      if (i_8152 < size) {
                        cljs.core.chunk_append(b, function() {
                          var G__6570 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8152);
                          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6570) : f.call(null, G__6570);
                        }()), i_8152 += 1;
                      } else {
                        break;
                      }
                    }
                    return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(temp__5735__auto__)));
                  }
                  return cljs.core.cons(function() {
                    var G__6571 = cljs.core.first(temp__5735__auto__);
                    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6571) : f.call(null, G__6571);
                  }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(temp__5735__auto__)));
                }
                return null;
              }, null, null);
            };
            cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
              return new cljs.core.LazySeq(null, function() {
                var s1 = cljs.core.seq(c1), s2 = cljs.core.seq(c2);
                return s1 && s2 ? cljs.core.cons(function() {
                  var G__6572 = cljs.core.first(s1), G__6573 = cljs.core.first(s2);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6572, G__6573) : f.call(null, G__6572, G__6573);
                }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2))) : null;
              }, null, null);
            };
            cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
              return new cljs.core.LazySeq(null, function() {
                var s1 = cljs.core.seq(c1), s2 = cljs.core.seq(c2), s3 = cljs.core.seq(c3);
                return s1 && s2 && s3 ? cljs.core.cons(function() {
                  var G__6574 = cljs.core.first(s1), G__6575 = cljs.core.first(s2), G__6576 = cljs.core.first(s3);
                  return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6574, G__6575, G__6576) : f.call(null, G__6574, G__6575, G__6576);
                }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3))) : null;
              }, null, null);
            };
            cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
              var step$jscomp$0 = function cljs$core$step(cs) {
                return new cljs.core.LazySeq(null, function() {
                  var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
                  return cljs.core.every_QMARK_(cljs.core.identity, ss) ? cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss))) : null;
                }, null, null);
              };
              return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
                return function(p1__6558_SHARP_) {
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__6558_SHARP_);
                };
              }(), step$jscomp$0(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c2, c1], 0))));
            };
            cljs.core.map.cljs$lang$applyTo = function(seq6560) {
              var G__6561 = cljs.core.first(seq6560), seq6560__$1 = cljs.core.next(seq6560);
              seq6560 = cljs.core.first(seq6560__$1);
              var seq6560__$2 = cljs.core.next(seq6560__$1);
              seq6560__$1 = cljs.core.first(seq6560__$2);
              var seq6560__$3 = cljs.core.next(seq6560__$2);
              seq6560__$2 = cljs.core.first(seq6560__$3);
              seq6560__$3 = cljs.core.next(seq6560__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6561, seq6560, seq6560__$1, seq6560__$2, seq6560__$3);
            };
            cljs.core.map.cljs$lang$maxFixedArity = 4;
            cljs.core.take = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
              return function(rf) {
                return function(na) {
                  return function() {
                    var G__8155 = null, G__8155__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8155__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8155__2 = function(result, input) {
                      var n__$1 = cljs.core.deref(na), nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
                      result = 0 < n__$1 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
                      return 0 < nn ? result : cljs.core.ensure_reduced(result);
                    };
                    G__8155 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8155__0.call(this);
                        case 1:
                          return G__8155__1.call(this, result);
                        case 2:
                          return G__8155__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8155.cljs$core$IFn$_invoke$arity$0 = G__8155__0;
                    G__8155.cljs$core$IFn$_invoke$arity$1 = G__8155__1;
                    G__8155.cljs$core$IFn$_invoke$arity$2 = G__8155__2;
                    return G__8155;
                  }();
                }(cljs.core.volatile_BANG_(n));
              };
            };
            cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              return new cljs.core.LazySeq(null, function() {
                if (0 < n) {
                  var temp__5735__auto__ = cljs.core.seq(coll);
                  return temp__5735__auto__ ? cljs.core.cons(cljs.core.first(temp__5735__auto__), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(temp__5735__auto__))) : null;
                }
                return null;
              }, null, null);
            };
            cljs.core.take.cljs$lang$maxFixedArity = 2;
            cljs.core.drop = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
              return function(rf) {
                return function(na) {
                  return function() {
                    var G__8157 = null, G__8157__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8157__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8157__2 = function(result, input) {
                      var n__$1 = cljs.core.deref(na);
                      na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
                      return 0 < n__$1 ? result : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8157 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8157__0.call(this);
                        case 1:
                          return G__8157__1.call(this, result);
                        case 2:
                          return G__8157__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8157.cljs$core$IFn$_invoke$arity$0 = G__8157__0;
                    G__8157.cljs$core$IFn$_invoke$arity$1 = G__8157__1;
                    G__8157.cljs$core$IFn$_invoke$arity$2 = G__8157__2;
                    return G__8157;
                  }();
                }(cljs.core.volatile_BANG_(n));
              };
            };
            cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              return new cljs.core.LazySeq(null, function(step) {
                return function() {
                  return step(n, coll);
                };
              }(function(n__$1, coll__$1) {
                for (;;) {
                  if (coll__$1 = cljs.core.seq(coll__$1), 0 < n__$1 && coll__$1) {
                    --n__$1, coll__$1 = cljs.core.rest(coll__$1);
                  } else {
                    return coll__$1;
                  }
                }
              }), null, null);
            };
            cljs.core.drop.cljs$lang$maxFixedArity = 2;
            cljs.core.drop_last = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
              return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
            };
            cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
              return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
                return x;
              }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
            };
            cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
            cljs.core.take_last = function(n, coll) {
              var s = cljs.core.seq(coll);
              for (n = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));;) {
                if (n) {
                  s = cljs.core.next(s), n = cljs.core.next(n);
                } else {
                  return s;
                }
              }
            };
            cljs.core.drop_while = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
              return function(rf) {
                return function(da) {
                  return function() {
                    var G__8164 = null, G__8164__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8164__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8164__2 = function(result, input) {
                      var drop_QMARK_ = cljs.core.deref(da);
                      if (cljs.core.truth_(cljs.core.truth_(drop_QMARK_) ? pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input) : drop_QMARK_)) {
                        return result;
                      }
                      cljs.core.vreset_BANG_(da, null);
                      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8164 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8164__0.call(this);
                        case 1:
                          return G__8164__1.call(this, result);
                        case 2:
                          return G__8164__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8164.cljs$core$IFn$_invoke$arity$0 = G__8164__0;
                    G__8164.cljs$core$IFn$_invoke$arity$1 = G__8164__1;
                    G__8164.cljs$core$IFn$_invoke$arity$2 = G__8164__2;
                    return G__8164;
                  }();
                }(cljs.core.volatile_BANG_(!0));
              };
            };
            cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
              return new cljs.core.LazySeq(null, function(step) {
                return function() {
                  return step(pred, coll);
                };
              }(function(pred__$1, coll__$1) {
                for (;;) {
                  var s = cljs.core.seq(coll__$1);
                  if (cljs.core.truth_(function() {
                    var and__4120__auto__ = s;
                    return and__4120__auto__ ? (and__4120__auto__ = cljs.core.first(s), pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(and__4120__auto__) : pred__$1.call(null, and__4120__auto__)) : and__4120__auto__;
                  }())) {
                    coll__$1 = pred__$1;
                    var G__8166 = cljs.core.rest(s);
                    pred__$1 = coll__$1;
                    coll__$1 = G__8166;
                  } else {
                    return s;
                  }
                }
              }), null, null);
            };
            cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
            cljs.core.Cycle = function(meta, all, prev, current, _next) {
              this.meta = meta;
              this.all = all;
              this.prev = prev;
              this.current = current;
              this._next = _next;
              this.cljs$lang$protocol_mask$partition0$ = 26083532;
              this.cljs$lang$protocol_mask$partition1$ = 1;
            };
            cljs.core.Cycle.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Cycle.prototype.currentval = function() {
              if (!this.current) {
                var temp__5733__auto___8167 = cljs.core.next(this.prev);
                this.current = temp__5733__auto___8167 ? temp__5733__auto___8167 : this.all;
              }
              return this.current;
            };
            cljs.core.Cycle.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.Cycle.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return this.cljs$core$ISeq$_rest$arity$1(null);
            };
            cljs.core.Cycle.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.Cycle.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
              return null != this.current;
            };
            cljs.core.Cycle.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              for (var self__ = this, s = this.currentval(), ret = cljs.core.first(s);;) {
                var s__$1 = function() {
                  var or__4131__auto__ = cljs.core.next(s);
                  return or__4131__auto__ ? or__4131__auto__ : self__.all;
                }();
                coll = function() {
                  var G__6589 = ret, G__6590 = cljs.core.first(s__$1);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6589, G__6590) : f.call(null, G__6589, G__6590);
                }();
                if (cljs.core.reduced_QMARK_(coll)) {
                  return cljs.core.deref(coll);
                }
                s = s__$1;
                ret = coll;
              }
            };
            cljs.core.Cycle.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              for (var self__ = this, s = this.currentval(), ret = start;;) {
                start = function() {
                  var G__6591 = ret, G__6592 = cljs.core.first(s);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6591, G__6592) : f.call(null, G__6591, G__6592);
                }();
                if (cljs.core.reduced_QMARK_(start)) {
                  return cljs.core.deref(start);
                }
                s = coll = function() {
                  var or__4131__auto__ = cljs.core.next(s);
                  return or__4131__auto__ ? or__4131__auto__ : self__.all;
                }();
                ret = start;
              }
            };
            cljs.core.Cycle.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core.first(this.currentval());
            };
            cljs.core.Cycle.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              null == this._next && (this._next = new cljs.core.Cycle(null, this.all, this.currentval(), null, null));
              return this._next;
            };
            cljs.core.Cycle.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.Cycle.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.Cycle(new_meta, this.all, this.prev, this.current, this._next);
            };
            cljs.core.Cycle.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.Cycle.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$all, cljs$cst$symbol$prev, cljs.core.with_meta(cljs$cst$symbol$current, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$_next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Cycle.cljs$lang$type = !0;
            cljs.core.Cycle.cljs$lang$ctorStr = "cljs.core/Cycle";
            cljs.core.Cycle.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Cycle");
            };
            cljs.core.__GT_Cycle = function(meta, all, prev, current, _next) {
              return new cljs.core.Cycle(meta, all, prev, current, _next);
            };
            cljs.core.cycle = function(coll) {
              return (coll = cljs.core.seq(coll)) ? new cljs.core.Cycle(null, coll, null, coll, null) : cljs.core.List.EMPTY;
            };
            cljs.core.split_at = function(n, coll) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
            };
            cljs.core.Repeat = function(meta, count, val, next, __hash) {
              this.meta = meta;
              this.count = count;
              this.val = val;
              this.next = next;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 1;
            };
            cljs.core.Repeat.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Repeat.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Repeat.prototype.indexOf = function() {
              var G__8173 = null, G__8173__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8173__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8173 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8173__1.call(this, x);
                  case 2:
                    return G__8173__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8173.cljs$core$IFn$_invoke$arity$1 = G__8173__1;
              G__8173.cljs$core$IFn$_invoke$arity$2 = G__8173__2;
              return G__8173;
            }();
            cljs.core.Repeat.prototype.lastIndexOf = function() {
              var G__8174 = null, G__8174__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, this.count);
              }, G__8174__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8174 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8174__1.call(this, x);
                  case 2:
                    return G__8174__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8174.cljs$core$IFn$_invoke$arity$1 = G__8174__1;
              G__8174.cljs$core$IFn$_invoke$arity$2 = G__8174__2;
              return G__8174;
            }();
            cljs.core.Repeat.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.Repeat.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return null == this.next ? 1 < this.count ? this.next = new cljs.core.Repeat(null, this.count - 1, this.val, null, null) : -1 === this.count ? this : null : this.next;
            };
            cljs.core.Repeat.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.Repeat.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.Repeat.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.Repeat.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
              return !1;
            };
            cljs.core.Repeat.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              if (-1 === this.count) {
                for (var ret = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(this.val, this.val) : f.call(null, this.val, this.val);;) {
                  if (cljs.core.reduced_QMARK_(ret)) {
                    return cljs.core.deref(ret);
                  }
                  ret = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, this.val) : f.call(null, ret, this.val);
                }
              } else {
                for (coll = 1, ret = this.val;;) {
                  if (coll < this.count) {
                    ret = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, this.val) : f.call(null, ret, this.val);
                    if (cljs.core.reduced_QMARK_(ret)) {
                      return cljs.core.deref(ret);
                    }
                    coll += 1;
                  } else {
                    return ret;
                  }
                }
              }
            };
            cljs.core.Repeat.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              if (-1 === this.count) {
                for (start = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(start, this.val) : f.call(null, start, this.val);;) {
                  if (cljs.core.reduced_QMARK_(start)) {
                    return cljs.core.deref(start);
                  }
                  start = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(start, this.val) : f.call(null, start, this.val);
                }
              } else {
                for (coll = 0;;) {
                  if (coll < this.count) {
                    start = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(start, this.val) : f.call(null, start, this.val);
                    if (cljs.core.reduced_QMARK_(start)) {
                      return cljs.core.deref(start);
                    }
                    coll += 1;
                  } else {
                    return start;
                  }
                }
              }
            };
            cljs.core.Repeat.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.val;
            };
            cljs.core.Repeat.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return null == this.next ? 1 < this.count ? this.next = new cljs.core.Repeat(null, this.count - 1, this.val, null, null) : -1 === this.count ? this : cljs.core.List.EMPTY : this.next;
            };
            cljs.core.Repeat.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.Repeat.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.Repeat(new_meta, this.count, this.val, this.next, null);
            };
            cljs.core.Repeat.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.Repeat.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$count, cljs$cst$symbol$val, cljs.core.with_meta(cljs$cst$symbol$next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Repeat.cljs$lang$type = !0;
            cljs.core.Repeat.cljs$lang$ctorStr = "cljs.core/Repeat";
            cljs.core.Repeat.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Repeat");
            };
            cljs.core.__GT_Repeat = function(meta, count, val, next, __hash) {
              return new cljs.core.Repeat(meta, count, val, next, __hash);
            };
            cljs.core.repeat = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return new cljs.core.Repeat(null, -1, x, null, null);
            };
            cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
              return 0 < n ? new cljs.core.Repeat(null, n, x, null, null) : cljs.core.List.EMPTY;
            };
            cljs.core.repeat.cljs$lang$maxFixedArity = 2;
            cljs.core.replicate = function(n, x) {
              return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
            };
            cljs.core.repeatedly = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return new cljs.core.LazySeq(null, function() {
                return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
              }, null, null);
            };
            cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
              return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
            };
            cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
            cljs.core.UNREALIZED_SEED = {};
            cljs.core.Iterate = function(meta, f, prev_seed, seed, next) {
              this.meta = meta;
              this.f = f;
              this.prev_seed = prev_seed;
              this.seed = seed;
              this.next = next;
              this.cljs$lang$protocol_mask$partition0$ = 26083532;
              this.cljs$lang$protocol_mask$partition1$ = 1;
            };
            cljs.core.Iterate.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Iterate.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.Iterate.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return this.cljs$core$ISeq$_rest$arity$1(null);
            };
            cljs.core.Iterate.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.Iterate.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
              return this.seed !== cljs.core.UNREALIZED_SEED;
            };
            cljs.core.Iterate.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, rf) {
              coll = this.cljs$core$ISeq$_first$arity$1(null);
              var v = this.f.cljs$core$IFn$_invoke$arity$1 ? this.f.cljs$core$IFn$_invoke$arity$1(coll) : this.f.call(null, coll);
              for (coll = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(coll, v) : rf.call(null, coll, v);;) {
                if (cljs.core.reduced_QMARK_(coll)) {
                  return cljs.core.deref(coll);
                }
                v = this.f.cljs$core$IFn$_invoke$arity$1 ? this.f.cljs$core$IFn$_invoke$arity$1(v) : this.f.call(null, v);
                coll = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(coll, v) : rf.call(null, coll, v);
              }
            };
            cljs.core.Iterate.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, rf, start) {
              coll = this.cljs$core$ISeq$_first$arity$1(null);
              for (start = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(start, coll) : rf.call(null, start, coll);;) {
                if (cljs.core.reduced_QMARK_(start)) {
                  return cljs.core.deref(start);
                }
                coll = this.f.cljs$core$IFn$_invoke$arity$1 ? this.f.cljs$core$IFn$_invoke$arity$1(coll) : this.f.call(null, coll);
                start = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(start, coll) : rf.call(null, start, coll);
              }
            };
            cljs.core.Iterate.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              cljs.core.UNREALIZED_SEED === this.seed && (this.seed = this.f.cljs$core$IFn$_invoke$arity$1 ? this.f.cljs$core$IFn$_invoke$arity$1(this.prev_seed) : this.f.call(null, this.prev_seed));
              return this.seed;
            };
            cljs.core.Iterate.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              null == this.next && (this.next = new cljs.core.Iterate(null, this.f, this.cljs$core$ISeq$_first$arity$1(null), cljs.core.UNREALIZED_SEED, null));
              return this.next;
            };
            cljs.core.Iterate.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.Iterate.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.Iterate(new_meta, this.f, this.prev_seed, this.seed, this.next);
            };
            cljs.core.Iterate.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.Iterate.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$f, cljs$cst$symbol$prev_DASH_seed, cljs.core.with_meta(cljs$cst$symbol$seed, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Iterate.cljs$lang$type = !0;
            cljs.core.Iterate.cljs$lang$ctorStr = "cljs.core/Iterate";
            cljs.core.Iterate.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Iterate");
            };
            cljs.core.__GT_Iterate = function(meta, f, prev_seed, seed, next) {
              return new cljs.core.Iterate(meta, f, prev_seed, seed, next);
            };
            cljs.core.iterate = function(f, x) {
              return new cljs.core.Iterate(null, f, null, x, null);
            };
            cljs.core.interleave = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8188 = arguments.length, i__4731__auto___8189 = 0;;) {
                    if (i__4731__auto___8189 < len__4730__auto___8188) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8189]), i__4731__auto___8189 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(2), 0, null);
                  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args_arr__4751__auto__);
              }
            };
            cljs.core.interleave.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.List.EMPTY;
            };
            cljs.core.interleave.cljs$core$IFn$_invoke$arity$1 = function(c1) {
              return new cljs.core.LazySeq(null, function() {
                return c1;
              }, null, null);
            };
            cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
              return new cljs.core.LazySeq(null, function() {
                var s1 = cljs.core.seq(c1), s2 = cljs.core.seq(c2);
                return s1 && s2 ? cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2)))) : null;
              }, null, null);
            };
            cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
              return new cljs.core.LazySeq(null, function() {
                var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c1], 0)));
                return cljs.core.every_QMARK_(cljs.core.identity, ss) ? cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss))) : null;
              }, null, null);
            };
            cljs.core.interleave.cljs$lang$applyTo = function(seq6598) {
              var G__6599 = cljs.core.first(seq6598), seq6598__$1 = cljs.core.next(seq6598);
              seq6598 = cljs.core.first(seq6598__$1);
              seq6598__$1 = cljs.core.next(seq6598__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6599, seq6598, seq6598__$1);
            };
            cljs.core.interleave.cljs$lang$maxFixedArity = 2;
            cljs.core.interpose = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
              return function(rf) {
                return function(started) {
                  return function() {
                    var G__8192 = null, G__8192__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8192__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8192__2 = function(result, input) {
                      if (cljs.core.truth_(cljs.core.deref(started))) {
                        return result = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep), cljs.core.reduced_QMARK_(result) ? result : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                      }
                      cljs.core.vreset_BANG_(started, !0);
                      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8192 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8192__0.call(this);
                        case 1:
                          return G__8192__1.call(this, result);
                        case 2:
                          return G__8192__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8192.cljs$core$IFn$_invoke$arity$0 = G__8192__0;
                    G__8192.cljs$core$IFn$_invoke$arity$1 = G__8192__1;
                    G__8192.cljs$core$IFn$_invoke$arity$2 = G__8192__2;
                    return G__8192;
                  }();
                }(cljs.core.volatile_BANG_(!1));
              };
            };
            cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
              return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
            };
            cljs.core.interpose.cljs$lang$maxFixedArity = 2;
            cljs.core.flatten1 = function(colls) {
              return function cljs$core$flatten1_$_cat(coll, colls__$1) {
                return new cljs.core.LazySeq(null, function() {
                  var temp__5733__auto__ = cljs.core.seq(coll);
                  return temp__5733__auto__ ? cljs.core.cons(cljs.core.first(temp__5733__auto__), cljs$core$flatten1_$_cat(cljs.core.rest(temp__5733__auto__), colls__$1)) : cljs.core.seq(colls__$1) ? cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1)) : null;
                }, null, null);
              }(null, colls);
            };
            cljs.core.mapcat = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8194 = arguments.length, i__4731__auto___8195 = 0;;) {
                    if (i__4731__auto___8195 < len__4730__auto___8194) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8195]), i__4731__auto___8195 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(1), 0, null);
                  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args_arr__4751__auto__);
              }
            };
            cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
            };
            cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
            };
            cljs.core.mapcat.cljs$lang$applyTo = function(seq6605) {
              var G__6606 = cljs.core.first(seq6605);
              seq6605 = cljs.core.next(seq6605);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6606, seq6605);
            };
            cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
            cljs.core.filter = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
              return function(rf) {
                return function() {
                  var G__8198 = null, G__8198__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8198__1 = function(result) {
                    return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8198__2 = function(result, input) {
                    return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input)) ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
                  };
                  G__8198 = function(result, input) {
                    switch(arguments.length) {
                      case 0:
                        return G__8198__0.call(this);
                      case 1:
                        return G__8198__1.call(this, result);
                      case 2:
                        return G__8198__2.call(this, result, input);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8198.cljs$core$IFn$_invoke$arity$0 = G__8198__0;
                  G__8198.cljs$core$IFn$_invoke$arity$1 = G__8198__1;
                  G__8198.cljs$core$IFn$_invoke$arity$2 = G__8198__2;
                  return G__8198;
                }();
              };
            };
            cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                if (temp__5735__auto__) {
                  if (cljs.core.chunked_seq_QMARK_(temp__5735__auto__)) {
                    for (var c = cljs.core.chunk_first(temp__5735__auto__), size = cljs.core.count(c), b = cljs.core.chunk_buffer(size), i_8200 = 0;;) {
                      if (i_8200 < size) {
                        cljs.core.truth_(function() {
                          var G__6610 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8200);
                          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__6610) : pred.call(null, G__6610);
                        }()) && cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8200)), i_8200 += 1;
                      } else {
                        break;
                      }
                    }
                    return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(temp__5735__auto__)));
                  }
                  size = cljs.core.first(temp__5735__auto__);
                  temp__5735__auto__ = cljs.core.rest(temp__5735__auto__);
                  return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(size) : pred.call(null, size)) ? cljs.core.cons(size, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, temp__5735__auto__)) : cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, temp__5735__auto__);
                }
                return null;
              }, null, null);
            };
            cljs.core.filter.cljs$lang$maxFixedArity = 2;
            cljs.core.remove = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
              return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
            };
            cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
              return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
            };
            cljs.core.remove.cljs$lang$maxFixedArity = 2;
            cljs.core.tree_seq = function(branch_QMARK_, children, root) {
              return function cljs$core$tree_seq_$_walk(node) {
                return new cljs.core.LazySeq(null, function() {
                  return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
                }, null, null);
              }(root);
            };
            cljs.core.flatten = function(x) {
              return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__6613_SHARP_) {
                return !cljs.core.sequential_QMARK_(p1__6613_SHARP_);
              }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
            };
            cljs.core.into = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.into.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.into.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.into.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.PersistentVector.EMPTY;
            };
            cljs.core.into.cljs$core$IFn$_invoke$arity$1 = function(to) {
              return to;
            };
            cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
              return null != to ? null != to && (to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$) ? cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to)) : cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from) : cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
            };
            cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
              return null != to && (to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$) ? cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to)) : cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
            };
            cljs.core.into.cljs$lang$maxFixedArity = 3;
            cljs.core.mapv = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8205 = arguments.length, i__4731__auto___8206 = 0;;) {
                    if (i__4731__auto___8206 < len__4730__auto___8205) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8206]), i__4731__auto___8206 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(4), 0, null);
                  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], args_arr__4751__auto__);
              }
            };
            cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
                return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
              }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
            };
            cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
              return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
            };
            cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
              return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
            };
            cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
              return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([colls], 0)));
            };
            cljs.core.mapv.cljs$lang$applyTo = function(seq6619) {
              var G__6620 = cljs.core.first(seq6619), seq6619__$1 = cljs.core.next(seq6619);
              seq6619 = cljs.core.first(seq6619__$1);
              var seq6619__$2 = cljs.core.next(seq6619__$1);
              seq6619__$1 = cljs.core.first(seq6619__$2);
              var seq6619__$3 = cljs.core.next(seq6619__$2);
              seq6619__$2 = cljs.core.first(seq6619__$3);
              seq6619__$3 = cljs.core.next(seq6619__$3);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6620, seq6619, seq6619__$1, seq6619__$2, seq6619__$3);
            };
            cljs.core.mapv.cljs$lang$maxFixedArity = 4;
            cljs.core.filterv = function(pred, coll) {
              return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
                return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o)) ? cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o) : v;
              }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
            };
            cljs.core.partition = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
            };
            cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                if (temp__5735__auto__) {
                  var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, temp__5735__auto__);
                  return n === cljs.core.count(p) ? cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, temp__5735__auto__))) : null;
                }
                return null;
              }, null, null);
            };
            cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                if (temp__5735__auto__) {
                  var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, temp__5735__auto__);
                  return n === cljs.core.count(p) ? cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, temp__5735__auto__))) : new cljs.core.List(null, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)), null, 1, null);
                }
                return null;
              }, null, null);
            };
            cljs.core.partition.cljs$lang$maxFixedArity = 4;
            cljs.core.get_in = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
            };
            cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
              var sentinel = cljs.core.lookup_sentinel;
              for (ks = cljs.core.seq(ks);;) {
                if (null != ks) {
                  m = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m, cljs.core.first(ks), sentinel);
                  if (sentinel === m) {
                    return not_found;
                  }
                  ks = cljs.core.next(ks);
                } else {
                  return m;
                }
              }
            };
            cljs.core.get_in.cljs$lang$maxFixedArity = 3;
            cljs.core.assoc_in = function(m, p__6629, v) {
              p__6629 = cljs.core.seq(p__6629);
              var first__6632 = cljs.core.first(p__6629), ks = cljs.core.next(p__6629);
              return ks ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6632, function() {
                var G__6633 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6632);
                return cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3 ? cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3(G__6633, ks, v) : cljs.core.assoc_in.call(null, G__6633, ks, v);
              }()) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6632, v);
            };
            cljs.core.update_in = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                case 6:
                  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8214 = arguments.length, i__4731__auto___8215 = 0;;) {
                    if (i__4731__auto___8215 < len__4730__auto___8214) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8215]), i__4731__auto___8215 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(6), 0, null);
                  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], args_arr__4751__auto__);
              }
            };
            cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__6645, f) {
              p__6645 = cljs.core.seq(p__6645);
              var first__6648 = cljs.core.first(p__6645);
              return (p__6645 = cljs.core.next(p__6645)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6648, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6648), p__6645, f)) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6648, function() {
                var G__6649 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6648);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6649) : f.call(null, G__6649);
              }());
            };
            cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__6650, f, a) {
              p__6650 = cljs.core.seq(p__6650);
              var first__6653 = cljs.core.first(p__6650);
              return (p__6650 = cljs.core.next(p__6650)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6653, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6653), p__6650, f, a)) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6653, function() {
                var G__6654 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6653);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6654, a) : f.call(null, G__6654, a);
              }());
            };
            cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__6656, f, a, b) {
              p__6656 = cljs.core.seq(p__6656);
              var first__6659 = cljs.core.first(p__6656);
              return (p__6656 = cljs.core.next(p__6656)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6659, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6659), p__6656, f, a, b)) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6659, function() {
                var G__6660 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6659);
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6660, a, b) : f.call(null, G__6660, a, b);
              }());
            };
            cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__6663, f, a, b, c) {
              p__6663 = cljs.core.seq(p__6663);
              var first__6666 = cljs.core.first(p__6663);
              return (p__6663 = cljs.core.next(p__6663)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6666, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6666), p__6663, f, a, b, c)) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, first__6666, function() {
                var G__6667 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, first__6666);
                return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__6667, a, b, c) : f.call(null, G__6667, a, b, c);
              }());
            };
            cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__6671, f, a, b, c, args) {
              var seq__6673 = cljs.core.seq(p__6671);
              p__6671 = cljs.core.first(seq__6673);
              return (seq__6673 = cljs.core.next(seq__6673)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, p__6671, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, p__6671), seq__6673, f, a, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([b, c, args], 0))) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, p__6671, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, p__6671), a, 
              b, c, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([args], 0)));
            };
            cljs.core.update_in.cljs$lang$applyTo = function(seq6637) {
              var G__6638 = cljs.core.first(seq6637), seq6637__$1 = cljs.core.next(seq6637);
              seq6637 = cljs.core.first(seq6637__$1);
              var seq6637__$2 = cljs.core.next(seq6637__$1);
              seq6637__$1 = cljs.core.first(seq6637__$2);
              var seq6637__$3 = cljs.core.next(seq6637__$2);
              seq6637__$2 = cljs.core.first(seq6637__$3);
              var seq6637__$4 = cljs.core.next(seq6637__$3);
              seq6637__$3 = cljs.core.first(seq6637__$4);
              var seq6637__$5 = cljs.core.next(seq6637__$4);
              seq6637__$4 = cljs.core.first(seq6637__$5);
              seq6637__$5 = cljs.core.next(seq6637__$5);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6638, seq6637, seq6637__$1, seq6637__$2, seq6637__$3, seq6637__$4, seq6637__$5);
            };
            cljs.core.update_in.cljs$lang$maxFixedArity = 6;
            cljs.core.update = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                case 6:
                  return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8218 = arguments.length, i__4731__auto___8219 = 0;;) {
                    if (i__4731__auto___8219 < len__4730__auto___8218) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8219]), i__4731__auto___8219 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(6), 0, null);
                  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], args_arr__4751__auto__);
              }
            };
            cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
                var G__6684 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__6684) : f.call(null, G__6684);
              }());
            };
            cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
                var G__6685 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6685, x) : f.call(null, G__6685, x);
              }());
            };
            cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
                var G__6687 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__6687, x, y) : f.call(null, G__6687, x, y);
              }());
            };
            cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
                var G__6690 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
                return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__6690, x, y, z) : f.call(null, G__6690, x, y, z);
              }());
            };
            cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([more], 0)));
            };
            cljs.core.update.cljs$lang$applyTo = function(seq6676) {
              var G__6677 = cljs.core.first(seq6676), seq6676__$1 = cljs.core.next(seq6676);
              seq6676 = cljs.core.first(seq6676__$1);
              var seq6676__$2 = cljs.core.next(seq6676__$1);
              seq6676__$1 = cljs.core.first(seq6676__$2);
              var seq6676__$3 = cljs.core.next(seq6676__$2);
              seq6676__$2 = cljs.core.first(seq6676__$3);
              var seq6676__$4 = cljs.core.next(seq6676__$3);
              seq6676__$3 = cljs.core.first(seq6676__$4);
              var seq6676__$5 = cljs.core.next(seq6676__$4);
              seq6676__$4 = cljs.core.first(seq6676__$5);
              seq6676__$5 = cljs.core.next(seq6676__$5);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__6677, seq6676, seq6676__$1, seq6676__$2, seq6676__$3, seq6676__$4, seq6676__$5);
            };
            cljs.core.update.cljs$lang$maxFixedArity = 6;
            cljs.core.VectorNode = function(edit, arr) {
              this.edit = edit;
              this.arr = arr;
            };
            cljs.core.VectorNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$edit, cljs$cst$symbol$arr], null);
            };
            cljs.core.VectorNode.cljs$lang$type = !0;
            cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
            cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/VectorNode");
            };
            cljs.core.__GT_VectorNode = function(edit, arr) {
              return new cljs.core.VectorNode(edit, arr);
            };
            cljs.core.pv_fresh_node = function(edit) {
              return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            };
            cljs.core.pv_aget = function(node, idx) {
              return node.arr[idx];
            };
            cljs.core.pv_aset = function(node, idx, val) {
              return node.arr[idx] = val;
            };
            cljs.core.pv_clone_node = function(node) {
              return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
            };
            cljs.core.tail_off = function(pv) {
              pv = pv.cnt;
              return 32 > pv ? 0 : pv - 1 >>> 5 << 5;
            };
            cljs.core.new_path = function(edit, level, node) {
              for (;;) {
                if (0 === level) {
                  return node;
                }
                var r = cljs.core.pv_fresh_node(edit);
                cljs.core.pv_aset(r, 0, node);
                node = r;
                level -= 5;
              }
            };
            cljs.core.push_tail = function(pv, level, parent, tailnode) {
              var ret = cljs.core.pv_clone_node(parent), subidx = pv.cnt - 1 >>> level & 31;
              5 === level ? cljs.core.pv_aset(ret, subidx, tailnode) : (parent = cljs.core.pv_aget(parent, subidx), null != parent ? (level -= 5, pv = cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4(pv, level, parent, tailnode) : cljs.core.push_tail.call(null, pv, level, parent, tailnode)) : pv = cljs.core.new_path(null, level - 5, tailnode), cljs.core.pv_aset(ret, subidx, pv));
              return ret;
            };
            cljs.core.vector_index_out_of_bounds = function(i, cnt) {
              throw Error(["No item ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(i), " in vector of length ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt)].join(""));
            };
            cljs.core.first_array_for_longvec = function(pv) {
              var node = pv.root;
              for (pv = pv.shift;;) {
                if (0 < pv) {
                  node = cljs.core.pv_aget(node, 0), pv -= 5;
                } else {
                  return node.arr;
                }
              }
            };
            cljs.core.unchecked_array_for = function(pv, i) {
              if (i >= cljs.core.tail_off(pv)) {
                return pv.tail;
              }
              var node = pv.root;
              for (pv = pv.shift;;) {
                if (0 < pv) {
                  node = cljs.core.pv_aget(node, i >>> pv & 31), pv -= 5;
                } else {
                  return node.arr;
                }
              }
            };
            cljs.core.array_for = function(pv, i) {
              return 0 <= i && i < pv.cnt ? cljs.core.unchecked_array_for(pv, i) : cljs.core.vector_index_out_of_bounds(i, pv.cnt);
            };
            cljs.core.do_assoc = function(pv, level, node, i, val) {
              var ret = cljs.core.pv_clone_node(node);
              if (0 === level) {
                cljs.core.pv_aset(ret, i & 31, val);
              } else {
                var subidx = i >>> level & 31;
                cljs.core.pv_aset(ret, subidx, function() {
                  var G__6699 = level - 5, G__6700 = cljs.core.pv_aget(node, subidx);
                  return cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5 ? cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5(pv, G__6699, G__6700, i, val) : cljs.core.do_assoc.call(null, pv, G__6699, G__6700, i, val);
                }());
              }
              return ret;
            };
            cljs.core.pop_tail = function(pv, level, node) {
              var subidx = pv.cnt - 2 >>> level & 31;
              if (5 < level) {
                level -= 5;
                var G__6705 = cljs.core.pv_aget(node, subidx);
                pv = cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3(pv, level, G__6705) : cljs.core.pop_tail.call(null, pv, level, G__6705);
                if (null == pv && 0 === subidx) {
                  return null;
                }
                node = cljs.core.pv_clone_node(node);
                cljs.core.pv_aset(node, subidx, pv);
                return node;
              }
              if (0 === subidx) {
                return null;
              }
              node = cljs.core.pv_clone_node(node);
              cljs.core.pv_aset(node, subidx, null);
              return node;
            };
            cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
              this.i = i;
              this.base = base;
              this.arr = arr;
              this.v = v;
              this.start = start;
              this.end = end;
            };
            cljs.core.RangedIterator.prototype.hasNext = function() {
              return this.i < this.end;
            };
            cljs.core.RangedIterator.prototype.next = function() {
              32 === this.i - this.base && (this.arr = cljs.core.unchecked_array_for(this.v, this.i), this.base += 32);
              var ret = this.arr[this.i & 31];
              this.i += 1;
              return ret;
            };
            cljs.core.RangedIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$base, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$v, cljs$cst$symbol$start, 
              cljs$cst$symbol$end], null);
            };
            cljs.core.RangedIterator.cljs$lang$type = !0;
            cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
            cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RangedIterator");
            };
            cljs.core.__GT_RangedIterator = function(i, base, arr, v, start, end) {
              return new cljs.core.RangedIterator(i, base, arr, v, start, end);
            };
            cljs.core.ranged_iterator = function(v, start, end) {
              return new cljs.core.RangedIterator(start, start - start % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, start) : null, v, start, end);
            };
            cljs.core.pv_reduce = function(var_args) {
              switch(arguments.length) {
                case 4:
                  return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4 = function(pv, f, start, end) {
              return start < end ? cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(pv, f, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(pv, start), start + 1, end) : f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
            };
            cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5 = function(pv, f, init, start, end) {
              var acc = init;
              init = start;
              for (start = cljs.core.unchecked_array_for(pv, start);;) {
                if (init < end) {
                  var j = init & 31;
                  start = 0 === j ? cljs.core.unchecked_array_for(pv, init) : start;
                  j = start[j];
                  acc = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(acc, j) : f.call(null, acc, j);
                  if (cljs.core.reduced_QMARK_(acc)) {
                    return cljs.core.deref(acc);
                  }
                  init += 1;
                } else {
                  return acc;
                }
              }
            };
            cljs.core.pv_reduce.cljs$lang$maxFixedArity = 5;
            cljs.core.APersistentVector = function() {
            };
            cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
              this.meta = meta;
              this.cnt = cnt;
              this.shift = shift;
              this.root = root;
              this.tail = tail;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 167666463;
              this.cljs$lang$protocol_mask$partition1$ = 139268;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentVector.prototype.cljs$core$IFind$_find$arity$2 = function(coll, n) {
              return 0 <= n && n < this.cnt ? new cljs.core.MapEntry(n, cljs.core.unchecked_array_for(this, n)[n & 31], null) : null;
            };
            cljs.core.PersistentVector.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentVector.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentVector.prototype.indexOf = function() {
              var G__8231 = null, G__8231__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8231__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8231 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8231__1.call(this, x);
                  case 2:
                    return G__8231__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8231.cljs$core$IFn$_invoke$arity$1 = G__8231__1;
              G__8231.cljs$core$IFn$_invoke$arity$2 = G__8231__2;
              return G__8231;
            }();
            cljs.core.PersistentVector.prototype.lastIndexOf = function() {
              var G__8232 = null, G__8232__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8232__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8232 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8232__1.call(this, x);
                  case 2:
                    return G__8232__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8232.cljs$core$IFn$_invoke$arity$1 = G__8232__1;
              G__8232.cljs$core$IFn$_invoke$arity$2 = G__8232__2;
              return G__8232;
            }();
            cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              return "number" === typeof k ? this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found) : not_found;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
              v = 0;
              for (var init__$1 = init;;) {
                if (v < this.cnt) {
                  var arr = cljs.core.unchecked_array_for(this, v);
                  init = arr.length;
                  a: {
                    for (var j = 0;;) {
                      if (j < init) {
                        var G__6712 = j + v, G__6713 = arr[j];
                        init__$1 = f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init__$1, G__6712, G__6713) : f.call(null, init__$1, G__6712, G__6713);
                        if (cljs.core.reduced_QMARK_(init__$1)) {
                          arr = init__$1;
                          break a;
                        }
                        j += 1;
                      } else {
                        arr = init__$1;
                        break a;
                      }
                    }
                  }
                  if (cljs.core.reduced_QMARK_(arr)) {
                    return cljs.core.deref(arr);
                  }
                  v += init;
                  init__$1 = arr;
                } else {
                  return init__$1;
                }
              }
            };
            cljs.core.PersistentVector.prototype.cljs$core$APersistentVector$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
              return cljs.core.array_for(this, n)[n & 31];
            };
            cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
              return 0 <= n && n < this.cnt ? cljs.core.unchecked_array_for(this, n)[n & 31] : not_found;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
              if (0 <= n && n < this.cnt) {
                return cljs.core.tail_off(this) <= n ? (coll = cljs.core.aclone(this.tail), coll[n & 31] = val, new cljs.core.PersistentVector(this.meta, this.cnt, this.shift, this.root, coll, null)) : new cljs.core.PersistentVector(this.meta, this.cnt, this.shift, cljs.core.do_assoc(this, this.shift, this.root, n, val), this.tail, null);
              }
              if (n === this.cnt) {
                return this.cljs$core$ICollection$_conj$arity$2(null, val);
              }
              throw Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds  [0,", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.cnt), "]"].join(""));
            };
            cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
              return cljs.core.ranged_iterator(this, 0, this.cnt);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentVector(this.meta, this.cnt, this.shift, this.root, this.tail, this.__hash);
            };
            cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.cnt;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
              return 0 < this.cnt ? this.cljs$core$IIndexed$_nth$arity$2(null, this.cnt - 1) : null;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
              if (0 === this.cnt) {
                throw Error("Can't pop empty vector");
              }
              if (1 === this.cnt) {
                return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, this.meta);
              }
              if (1 < this.cnt - cljs.core.tail_off(this)) {
                return new cljs.core.PersistentVector(this.meta, this.cnt - 1, this.shift, this.root, this.tail.slice(0, -1), null);
              }
              coll = cljs.core.unchecked_array_for(this, this.cnt - 2);
              var nr = cljs.core.pop_tail(this, this.shift, this.root);
              nr = null == nr ? cljs.core.PersistentVector.EMPTY_NODE : nr;
              var cnt_1 = this.cnt - 1;
              return 5 < this.shift && null == cljs.core.pv_aget(nr, 1) ? new cljs.core.PersistentVector(this.meta, cnt_1, this.shift - 5, cljs.core.pv_aget(nr, 0), coll, null) : new cljs.core.PersistentVector(this.meta, cnt_1, this.shift, nr, coll, null);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
              return 0 < this.cnt ? new cljs.core.RSeq(this, this.cnt - 1, null) : null;
            };
            cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              if (other instanceof cljs.core.PersistentVector) {
                if (this.cnt === cljs.core.count(other)) {
                  for (coll = this.cljs$core$IIterable$_iterator$arity$1(null), other = other.cljs$core$IIterable$_iterator$arity$1(null);;) {
                    if (coll.hasNext()) {
                      var x = coll.next(), y = other.next();
                      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
                        return !1;
                      }
                    } else {
                      return !0;
                    }
                  }
                } else {
                  return !1;
                }
              } else {
                return cljs.core.equiv_sequential(this, other);
              }
            };
            cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
              return new cljs.core.TransientVector(this.cnt, this.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(this.root) : cljs.core.tv_editable_root.call(null, this.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(this.tail) : cljs.core.tv_editable_tail.call(null, this.tail));
            };
            cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, this.meta);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
              return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(this, f, 0, this.cnt);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
              v = 0;
              for (var init__$1 = init;;) {
                if (v < this.cnt) {
                  var arr = cljs.core.unchecked_array_for(this, v);
                  init = arr.length;
                  a: {
                    for (var j = 0;;) {
                      if (j < init) {
                        var G__6715 = arr[j];
                        init__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(init__$1, G__6715) : f.call(null, init__$1, G__6715);
                        if (cljs.core.reduced_QMARK_(init__$1)) {
                          arr = init__$1;
                          break a;
                        }
                        j += 1;
                      } else {
                        arr = init__$1;
                        break a;
                      }
                    }
                  }
                  if (cljs.core.reduced_QMARK_(arr)) {
                    return cljs.core.deref(arr);
                  }
                  v += init;
                  init__$1 = arr;
                } else {
                  return init__$1;
                }
              }
            };
            cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
              if ("number" === typeof k) {
                return this.cljs$core$IVector$_assoc_n$arity$3(null, k, v);
              }
              throw Error("Vector's key for assoc must be a number.");
            };
            cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
              return cljs.core.integer_QMARK_(k) ? 0 <= k && k < this.cnt : !1;
            };
            cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              if (0 === this.cnt) {
                return null;
              }
              if (32 >= this.cnt) {
                return new cljs.core.IndexedSeq(this.tail, 0, null);
              }
              coll = cljs.core.first_array_for_longvec(this);
              return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(this, coll, 0, 0) : cljs.core.chunked_seq.call(null, this, coll, 0, 0);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentVector(new_meta, this.cnt, this.shift, this.root, this.tail, this.__hash);
            };
            cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              if (32 > this.cnt - cljs.core.tail_off(this)) {
                coll = this.tail.length;
                for (var new_tail = Array(coll + 1), i_8242 = 0;;) {
                  if (i_8242 < coll) {
                    new_tail[i_8242] = this.tail[i_8242], i_8242 += 1;
                  } else {
                    break;
                  }
                }
                new_tail[coll] = o;
                return new cljs.core.PersistentVector(this.meta, this.cnt + 1, this.shift, this.root, new_tail, null);
              }
              coll = (new_tail = this.cnt >>> 5 > 1 << this.shift) ? this.shift + 5 : this.shift;
              new_tail ? (new_tail = cljs.core.pv_fresh_node(null), cljs.core.pv_aset(new_tail, 0, this.root), cljs.core.pv_aset(new_tail, 1, cljs.core.new_path(null, this.shift, new cljs.core.VectorNode(null, this.tail)))) : new_tail = cljs.core.push_tail(this, this.shift, this.root, new cljs.core.VectorNode(null, this.tail));
              return new cljs.core.PersistentVector(this.meta, this.cnt + 1, coll, new_tail, [o], null);
            };
            cljs.core.PersistentVector.prototype.call = function() {
              var G__8244 = null;
              G__8244 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$IIndexed$_nth$arity$2(null, k);
                  case 3:
                    return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8244.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$IIndexed$_nth$arity$2(null, k);
              };
              G__8244.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
              };
              return G__8244;
            }();
            cljs.core.PersistentVector.prototype.apply = function(self__, args6710) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6710)));
            };
            cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$IIndexed$_nth$arity$2(null, k);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.PersistentVector.getBasis = function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$cnt, cljs$cst$symbol$shift, cljs$cst$symbol$root, cljs$cst$symbol$tail, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentVector.cljs$lang$type = !0;
            cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
            cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentVector");
            };
            cljs.core.__GT_PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
              return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
            };
            cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
            cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
              var l = xs.length;
              xs = no_clone ? xs : cljs.core.aclone(xs);
              if (32 > l) {
                return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs, null);
              }
              var node = xs.slice(0, 32);
              no_clone = 32;
              for (var out = (new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null)).cljs$core$IEditableCollection$_as_transient$arity$1(null);;) {
                if (no_clone < l) {
                  node = no_clone + 1, out = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs[no_clone]), no_clone = node;
                } else {
                  return cljs.core.persistent_BANG_(out);
                }
              }
            };
            var G__6720_8247 = cljs.core.PersistentVector.prototype, G__6721_8248 = cljs.core.ITER_SYMBOL, G__6722_8249 = function(G__6720_8247, G__6721_8248) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6720_8247, G__6721_8248, G__6722_8249);
            cljs.core.vec = function(coll) {
              return cljs.core.truth_(cljs.core.map_entry_QMARK_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.map_entry_QMARK_.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.map_entry_QMARK_.call(null, coll)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.key.call(null, coll), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(coll) : 
              cljs.core.val.call(null, coll)], null) : cljs.core.vector_QMARK_(coll) ? cljs.core.with_meta(coll, null) : cljs.core.array_QMARK_(coll) ? cljs.core.PersistentVector.fromArray(coll, !0) : cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
            };
            cljs.core.vector = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8250 = arguments.length, i__4731__auto___8251 = 0;;) {
                if (i__4731__auto___8251 < len__4730__auto___8250) {
                  args__4736__auto__.push(arguments[i__4731__auto___8251]), i__4731__auto___8251 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
              return args instanceof cljs.core.IndexedSeq && 0 === args.i ? cljs.core.PersistentVector.fromArray(args.arr, !0) : cljs.core.vec(args);
            };
            cljs.core.vector.cljs$lang$maxFixedArity = 0;
            cljs.core.vector.cljs$lang$applyTo = function(seq6723) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq6723));
            };
            cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
              this.vec = vec;
              this.node = node;
              this.i = i;
              this.off = off;
              this.meta = meta;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32375020;
              this.cljs$lang$protocol_mask$partition1$ = 1536;
            };
            cljs.core.ChunkedSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ChunkedSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.ChunkedSeq.prototype.indexOf = function() {
              var G__8253 = null, G__8253__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8253__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8253 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8253__1.call(this, x);
                  case 2:
                    return G__8253__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8253.cljs$core$IFn$_invoke$arity$1 = G__8253__1;
              G__8253.cljs$core$IFn$_invoke$arity$2 = G__8253__2;
              return G__8253;
            }();
            cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
              var G__8254 = null, G__8254__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8254__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8254 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8254__1.call(this, x);
                  case 2:
                    return G__8254__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8254.cljs$core$IFn$_invoke$arity$1 = G__8254__1;
              G__8254.cljs$core$IFn$_invoke$arity$2 = G__8254__2;
              return G__8254;
            }();
            cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              if (this.off + 1 < this.node.length) {
                coll = this.vec;
                var G__6725 = this.node, G__6726 = this.i, G__6727 = this.off + 1;
                coll = cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(coll, G__6725, G__6726, G__6727) : cljs.core.chunked_seq.call(null, coll, G__6725, G__6726, G__6727);
                return null == coll ? null : coll;
              }
              return this.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(this.vec, f, this.i + this.off, cljs.core.count(this.vec));
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(this.vec, f, start, this.i + this.off, cljs.core.count(this.vec));
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.node[this.off];
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              if (this.off + 1 < this.node.length) {
                coll = this.vec;
                var G__6729 = this.node, G__6730 = this.i, G__6731 = this.off + 1;
                coll = cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(coll, G__6729, G__6730, G__6731) : cljs.core.chunked_seq.call(null, coll, G__6729, G__6730, G__6731);
                return null == coll ? cljs.core.List.EMPTY : coll;
              }
              return this.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
              return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(this.node, this.off);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
              coll = this.i + this.node.length;
              if (coll < cljs.core._count(this.vec)) {
                var G__6732 = this.vec, G__6733 = cljs.core.unchecked_array_for(this.vec, coll);
                return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__6732, G__6733, coll, 0) : cljs.core.chunked_seq.call(null, G__6732, G__6733, coll, 0);
              }
              return cljs.core.List.EMPTY;
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(this.vec, this.node, this.i, this.off, new_meta) : cljs.core.chunked_seq.call(null, this.vec, this.node, this.i, this.off, new_meta);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
              coll = this.i + this.node.length;
              if (coll < cljs.core._count(this.vec)) {
                var G__6736 = this.vec, G__6737 = cljs.core.unchecked_array_for(this.vec, coll);
                return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__6736, G__6737, coll, 0) : cljs.core.chunked_seq.call(null, G__6736, G__6737, coll, 0);
              }
              return null;
            };
            cljs.core.ChunkedSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$vec, cljs$cst$symbol$node, cljs$cst$symbol$i, cljs$cst$symbol$off, cljs$cst$symbol$meta, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ChunkedSeq.cljs$lang$type = !0;
            cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
            cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ChunkedSeq");
            };
            cljs.core.__GT_ChunkedSeq = function(vec, node, i, off, meta, __hash) {
              return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
            };
            var G__6740_8255 = cljs.core.ChunkedSeq.prototype, G__6741_8256 = cljs.core.ITER_SYMBOL, G__6742_8257 = function(G__6740_8255, G__6741_8256) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6740_8255, G__6741_8256, G__6742_8257);
            cljs.core.chunked_seq = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 4:
                  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 5:
                  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
              return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
            };
            cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
              return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
            };
            cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
              return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
            };
            cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
            cljs.core.Subvec = function(meta, v, start, end, __hash) {
              this.meta = meta;
              this.v = v;
              this.start = start;
              this.end = end;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 167666463;
              this.cljs$lang$protocol_mask$partition1$ = 139264;
            };
            cljs.core.Subvec.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Subvec.prototype.cljs$core$IFind$_find$arity$2 = function(coll, n) {
              if (0 > n) {
                return null;
              }
              coll = this.start + n;
              return coll < this.end ? new cljs.core.MapEntry(n, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(this.v, coll), null) : null;
            };
            cljs.core.Subvec.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Subvec.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Subvec.prototype.indexOf = function() {
              var G__8259 = null, G__8259__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8259__2 = function(x, start__$1) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start__$1);
              };
              G__8259 = function(x, start__$1) {
                switch(arguments.length) {
                  case 1:
                    return G__8259__1.call(this, x);
                  case 2:
                    return G__8259__2.call(this, x, start__$1);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8259.cljs$core$IFn$_invoke$arity$1 = G__8259__1;
              G__8259.cljs$core$IFn$_invoke$arity$2 = G__8259__2;
              return G__8259;
            }();
            cljs.core.Subvec.prototype.lastIndexOf = function() {
              var G__8260 = null, G__8260__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8260__2 = function(x, start__$1) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start__$1);
              };
              G__8260 = function(x, start__$1) {
                switch(arguments.length) {
                  case 1:
                    return G__8260__1.call(this, x);
                  case 2:
                    return G__8260__2.call(this, x, start__$1);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8260.cljs$core$IFn$_invoke$arity$1 = G__8260__1;
              G__8260.cljs$core$IFn$_invoke$arity$2 = G__8260__2;
              return G__8260;
            }();
            cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              return "number" === typeof k ? this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found) : not_found;
            };
            cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
              coll = this.start;
              for (var j = 0;;) {
                if (coll < this.end) {
                  var G__6747 = j, G__6748 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(this.v, coll);
                  init = f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, G__6747, G__6748) : f.call(null, init, G__6747, G__6748);
                  if (cljs.core.reduced_QMARK_(init)) {
                    return cljs.core.deref(init);
                  }
                  j += 1;
                  coll += 1;
                } else {
                  return init;
                }
              }
            };
            cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
              return 0 > n || this.end <= this.start + n ? cljs.core.vector_index_out_of_bounds(n, this.end - this.start) : cljs.core._nth.cljs$core$IFn$_invoke$arity$2(this.v, this.start + n);
            };
            cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
              return 0 > n || this.end <= this.start + n ? not_found : cljs.core._nth.cljs$core$IFn$_invoke$arity$3(this.v, this.start + n, not_found);
            };
            cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
              coll = this.start + n;
              if (0 > n || this.end + 1 <= coll) {
                throw Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds [0,", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.cljs$core$ICounted$_count$arity$1(null)), "]"].join(""));
              }
              n = this.meta;
              val = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(this.v, coll, val);
              var G__6751 = this.start, x__4219__auto__ = this.end;
              coll += 1;
              coll = x__4219__auto__ > coll ? x__4219__auto__ : coll;
              return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(n, val, G__6751, coll, null) : cljs.core.build_subvec.call(null, n, val, G__6751, coll, null);
            };
            cljs.core.Subvec.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return null != this.v && cljs.core.PROTOCOL_SENTINEL === this.v.cljs$core$APersistentVector$ ? cljs.core.ranged_iterator(this.v, this.start, this.end) : cljs.core.seq_iter(this);
            };
            cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.Subvec(this.meta, this.v, this.start, this.end, this.__hash);
            };
            cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.end - this.start;
            };
            cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(this.v, this.end - 1);
            };
            cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
              if (this.start === this.end) {
                throw Error("Can't pop empty vector");
              }
              coll = this.meta;
              var G__6756 = this.v, G__6757 = this.start, G__6758 = this.end - 1;
              return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(coll, G__6756, G__6757, G__6758, null) : cljs.core.build_subvec.call(null, coll, G__6756, G__6757, G__6758, null);
            };
            cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
              return this.start !== this.end ? new cljs.core.RSeq(this, this.end - this.start - 1, null) : null;
            };
            cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, this.meta);
            };
            cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return null != this.v && cljs.core.PROTOCOL_SENTINEL === this.v.cljs$core$APersistentVector$ ? cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$4(this.v, f, this.start, this.end) : cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, init) {
              return null != this.v && cljs.core.PROTOCOL_SENTINEL === this.v.cljs$core$APersistentVector$ ? cljs.core.pv_reduce.cljs$core$IFn$_invoke$arity$5(this.v, f, init, this.start, this.end) : cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(this, f, init);
            };
            cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
              if ("number" === typeof key) {
                return this.cljs$core$IVector$_assoc_n$arity$3(null, key, val);
              }
              throw Error("Subvec's key for assoc must be a number.");
            };
            cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              var self__ = this;
              return function(coll__$1$jscomp$0) {
                return function cljs$core$subvec_seq(i) {
                  return i === self__.end ? null : cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
                    return function() {
                      return cljs$core$subvec_seq(i + 1);
                    };
                  }(), null, null));
                };
              }()(self__.start);
            };
            cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(new_meta, this.v, this.start, this.end, this.__hash) : cljs.core.build_subvec.call(null, new_meta, this.v, this.start, this.end, this.__hash);
            };
            cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              coll = this.meta;
              o = cljs.core._assoc_n(this.v, this.end, o);
              var G__6764 = this.start, G__6765 = this.end + 1;
              return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(coll, o, G__6764, G__6765, null) : cljs.core.build_subvec.call(null, coll, o, G__6764, G__6765, null);
            };
            cljs.core.Subvec.prototype.call = function() {
              var G__8264 = null;
              G__8264 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$IIndexed$_nth$arity$2(null, k);
                  case 3:
                    return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8264.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$IIndexed$_nth$arity$2(null, k);
              };
              G__8264.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
              };
              return G__8264;
            }();
            cljs.core.Subvec.prototype.apply = function(self__, args6745) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6745)));
            };
            cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$IIndexed$_nth$arity$2(null, k);
            };
            cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.Subvec.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$v, cljs$cst$symbol$start, cljs$cst$symbol$end, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Subvec.cljs$lang$type = !0;
            cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
            cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Subvec");
            };
            cljs.core.__GT_Subvec = function(meta, v, start, end, __hash) {
              return new cljs.core.Subvec(meta, v, start, end, __hash);
            };
            var G__6767_8265 = cljs.core.Subvec.prototype, G__6768_8266 = cljs.core.ITER_SYMBOL, G__6769_8267 = function(G__6767_8265, G__6768_8266) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6767_8265, G__6768_8266, G__6769_8267);
            cljs.core.build_subvec = function(meta, v, start, end, __hash) {
              for (;;) {
                if (v instanceof cljs.core.Subvec) {
                  start = v.start + start, end = v.start + end, v = v.v;
                } else {
                  if (!cljs.core.vector_QMARK_(v)) {
                    throw Error("v must satisfy IVector");
                  }
                  var c_8273 = cljs.core.count(v);
                  if (0 > start || 0 > end || start > c_8273 || end > c_8273) {
                    throw Error("Index out of bounds");
                  }
                  return new cljs.core.Subvec(meta, v, start, end, __hash);
                }
              }
            };
            cljs.core.subvec = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
              return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
            };
            cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
              return cljs.core.build_subvec(null, v, start | 0, end | 0, null);
            };
            cljs.core.subvec.cljs$lang$maxFixedArity = 3;
            cljs.core.tv_ensure_editable = function(edit, node) {
              return edit === node.edit ? node : new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
            };
            cljs.core.tv_editable_root = function(node) {
              return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
            };
            cljs.core.tv_editable_tail = function(tl) {
              var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              cljs.core.array_copy(tl, 0, ret, 0, tl.length);
              return ret;
            };
            cljs.core.tv_push_tail = function(tv, level, parent, tail_node) {
              var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent), subidx = tv.cnt - 1 >>> level & 31;
              cljs.core.pv_aset(ret, subidx, 5 === level ? tail_node : function() {
                var child = cljs.core.pv_aget(ret, subidx);
                if (null != child) {
                  var G__6775 = level - 5;
                  return cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4(tv, G__6775, child, tail_node) : cljs.core.tv_push_tail.call(null, tv, G__6775, child, tail_node);
                }
                return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
              }());
              return ret;
            };
            cljs.core.tv_pop_tail = function(tv, level, node) {
              node = cljs.core.tv_ensure_editable(tv.root.edit, node);
              var subidx = tv.cnt - 2 >>> level & 31;
              if (5 < level) {
                level -= 5;
                var G__6780 = cljs.core.pv_aget(node, subidx);
                tv = cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3(tv, level, G__6780) : cljs.core.tv_pop_tail.call(null, tv, level, G__6780);
                if (null == tv && 0 === subidx) {
                  return null;
                }
                cljs.core.pv_aset(node, subidx, tv);
                return node;
              }
              if (0 === subidx) {
                return null;
              }
              cljs.core.pv_aset(node, subidx, null);
              return node;
            };
            cljs.core.unchecked_editable_array_for = function(tv, i) {
              if (i >= cljs.core.tail_off(tv)) {
                return tv.tail;
              }
              var root = tv.root, node = root;
              for (tv = tv.shift;;) {
                if (0 < tv) {
                  node = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> tv & 31)), tv -= 5;
                } else {
                  return node.arr;
                }
              }
            };
            cljs.core.TransientVector = function(cnt, shift, root, tail) {
              this.cnt = cnt;
              this.shift = shift;
              this.root = root;
              this.tail = tail;
              this.cljs$lang$protocol_mask$partition1$ = 88;
              this.cljs$lang$protocol_mask$partition0$ = 275;
            };
            cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
              if (this.root.edit) {
                if (32 > this.cnt - cljs.core.tail_off(this)) {
                  this.tail[this.cnt & 31] = o;
                } else {
                  tcoll = new cljs.core.VectorNode(this.root.edit, this.tail);
                  var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                  new_tail[0] = o;
                  this.tail = new_tail;
                  this.cnt >>> 5 > 1 << this.shift ? (o = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], new_tail = this.shift + 5, o[0] = this.root, o[1] = cljs.core.new_path(this.root.edit, this.shift, tcoll), this.root = new cljs.core.VectorNode(this.root.edit, o), this.shift = new_tail) : this.root = cljs.core.tv_push_tail(this, this.shift, this.root, tcoll);
                }
                this.cnt += 1;
                return this;
              }
              throw Error("conj! after persistent!");
            };
            cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
              if (this.root.edit) {
                this.root.edit = null;
                tcoll = this.cnt - cljs.core.tail_off(this);
                var trimmed_tail = Array(tcoll);
                cljs.core.array_copy(this.tail, 0, trimmed_tail, 0, tcoll);
                return new cljs.core.PersistentVector(null, this.cnt, this.shift, this.root, trimmed_tail, null);
              }
              throw Error("persistent! called twice");
            };
            cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
              if ("number" === typeof key) {
                return this.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null, key, val);
              }
              throw Error("TransientVector's key for assoc! must be a number.");
            };
            cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
              var self__ = this, tcoll__$1$jscomp$0 = this;
              if (self__.root.edit) {
                if (0 <= n && n < self__.cnt) {
                  return cljs.core.tail_off(tcoll__$1$jscomp$0) <= n ? self__.tail[n & 31] = val : (tcoll = function() {
                    return function(tcoll__$1) {
                      return function cljs$core$go(level, node) {
                        node = cljs.core.tv_ensure_editable(self__.root.edit, node);
                        if (0 === level) {
                          cljs.core.pv_aset(node, n & 31, val);
                        } else {
                          var subidx = n >>> level & 31;
                          cljs.core.pv_aset(node, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node, subidx)));
                        }
                        return node;
                      };
                    }()(self__.shift, self__.root);
                  }(), self__.root = tcoll), tcoll__$1$jscomp$0;
                }
                if (n === self__.cnt) {
                  return tcoll__$1$jscomp$0.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, val);
                }
                throw Error(["Index ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), " out of bounds for TransientVector of length", cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt)].join(""));
              }
              throw Error("assoc! after persistent!");
            };
            cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
              if (this.root.edit) {
                if (0 === this.cnt) {
                  throw Error("Can't pop empty vector");
                }
                if (1 === this.cnt) {
                  this.cnt = 0;
                } else {
                  if (0 < (this.cnt - 1 & 31)) {
                    --this.cnt;
                  } else {
                    tcoll = cljs.core.unchecked_editable_array_for(this, this.cnt - 2);
                    var new_root = cljs.core.tv_pop_tail(this, this.shift, this.root);
                    new_root = null != new_root ? new_root : new cljs.core.VectorNode(this.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
                    5 < this.shift && null == cljs.core.pv_aget(new_root, 1) ? (this.root = cljs.core.tv_ensure_editable(this.root.edit, cljs.core.pv_aget(new_root, 0)), this.shift -= 5) : this.root = new_root;
                    --this.cnt;
                    this.tail = tcoll;
                  }
                }
                return this;
              }
              throw Error("pop! after persistent!");
            };
            cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              if (this.root.edit) {
                return this.cnt;
              }
              throw Error("count after persistent!");
            };
            cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
              if (this.root.edit) {
                return cljs.core.array_for(this, n)[n & 31];
              }
              throw Error("nth after persistent!");
            };
            cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
              return 0 <= n && n < this.cnt ? this.cljs$core$IIndexed$_nth$arity$2(null, n) : not_found;
            };
            cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              return "number" === typeof k ? this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found) : not_found;
            };
            cljs.core.TransientVector.prototype.call = function() {
              var G__8277 = null;
              G__8277 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8277.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8277.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8277;
            }();
            cljs.core.TransientVector.prototype.apply = function(self__, args6781) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6781)));
            };
            cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.TransientVector.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$shift, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$root, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$tail, 
              new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.TransientVector.cljs$lang$type = !0;
            cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
            cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TransientVector");
            };
            cljs.core.__GT_TransientVector = function(cnt, shift, root, tail) {
              return new cljs.core.TransientVector(cnt, shift, root, tail);
            };
            cljs.core.PersistentQueueIter = function(fseq, riter) {
              this.fseq = fseq;
              this.riter = riter;
            };
            cljs.core.PersistentQueueIter.prototype.hasNext = function() {
              var or__4131__auto__ = null != this.fseq && cljs.core.seq(this.fseq);
              return or__4131__auto__ ? or__4131__auto__ : (or__4131__auto__ = null != this.riter) ? this.riter.hasNext() : or__4131__auto__;
            };
            cljs.core.PersistentQueueIter.prototype.next = function() {
              if (null != this.fseq) {
                var ret = cljs.core.first(this.fseq);
                this.fseq = cljs.core.next(this.fseq);
                return ret;
              }
              if (null != this.riter && this.riter.hasNext()) {
                return this.riter.next();
              }
              throw Error("No such element");
            };
            cljs.core.PersistentQueueIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.PersistentQueueIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$fseq, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$riter], null);
            };
            cljs.core.PersistentQueueIter.cljs$lang$type = !0;
            cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
            cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentQueueIter");
            };
            cljs.core.__GT_PersistentQueueIter = function(fseq, riter) {
              return new cljs.core.PersistentQueueIter(fseq, riter);
            };
            cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
              this.meta = meta;
              this.front = front;
              this.rear = rear;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 31850700;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.PersistentQueueSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
              var G__8278 = null, G__8278__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8278__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8278 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8278__1.call(this, x);
                  case 2:
                    return G__8278__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8278.cljs$core$IFn$_invoke$arity$1 = G__8278__1;
              G__8278.cljs$core$IFn$_invoke$arity$2 = G__8278__2;
              return G__8278;
            }();
            cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
              var G__8279 = null, G__8279__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8279__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8279 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8279__1.call(this, x);
                  case 2:
                    return G__8279__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8279.cljs$core$IFn$_invoke$arity$1 = G__8279__1;
              G__8279.cljs$core$IFn$_invoke$arity$2 = G__8279__2;
              return G__8279;
            }();
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return (coll = cljs.core.next(this.front)) ? new cljs.core.PersistentQueueSeq(this.meta, coll, this.rear, null) : null != this.rear ? new cljs.core.PersistentQueueSeq(this.meta, this.rear, null, null) : null;
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.List.EMPTY, this.meta);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core.first(this.front);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return (coll = cljs.core.next(this.front)) ? new cljs.core.PersistentQueueSeq(this.meta, coll, this.rear, null) : null == this.rear ? this.cljs$core$IEmptyableCollection$_empty$arity$1(null) : new cljs.core.PersistentQueueSeq(this.meta, this.rear, null, null);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentQueueSeq(new_meta, this.front, this.rear, this.__hash);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.PersistentQueueSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$front, cljs$cst$symbol$rear, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentQueueSeq.cljs$lang$type = !0;
            cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
            cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentQueueSeq");
            };
            cljs.core.__GT_PersistentQueueSeq = function(meta, front, rear, __hash) {
              return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
            };
            var G__6783_8280 = cljs.core.PersistentQueueSeq.prototype, G__6784_8281 = cljs.core.ITER_SYMBOL, G__6785_8282 = function(G__6783_8280, G__6784_8281) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6783_8280, G__6784_8281, G__6785_8282);
            cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
              this.meta = meta;
              this.count = count;
              this.front = front;
              this.rear = rear;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition1$ = 139264;
              this.cljs$lang$protocol_mask$partition0$ = 31858766;
            };
            cljs.core.PersistentQueue.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentQueue.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentQueue.prototype.indexOf = function() {
              var G__8283 = null, G__8283__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8283__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8283 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8283__1.call(this, x);
                  case 2:
                    return G__8283__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8283.cljs$core$IFn$_invoke$arity$1 = G__8283__1;
              G__8283.cljs$core$IFn$_invoke$arity$2 = G__8283__2;
              return G__8283;
            }();
            cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
              var G__8284 = null, G__8284__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, this.count.cljs$core$IFn$_invoke$arity$1 ? this.count.cljs$core$IFn$_invoke$arity$1(this) : this.count.call(null, this));
              }, G__8284__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8284 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8284__1.call(this, x);
                  case 2:
                    return G__8284__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8284.cljs$core$IFn$_invoke$arity$1 = G__8284__1;
              G__8284.cljs$core$IFn$_invoke$arity$2 = G__8284__2;
              return G__8284;
            }();
            cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.PersistentQueueIter(this.front, cljs.core._iterator(this.rear));
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
              return new cljs.core.PersistentQueue(this.meta, this.count, this.front, this.rear, this.__hash);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.count;
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
              return cljs.core.first(this.front);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
              return cljs.core.truth_(this.front) ? (coll = cljs.core.next(this.front)) ? new cljs.core.PersistentQueue(this.meta, this.count - 1, coll, this.rear, null) : new cljs.core.PersistentQueue(this.meta, this.count - 1, cljs.core.seq(this.rear), cljs.core.PersistentVector.EMPTY, null) : this;
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentQueue.EMPTY, this.meta);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core.first(this.front);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return cljs.core.rest(cljs.core.seq(this));
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              var self__ = this, rear__$1 = cljs.core.seq(self__.rear);
              return cljs.core.truth_(function() {
                var or__4131__auto__ = self__.front;
                return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : rear__$1;
              }()) ? new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null) : null;
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentQueue(new_meta, this.count, this.front, this.rear, this.__hash);
            };
            cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              var self__ = this;
              return cljs.core.truth_(self__.front) ? new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
                var or__4131__auto__ = self__.rear;
                return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : cljs.core.PersistentVector.EMPTY;
              }(), o), null) : new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
            };
            cljs.core.PersistentQueue.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$count, cljs$cst$symbol$front, cljs$cst$symbol$rear, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentQueue.cljs$lang$type = !0;
            cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
            cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentQueue");
            };
            cljs.core.__GT_PersistentQueue = function(meta, count, front, rear, __hash) {
              return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
            };
            cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
            var G__6786_8285 = cljs.core.PersistentQueue.prototype, G__6787_8286 = cljs.core.ITER_SYMBOL, G__6788_8287 = function(G__6786_8285, G__6787_8286) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6786_8285, G__6787_8286, G__6788_8287);
            cljs.core.NeverEquiv = function() {
              this.cljs$lang$protocol_mask$partition0$ = 2097152;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.NeverEquiv.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
              return !1;
            };
            cljs.core.NeverEquiv.getBasis = function() {
              return cljs.core.PersistentVector.EMPTY;
            };
            cljs.core.NeverEquiv.cljs$lang$type = !0;
            cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
            cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/NeverEquiv");
            };
            cljs.core.__GT_NeverEquiv = function() {
              return new cljs.core.NeverEquiv;
            };
            cljs.core.never_equiv = new cljs.core.NeverEquiv;
            cljs.core.equiv_map = function(x, y) {
              return cljs.core.boolean$(cljs.core.map_QMARK_(y) && !cljs.core.record_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? (null != x ? x.cljs$lang$protocol_mask$partition0$ & 1048576 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IKVReduce$ || (x.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IKVReduce, x)) : cljs.core.native_satisfies_QMARK_(cljs.core.IKVReduce, x)) ? cljs.core.reduce_kv(function(_, k, v) {
                return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, k, cljs.core.never_equiv), v) ? !0 : cljs.core.reduced(!1);
              }, !0, x) : cljs.core.every_QMARK_(function(xkv) {
                return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
              }, x) : null : null);
            };
            cljs.core.scan_array = function(incr, k, array) {
              for (var len = array.length, i = 0;;) {
                if (i < len) {
                  if (k === array[i]) {
                    return i;
                  }
                  i += incr;
                } else {
                  return null;
                }
              }
            };
            cljs.core.obj_map_compare_keys = function(a, b) {
              a = cljs.core.hash(a);
              b = cljs.core.hash(b);
              return a < b ? -1 : a > b ? 1 : 0;
            };
            cljs.core.obj_map__GT_hash_map = function(m, k, v) {
              var ks = m.keys, len = ks.length, so = m.strobj;
              m = cljs.core.meta(m);
              for (var i = 0, out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);;) {
                if (i < len) {
                  var k__$1 = ks[i];
                  i += 1;
                  out = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, goog.object.get(so, k__$1));
                } else {
                  return cljs.core._with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), m);
                }
              }
            };
            cljs.core.obj_clone = function(obj, ks) {
              for (var new_obj = {}, l = ks.length, i_8291 = 0;;) {
                if (i_8291 < l) {
                  var k_8292 = ks[i_8291], G__6792_8293 = new_obj, G__6793_8294 = k_8292;
                  k_8292 = goog.object.get(obj, k_8292);
                  goog.object.set(G__6792_8293, G__6793_8294, k_8292);
                  i_8291 += 1;
                } else {
                  break;
                }
              }
              return new_obj;
            };
            cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
              this.meta = meta;
              this.keys = keys;
              this.strobj = strobj;
              this.update_count = update_count;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 16123663;
              this.cljs$lang$protocol_mask$partition1$ = 4;
            };
            cljs.core.ObjMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ObjMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
              return goog.isString(k) && null != cljs.core.scan_array(1, k, this.keys) ? new cljs.core.MapEntry(k, this.strobj[k], null) : null;
            };
            cljs.core.ObjMap.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ObjMap.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              return goog.isString(k) && null != cljs.core.scan_array(1, k, this.keys) ? this.strobj[k] : not_found;
            };
            cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
              coll = this.keys.sort(cljs.core.obj_map_compare_keys);
              for (var init__$1 = init;;) {
                if (cljs.core.seq(coll)) {
                  var G__6798 = init = cljs.core.first(coll);
                  init = this.strobj[init];
                  init = f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init__$1, G__6798, init) : f.call(null, init__$1, G__6798, init);
                  if (cljs.core.reduced_QMARK_(init)) {
                    return cljs.core.deref(init);
                  }
                  coll = cljs.core.rest(coll);
                  init__$1 = init;
                } else {
                  return init__$1;
                }
              }
            };
            cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.keys.length;
            };
            cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_map(this, other);
            };
            cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
              return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, this));
            };
            cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.ObjMap.EMPTY, this.meta);
            };
            cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
              if (goog.isString(k) && null != cljs.core.scan_array(1, k, this.keys)) {
                coll = cljs.core.aclone(this.keys);
                var new_strobj = cljs.core.obj_clone(this.strobj, this.keys);
                coll.splice(cljs.core.scan_array(1, k, coll), 1);
                delete new_strobj[k];
                return new cljs.core.ObjMap(this.meta, coll, new_strobj, this.update_count + 1, null);
              }
              return this;
            };
            cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
              if (goog.isString(k)) {
                if (this.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || this.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
                  return cljs.core.obj_map__GT_hash_map(this, k, v);
                }
                if (null != cljs.core.scan_array(1, k, this.keys)) {
                  return coll = cljs.core.obj_clone(this.strobj, this.keys), goog.object.set(coll, k, v), new cljs.core.ObjMap(this.meta, this.keys, coll, this.update_count + 1, null);
                }
                coll = cljs.core.obj_clone(this.strobj, this.keys);
                var new_keys = cljs.core.aclone(this.keys);
                goog.object.set(coll, k, v);
                new_keys.push(k);
                return new cljs.core.ObjMap(this.meta, new_keys, coll, this.update_count + 1, null);
              }
              return cljs.core.obj_map__GT_hash_map(this, k, v);
            };
            cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
              return goog.isString(k) && null != cljs.core.scan_array(1, k, this.keys) ? !0 : !1;
            };
            cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              var self__ = this;
              return 0 < self__.keys.length ? cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
                return function(p1__6795_SHARP_) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__6795_SHARP_, self__.strobj[p1__6795_SHARP_]], null);
                };
              }(), self__.keys.sort(cljs.core.obj_map_compare_keys)) : null;
            };
            cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.ObjMap(new_meta, this.keys, this.strobj, this.update_count, this.__hash);
            };
            cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
              return cljs.core.vector_QMARK_(entry) ? this.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1)) : cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, this, entry);
            };
            cljs.core.ObjMap.prototype.call = function() {
              var G__8299 = null;
              G__8299 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8299.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8299.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8299;
            }();
            cljs.core.ObjMap.prototype.apply = function(self__, args6796) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6796)));
            };
            cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.ObjMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$keys, cljs$cst$symbol$strobj, cljs$cst$symbol$update_DASH_count, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ObjMap.cljs$lang$type = !0;
            cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
            cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ObjMap");
            };
            cljs.core.__GT_ObjMap = function(meta, keys, strobj, update_count, __hash) {
              return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
            };
            cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
            cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
            cljs.core.ObjMap.fromObject = function(ks, obj) {
              return new cljs.core.ObjMap(null, ks, obj, 0, null);
            };
            cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
              this.i = i;
              this.record = record;
              this.base_count = base_count;
              this.fields = fields;
              this.ext_map_iter = ext_map_iter;
            };
            cljs.core.RecordIter.prototype.hasNext = function() {
              var or__4131__auto__ = this.i < this.base_count;
              return or__4131__auto__ ? or__4131__auto__ : this.ext_map_iter.hasNext();
            };
            cljs.core.RecordIter.prototype.next = function() {
              if (this.i < this.base_count) {
                var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(this.fields, this.i);
                this.i += 1;
                return new cljs.core.MapEntry(k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(this.record, k), null);
              }
              return this.ext_map_iter.next();
            };
            cljs.core.RecordIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.RecordIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$record, cljs$cst$symbol$base_DASH_count, cljs$cst$symbol$fields, cljs$cst$symbol$ext_DASH_map_DASH_iter], null);
            };
            cljs.core.RecordIter.cljs$lang$type = !0;
            cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
            cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RecordIter");
            };
            cljs.core.__GT_RecordIter = function(i, record, base_count, fields, ext_map_iter) {
              return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
            };
            cljs.core.ES6EntriesIterator = function(s) {
              this.s = s;
            };
            cljs.core.ES6EntriesIterator.prototype.next = function() {
              if (null != this.s) {
                var vec__6802 = cljs.core.first(this.s), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6802, 0, null);
                vec__6802 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6802, 1, null);
                this.s = cljs.core.next(this.s);
                return {value:[k, vec__6802], done:!1};
              }
              return {value:null, done:!0};
            };
            cljs.core.ES6EntriesIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$s, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ES6EntriesIterator.cljs$lang$type = !0;
            cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
            cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ES6EntriesIterator");
            };
            cljs.core.__GT_ES6EntriesIterator = function(s) {
              return new cljs.core.ES6EntriesIterator(s);
            };
            cljs.core.es6_entries_iterator = function(coll) {
              return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
            };
            cljs.core.ES6SetEntriesIterator = function(s) {
              this.s = s;
            };
            cljs.core.ES6SetEntriesIterator.prototype.next = function() {
              if (null != this.s) {
                var x = cljs.core.first(this.s);
                this.s = cljs.core.next(this.s);
                return {value:[x, x], done:!1};
              }
              return {value:null, done:!0};
            };
            cljs.core.ES6SetEntriesIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$s, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ES6SetEntriesIterator.cljs$lang$type = !0;
            cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
            cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ES6SetEntriesIterator");
            };
            cljs.core.__GT_ES6SetEntriesIterator = function(s) {
              return new cljs.core.ES6SetEntriesIterator(s);
            };
            cljs.core.es6_set_entries_iterator = function(coll) {
              return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
            };
            cljs.core.array_index_of_nil_QMARK_ = function(arr) {
              for (var len = arr.length, i = 0;;) {
                if (len <= i) {
                  return -1;
                }
                if (null == arr[i]) {
                  return i;
                }
                i += 2;
              }
            };
            cljs.core.array_index_of_keyword_QMARK_ = function(arr, k) {
              var len = arr.length;
              k = k.fqn;
              for (var i = 0;;) {
                if (len <= i) {
                  return -1;
                }
                if (arr[i] instanceof cljs.core.Keyword && k === arr[i].fqn) {
                  return i;
                }
                i += 2;
              }
            };
            cljs.core.array_index_of_symbol_QMARK_ = function(arr, k) {
              var len = arr.length;
              k = k.str;
              for (var i = 0;;) {
                if (len <= i) {
                  return -1;
                }
                if (arr[i] instanceof cljs.core.Symbol && k === arr[i].str) {
                  return i;
                }
                i += 2;
              }
            };
            cljs.core.array_index_of_identical_QMARK_ = function(arr, k) {
              for (var len = arr.length, i = 0;;) {
                if (len <= i) {
                  return -1;
                }
                if (k === arr[i]) {
                  return i;
                }
                i += 2;
              }
            };
            cljs.core.array_index_of_equiv_QMARK_ = function(arr, k) {
              for (var len = arr.length, i = 0;;) {
                if (len <= i) {
                  return -1;
                }
                if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
                  return i;
                }
                i += 2;
              }
            };
            cljs.core.array_index_of = function(arr, k) {
              return k instanceof cljs.core.Keyword ? cljs.core.array_index_of_keyword_QMARK_(arr, k) : goog.isString(k) || "number" === typeof k ? cljs.core.array_index_of_identical_QMARK_(arr, k) : k instanceof cljs.core.Symbol ? cljs.core.array_index_of_symbol_QMARK_(arr, k) : null == k ? cljs.core.array_index_of_nil_QMARK_(arr) : cljs.core.array_index_of_equiv_QMARK_(arr, k);
            };
            cljs.core.array_map_index_of = function(m, k) {
              return cljs.core.array_index_of(m.arr, k);
            };
            cljs.core.array_extend_kv = function(arr, k, v) {
              for (var l = arr.length, narr = Array(l + 2), i_8305 = 0;;) {
                if (i_8305 < l) {
                  narr[i_8305] = arr[i_8305], i_8305 += 1;
                } else {
                  break;
                }
              }
              narr[l] = k;
              narr[l + 1] = v;
              return narr;
            };
            cljs.core.array_map_extend_kv = function(m, k, v) {
              return cljs.core.array_extend_kv(m.arr, k, v);
            };
            cljs.core.MapEntry = function(key, val, __hash) {
              this.key = key;
              this.val = val;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 166619935;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.MapEntry.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.MapEntry.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
              switch(k) {
                case 0:
                  return new cljs.core.MapEntry(0, this.key, null);
                case 1:
                  return new cljs.core.MapEntry(1, this.val, null);
                default:
                  return null;
              }
            };
            cljs.core.MapEntry.prototype.indexOf = function() {
              var G__8308 = null, G__8308__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8308__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8308 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8308__1.call(this, x);
                  case 2:
                    return G__8308__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8308.cljs$core$IFn$_invoke$arity$1 = G__8308__1;
              G__8308.cljs$core$IFn$_invoke$arity$2 = G__8308__2;
              return G__8308;
            }();
            cljs.core.MapEntry.prototype.lastIndexOf = function() {
              var G__8309 = null, G__8309__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8309__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8309 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8309__1.call(this, x);
                  case 2:
                    return G__8309__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8309.cljs$core$IFn$_invoke$arity$1 = G__8309__1;
              G__8309.cljs$core$IFn$_invoke$arity$2 = G__8309__2;
              return G__8309;
            }();
            cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, null);
            };
            cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
              if (0 === n) {
                return this.key;
              }
              if (1 === n) {
                return this.val;
              }
              throw Error("Index out of bounds");
            };
            cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
              return 0 === n ? this.key : 1 === n ? this.val : not_found;
            };
            cljs.core.MapEntry.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
              return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
            };
            cljs.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
              return null;
            };
            cljs.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
              return 2;
            };
            cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
              return this.key;
            };
            cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.MapEntry.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.MapEntry.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key], null);
            };
            cljs.core.MapEntry.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.val, this.key], 0, null);
            };
            cljs.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.MapEntry.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
              return null;
            };
            cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(this, f, start);
            };
            cljs.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), k, v);
            };
            cljs.core.MapEntry.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
              return 0 === k || 1 === k;
            };
            cljs.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.key, this.val], 0, null);
            };
            cljs.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
              return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), meta);
            };
            cljs.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val, o], null);
            };
            cljs.core.MapEntry.prototype.call = function() {
              var G__8310 = null;
              G__8310 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$IIndexed$_nth$arity$2(null, k);
                  case 3:
                    return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8310.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$IIndexed$_nth$arity$2(null, k);
              };
              G__8310.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
              };
              return G__8310;
            }();
            cljs.core.MapEntry.prototype.apply = function(self__, args6805) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6805)));
            };
            cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$IIndexed$_nth$arity$2(null, k);
            };
            cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.MapEntry.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$key, cljs$cst$symbol$val, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.MapEntry.cljs$lang$type = !0;
            cljs.core.MapEntry.cljs$lang$ctorStr = "cljs.core/MapEntry";
            cljs.core.MapEntry.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/MapEntry");
            };
            cljs.core.__GT_MapEntry = function(key, val, __hash) {
              return new cljs.core.MapEntry(key, val, __hash);
            };
            cljs.core.map_entry_QMARK_ = function(x) {
              return null != x ? x.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMapEntry$ ? !0 : !1 : !1;
            };
            cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
              this.arr = arr;
              this.i = i;
              this._meta = _meta;
              this.cljs$lang$protocol_mask$partition0$ = 32374990;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
              var G__8311 = null, G__8311__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8311__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8311 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8311__1.call(this, x);
                  case 2:
                    return G__8311__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8311.cljs$core$IFn$_invoke$arity$1 = G__8311__1;
              G__8311.cljs$core$IFn$_invoke$arity$2 = G__8311__2;
              return G__8311;
            }();
            cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
              var G__8312 = null, G__8312__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8312__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8312 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8312__1.call(this, x);
                  case 2:
                    return G__8312__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8312.cljs$core$IFn$_invoke$arity$1 = G__8312__1;
              G__8312.cljs$core$IFn$_invoke$arity$2 = G__8312__2;
              return G__8312;
            }();
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this._meta;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              return this.i < this.arr.length - 2 ? new cljs.core.PersistentArrayMapSeq(this.arr, this.i + 2, null) : null;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return (this.arr.length - this.i) / 2;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.hash_ordered_coll(this);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return new cljs.core.MapEntry(this.arr[this.i], this.arr[this.i + 1], null);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              return this.i < this.arr.length - 2 ? new cljs.core.PersistentArrayMapSeq(this.arr, this.i + 2, null) : cljs.core.List.EMPTY;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this._meta ? this : new cljs.core.PersistentArrayMapSeq(this.arr, this.i, new_meta);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.PersistentArrayMapSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs$cst$symbol$i, cljs$cst$symbol$_meta], null);
            };
            cljs.core.PersistentArrayMapSeq.cljs$lang$type = !0;
            cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
            cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentArrayMapSeq");
            };
            cljs.core.__GT_PersistentArrayMapSeq = function(arr, i, _meta) {
              return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
            };
            var G__6808_8313 = cljs.core.PersistentArrayMapSeq.prototype, G__6809_8314 = cljs.core.ITER_SYMBOL, G__6810_8315 = function(G__6808_8313, G__6809_8314) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6808_8313, G__6809_8314, G__6810_8315);
            cljs.core.persistent_array_map_seq = function(arr, i, _meta) {
              return i <= arr.length - 2 ? new cljs.core.PersistentArrayMapSeq(arr, i, _meta) : null;
            };
            cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
              this.arr = arr;
              this.i = i;
              this.cnt = cnt;
            };
            cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
              return this.i < this.cnt;
            };
            cljs.core.PersistentArrayMapIterator.prototype.next = function() {
              var ret = new cljs.core.MapEntry(this.arr[this.i], this.arr[this.i + 1], null);
              this.i += 2;
              return ret;
            };
            cljs.core.PersistentArrayMapIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$cnt], null);
            };
            cljs.core.PersistentArrayMapIterator.cljs$lang$type = !0;
            cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
            cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentArrayMapIterator");
            };
            cljs.core.__GT_PersistentArrayMapIterator = function(arr, i, cnt) {
              return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
            };
            cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
              this.meta = meta;
              this.cnt = cnt;
              this.arr = arr;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 16647951;
              this.cljs$lang$protocol_mask$partition1$ = 139268;
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
              coll = cljs.core.array_map_index_of(this, k);
              return -1 === coll ? null : new cljs.core.MapEntry(this.arr[coll], this.arr[coll + 1], null);
            };
            cljs.core.PersistentArrayMap.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentArrayMap.prototype.keys = function() {
              return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.keys.call(null, this));
            };
            cljs.core.PersistentArrayMap.prototype.entries = function() {
              return cljs.core.es6_entries_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentArrayMap.prototype.values = function() {
              return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.vals.call(null, this));
            };
            cljs.core.PersistentArrayMap.prototype.has = function(k) {
              return cljs.core.contains_QMARK_(this, k);
            };
            cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
              for (var seq__6812 = cljs.core.seq(this), chunk__6813 = null, count__6814 = 0, i__6815 = 0;;) {
                if (i__6815 < count__6814) {
                  var vec__6822 = chunk__6813.cljs$core$IIndexed$_nth$arity$2(null, i__6815), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6822, 0, null);
                  vec__6822 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6822, 1, null);
                  f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6822, k) : f.call(null, vec__6822, k);
                  i__6815 += 1;
                } else {
                  if (seq__6812 = cljs.core.seq(seq__6812)) {
                    cljs.core.chunked_seq_QMARK_(seq__6812) ? (chunk__6813 = cljs.core.chunk_first(seq__6812), seq__6812 = cljs.core.chunk_rest(seq__6812), k = chunk__6813, count__6814 = cljs.core.count(chunk__6813), chunk__6813 = k) : (chunk__6813 = cljs.core.first(seq__6812), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6813, 0, null), vec__6822 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6813, 1, null), f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6822, k) : f.call(null, 
                    vec__6822, k), seq__6812 = cljs.core.next(seq__6812), chunk__6813 = null, count__6814 = 0), i__6815 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              coll = cljs.core.array_map_index_of(this, k);
              return -1 === coll ? not_found : this.arr[coll + 1];
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
              coll = this.arr.length;
              for (var i = 0;;) {
                if (i < coll) {
                  var G__6829 = this.arr[i], G__6830 = this.arr[i + 1];
                  init = f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, G__6829, G__6830) : f.call(null, init, G__6829, G__6830);
                  if (cljs.core.reduced_QMARK_(init)) {
                    return cljs.core.deref(init);
                  }
                  i += 2;
                } else {
                  return init;
                }
              }
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
              return new cljs.core.PersistentArrayMapIterator(this.arr, 0, 2 * this.cnt);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentArrayMap(this.meta, this.cnt, this.arr, this.__hash);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.cnt;
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              if (cljs.core.map_QMARK_(other) && !cljs.core.record_QMARK_(other)) {
                if (coll = this.arr.length, this.cnt === other.cljs$core$ICounted$_count$arity$1(null)) {
                  for (var i = 0;;) {
                    if (i < coll) {
                      var v = other.cljs$core$ILookup$_lookup$arity$3(null, this.arr[i], cljs.core.lookup_sentinel);
                      if (v !== cljs.core.lookup_sentinel) {
                        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this.arr[i + 1], v)) {
                          i += 2;
                        } else {
                          return !1;
                        }
                      } else {
                        return !1;
                      }
                    } else {
                      return !0;
                    }
                  }
                } else {
                  return !1;
                }
              } else {
                return !1;
              }
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
              return new cljs.core.TransientArrayMap({}, this.arr.length, cljs.core.aclone(this.arr));
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, this.meta);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.iter_reduce.cljs$core$IFn$_invoke$arity$3(this, f, start);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
              if (0 <= cljs.core.array_map_index_of(this, k)) {
                coll = this.arr.length;
                var new_len = coll - 2;
                if (0 === new_len) {
                  return this.cljs$core$IEmptyableCollection$_empty$arity$1(null);
                }
                new_len = Array(new_len);
                for (var s = 0, d = 0;;) {
                  if (s >= coll) {
                    return new cljs.core.PersistentArrayMap(this.meta, this.cnt - 1, new_len, null);
                  }
                  cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, this.arr[s]) ? s += 2 : (new_len[d] = this.arr[s], new_len[d + 1] = this.arr[s + 1], d += 2, s += 2);
                }
              } else {
                return this;
              }
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
              coll = cljs.core.array_map_index_of(this, k);
              if (-1 === coll) {
                return this.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD ? (v = cljs.core.array_map_extend_kv(this, k, v), new cljs.core.PersistentArrayMap(this.meta, this.cnt + 1, v, null)) : cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, this), k, v), this.meta);
              }
              if (v === this.arr[coll + 1]) {
                return this;
              }
              k = cljs.core.aclone(this.arr);
              k[coll + 1] = v;
              return new cljs.core.PersistentArrayMap(this.meta, this.cnt, k, null);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
              return -1 !== cljs.core.array_map_index_of(this, k);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return cljs.core.persistent_array_map_seq(this.arr, 0, null);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentArrayMap(new_meta, this.cnt, this.arr, this.__hash);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
              if (cljs.core.vector_QMARK_(entry)) {
                return this.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
              }
              coll = this;
              for (entry = cljs.core.seq(entry);;) {
                if (null == entry) {
                  return coll;
                }
                var e = cljs.core.first(entry);
                if (cljs.core.vector_QMARK_(e)) {
                  coll = cljs.core._assoc(coll, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1)), entry = cljs.core.next(entry);
                } else {
                  throw Error("conj on a map takes map entries or seqables of map entries");
                }
              }
            };
            cljs.core.PersistentArrayMap.prototype.call = function() {
              var G__8337 = null;
              G__8337 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8337.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8337.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8337;
            }();
            cljs.core.PersistentArrayMap.prototype.apply = function(self__, args6811) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6811)));
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentArrayMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$cnt, cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentArrayMap.cljs$lang$type = !0;
            cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
            cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentArrayMap");
            };
            cljs.core.__GT_PersistentArrayMap = function(meta, cnt, arr, __hash) {
              return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
            };
            cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
            cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
            cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
              arr = no_clone ? arr : cljs.core.aclone(arr);
              if (!no_check) {
                no_check = [];
                for (no_clone = 0;;) {
                  if (no_clone < arr.length) {
                    var k_8339 = arr[no_clone], v_8340 = arr[no_clone + 1];
                    -1 === cljs.core.array_index_of(no_check, k_8339) && (no_check.push(k_8339), no_check.push(v_8340));
                    no_clone += 2;
                  } else {
                    break;
                  }
                }
                arr = no_check;
              }
              return new cljs.core.PersistentArrayMap(null, arr.length / 2, arr, null);
            };
            cljs.core.PersistentArrayMap.createWithCheck = function(arr) {
              for (var ret = [], i_8343 = 0;;) {
                if (i_8343 < arr.length) {
                  var k_8344 = arr[i_8343], v_8345 = arr[i_8343 + 1];
                  if (-1 === cljs.core.array_index_of(ret, k_8344)) {
                    var G__6834_8347 = ret;
                    G__6834_8347.push(k_8344);
                    G__6834_8347.push(v_8345);
                  } else {
                    throw Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(k_8344)].join(""));
                  }
                  i_8343 += 2;
                } else {
                  break;
                }
              }
              return new cljs.core.PersistentArrayMap(null, arr.length / 2, arr, null);
            };
            cljs.core.PersistentArrayMap.createAsIfByAssoc = function(arr) {
              for (var ret = [], i_8349 = 0;;) {
                if (i_8349 < arr.length) {
                  var k_8350 = arr[i_8349], v_8351 = arr[i_8349 + 1], idx_8352 = cljs.core.array_index_of(ret, k_8350);
                  -1 === idx_8352 ? (idx_8352 = ret, idx_8352.push(k_8350), idx_8352.push(v_8351)) : ret[idx_8352 + 1] = v_8351;
                  i_8349 += 2;
                } else {
                  break;
                }
              }
              return new cljs.core.PersistentArrayMap(null, ret.length / 2, ret, null);
            };
            var G__6836_8355 = cljs.core.PersistentArrayMap.prototype, G__6837_8356 = cljs.core.ITER_SYMBOL, G__6838_8357 = function(G__6836_8355, G__6837_8356) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6836_8355, G__6837_8356, G__6838_8357);
            cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
              this.editable_QMARK_ = editable_QMARK_;
              this.len = len;
              this.arr = arr;
              this.cljs$lang$protocol_mask$partition0$ = 259;
              this.cljs$lang$protocol_mask$partition1$ = 56;
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                return cljs.core.quot(this.len, 2);
              }
              throw Error("count after persistent!");
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                return tcoll = cljs.core.array_map_index_of(this, k), -1 === tcoll ? not_found : this.arr[tcoll + 1];
              }
              throw Error("lookup after persistent!");
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                if (cljs.core.map_entry_QMARK_(o)) {
                  return this.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
                }
                if (cljs.core.vector_QMARK_(o)) {
                  return this.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(0) : o.call(null, 0), o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(1) : o.call(null, 1));
                }
                tcoll = cljs.core.seq(o);
                for (o = this;;) {
                  var temp__5733__auto__ = cljs.core.first(tcoll);
                  if (cljs.core.truth_(temp__5733__auto__)) {
                    tcoll = cljs.core.next(tcoll), o = cljs.core._assoc_BANG_(o, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(temp__5733__auto__) : cljs.core.key.call(null, temp__5733__auto__), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(temp__5733__auto__) : cljs.core.val.call(null, temp__5733__auto__));
                  } else {
                    return o;
                  }
                }
              } else {
                throw Error("conj! after persistent!");
              }
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                return this.editable_QMARK_ = !1, new cljs.core.PersistentArrayMap(null, cljs.core.quot(this.len, 2), this.arr, null);
              }
              throw Error("persistent! called twice");
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                tcoll = cljs.core.array_map_index_of(this, key);
                if (-1 === tcoll) {
                  return this.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD ? (this.len += 2, this.arr.push(key), this.arr.push(val), this) : cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(this.len, this.arr) : cljs.core.array__GT_transient_hash_map.call(null, this.len, this.arr), key, val);
                }
                val !== this.arr[tcoll + 1] && (this.arr[tcoll + 1] = val);
                return this;
              }
              throw Error("assoc! after persistent!");
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
              if (cljs.core.truth_(this.editable_QMARK_)) {
                return tcoll = cljs.core.array_map_index_of(this, key), 0 <= tcoll && (this.arr[tcoll] = this.arr[this.len - 2], this.arr[tcoll + 1] = this.arr[this.len - 1], tcoll = this.arr, tcoll.pop(), tcoll.pop(), this.len -= 2), this;
              }
              throw Error("dissoc! after persistent!");
            };
            cljs.core.TransientArrayMap.prototype.call = function() {
              var G__8361 = null;
              G__8361 = function(self__, key, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, key, null);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8361.cljs$core$IFn$_invoke$arity$2 = function(self__, key) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, key, null);
              };
              G__8361.cljs$core$IFn$_invoke$arity$3 = function(self__, key, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
              };
              return G__8361;
            }();
            cljs.core.TransientArrayMap.prototype.apply = function(self__, args6839) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6839)));
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(key) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, key, null);
            };
            cljs.core.TransientArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(key, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
            };
            cljs.core.TransientArrayMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$editable_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$len, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$arr], null);
            };
            cljs.core.TransientArrayMap.cljs$lang$type = !0;
            cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
            cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TransientArrayMap");
            };
            cljs.core.__GT_TransientArrayMap = function(editable_QMARK_, len, arr) {
              return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
            };
            cljs.core.array__GT_transient_hash_map = function(len, arr) {
              for (var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY), i = 0;;) {
                if (i < len) {
                  out = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]), i += 2;
                } else {
                  return out;
                }
              }
            };
            cljs.core.Box = function(val) {
              this.val = val;
            };
            cljs.core.Box.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$val, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Box.cljs$lang$type = !0;
            cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
            cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Box");
            };
            cljs.core.__GT_Box = function(val) {
              return new cljs.core.Box(val);
            };
            cljs.core.key_test = function(key, other) {
              return key === other ? !0 : cljs.core.keyword_identical_QMARK_(key, other) ? !0 : cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
            };
            cljs.core.mask = function(hash, shift) {
              return hash >>> shift & 31;
            };
            cljs.core.clone_and_set = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 5:
                  return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
              arr = cljs.core.aclone(arr);
              arr[i] = a;
              return arr;
            };
            cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
              arr = cljs.core.aclone(arr);
              arr[i] = a;
              arr[j] = b;
              return arr;
            };
            cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
            cljs.core.remove_pair = function(arr, i) {
              var new_arr = Array(arr.length - 2);
              cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
              cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
              return new_arr;
            };
            cljs.core.bitmap_indexed_node_index = function(bitmap, bit) {
              return cljs.core.bit_count(bitmap & bit - 1);
            };
            cljs.core.bitpos = function(hash, shift) {
              return 1 << (hash >>> shift & 31);
            };
            cljs.core.edit_and_set = function(var_args) {
              switch(arguments.length) {
                case 4:
                  return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
                case 6:
                  return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
              inode = inode.ensure_editable(edit);
              inode.arr[i] = a;
              return inode;
            };
            cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
              inode = inode.ensure_editable(edit);
              inode.arr[i] = a;
              inode.arr[j] = b;
              return inode;
            };
            cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
            cljs.core.inode_kv_reduce = function(arr, f, init) {
              for (var len = arr.length, i = 0, init__$1 = init;;) {
                if (i < len) {
                  init = arr[i];
                  if (null != init) {
                    var G__6849 = arr[i + 1];
                    init = f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init__$1, init, G__6849) : f.call(null, init__$1, init, G__6849);
                  } else {
                    init = arr[i + 1], init = null != init ? init.kv_reduce(f, init__$1) : init__$1;
                  }
                  if (cljs.core.reduced_QMARK_(init)) {
                    return init;
                  }
                  i += 2;
                  init__$1 = init;
                } else {
                  return init__$1;
                }
              }
            };
            cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
              this.arr = arr;
              this.i = i;
              this.next_entry = next_entry;
              this.next_iter = next_iter;
            };
            cljs.core.NodeIterator.prototype.advance = function() {
              for (var len = this.arr.length;;) {
                if (this.i < len) {
                  var key = this.arr[this.i], node_or_val = this.arr[this.i + 1];
                  null != key ? key = this.next_entry = new cljs.core.MapEntry(key, node_or_val, null) : null != node_or_val ? (key = cljs.core._iterator(node_or_val), key = key.hasNext() ? this.next_iter = key : !1) : key = !1;
                  this.i += 2;
                  if (key) {
                    return !0;
                  }
                } else {
                  return !1;
                }
              }
            };
            cljs.core.NodeIterator.prototype.hasNext = function() {
              var or__4131__auto__ = null != this.next_entry;
              return or__4131__auto__ ? or__4131__auto__ : (or__4131__auto__ = null != this.next_iter) ? or__4131__auto__ : this.advance();
            };
            cljs.core.NodeIterator.prototype.next = function() {
              if (null != this.next_entry) {
                var ret = this.next_entry;
                this.next_entry = null;
                return ret;
              }
              if (null != this.next_iter) {
                return ret = this.next_iter.next(), this.next_iter.hasNext() || (this.next_iter = null), ret;
              }
              if (this.advance()) {
                return this.next();
              }
              throw Error("No such element");
            };
            cljs.core.NodeIterator.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.NodeIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$next_DASH_entry, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$next_DASH_iter, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], 
              null);
            };
            cljs.core.NodeIterator.cljs$lang$type = !0;
            cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
            cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/NodeIterator");
            };
            cljs.core.__GT_NodeIterator = function(arr, i, next_entry, next_iter) {
              return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
            };
            cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
              this.edit = edit;
              this.bitmap = bitmap;
              this.arr = arr;
              this.cljs$lang$protocol_mask$partition1$ = 131072;
              this.cljs$lang$protocol_mask$partition0$ = 0;
            };
            cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
              if (e === this.edit) {
                return this;
              }
              var n = cljs.core.bit_count(this.bitmap), new_arr = Array(0 > n ? 4 : 2 * (n + 1));
              cljs.core.array_copy(this.arr, 0, new_arr, 0, 2 * n);
              return new cljs.core.BitmapIndexedNode(e, this.bitmap, new_arr);
            };
            cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
              var bit = 1 << (hash >>> shift & 31);
              if (0 === (this.bitmap & bit)) {
                return this;
              }
              var idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit), key_or_nil = this.arr[2 * idx], val_or_node = this.arr[2 * idx + 1];
              return null == key_or_nil ? (shift = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_), shift === val_or_node ? this : null != shift ? cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, 2 * idx + 1, shift) : this.bitmap === bit ? null : this.edit_and_remove_pair(edit__$1, bit, idx)) : cljs.core.key_test(key, key_or_nil) ? (removed_leaf_QMARK_.val = !0, this.edit_and_remove_pair(edit__$1, bit, idx)) : this;
            };
            cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
              if (this.bitmap === bit) {
                return null;
              }
              e = this.ensure_editable(e);
              var earr = e.arr, len = earr.length;
              e.bitmap ^= bit;
              cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
              earr[len - 2] = null;
              earr[len - 1] = null;
              return e;
            };
            cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
              return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(this.arr) : cljs.core.create_inode_seq.call(null, this.arr);
            };
            cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
              return cljs.core.inode_kv_reduce(this.arr, f, init);
            };
            cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
              var bit = 1 << (hash >>> shift & 31);
              if (0 === (this.bitmap & bit)) {
                return not_found;
              }
              var idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit);
              bit = this.arr[2 * idx];
              idx = this.arr[2 * idx + 1];
              return null == bit ? idx.inode_lookup(shift + 5, hash, key, not_found) : cljs.core.key_test(key, bit) ? idx : not_found;
            };
            cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
              var bit = 1 << (hash >>> shift & 31), idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit);
              if (0 === (this.bitmap & bit)) {
                var n = cljs.core.bit_count(this.bitmap);
                if (2 * n < this.arr.length) {
                  var editable = this.ensure_editable(edit__$1), earr = editable.arr;
                  added_leaf_QMARK_.val = !0;
                  cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
                  earr[2 * idx] = key;
                  earr[2 * idx + 1] = val;
                  editable.bitmap |= bit;
                  return editable;
                }
                if (16 <= n) {
                  bit = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                  bit[hash >>> shift & 31] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
                  for (editable = idx = 0;;) {
                    if (32 > idx) {
                      0 === (this.bitmap >>> idx & 1) ? idx += 1 : (bit[idx] = null != this.arr[editable] ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(this.arr[editable]), this.arr[editable], this.arr[editable + 1], added_leaf_QMARK_) : this.arr[editable + 1], editable += 2, idx += 1);
                    } else {
                      break;
                    }
                  }
                  return new cljs.core.ArrayNode(edit__$1, n + 1, bit);
                }
                earr = Array(2 * (n + 4));
                cljs.core.array_copy(this.arr, 0, earr, 0, 2 * idx);
                earr[2 * idx] = key;
                earr[2 * idx + 1] = val;
                cljs.core.array_copy(this.arr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
                added_leaf_QMARK_.val = !0;
                editable = this.ensure_editable(edit__$1);
                editable.arr = earr;
                editable.bitmap |= bit;
                return editable;
              }
              var key_or_nil = this.arr[2 * idx], val_or_node = this.arr[2 * idx + 1];
              if (null == key_or_nil) {
                return n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_), n === val_or_node ? this : cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, 2 * idx + 1, n);
              }
              if (cljs.core.key_test(key, key_or_nil)) {
                return val === val_or_node ? this : cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, 2 * idx + 1, val);
              }
              added_leaf_QMARK_.val = !0;
              return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(this, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
                var G__6851 = shift + 5;
                return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(edit__$1, G__6851, key_or_nil, val_or_node, hash, key, val) : cljs.core.create_node.call(null, edit__$1, G__6851, key_or_nil, val_or_node, hash, key, val);
              }());
            };
            cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
              var bit = 1 << (hash >>> shift & 31), idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit);
              if (0 === (this.bitmap & bit)) {
                var n = cljs.core.bit_count(this.bitmap);
                if (16 <= n) {
                  bit = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                  bit[hash >>> shift & 31] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
                  for (var j_8375 = idx = 0;;) {
                    if (32 > idx) {
                      0 === (this.bitmap >>> idx & 1) ? idx += 1 : (bit[idx] = null != this.arr[j_8375] ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(this.arr[j_8375]), this.arr[j_8375], this.arr[j_8375 + 1], added_leaf_QMARK_) : this.arr[j_8375 + 1], j_8375 += 2, idx += 1);
                    } else {
                      break;
                    }
                  }
                  return new cljs.core.ArrayNode(null, n + 1, bit);
                }
                j_8375 = Array(2 * (n + 1));
                cljs.core.array_copy(this.arr, 0, j_8375, 0, 2 * idx);
                j_8375[2 * idx] = key;
                j_8375[2 * idx + 1] = val;
                cljs.core.array_copy(this.arr, 2 * idx, j_8375, 2 * (idx + 1), 2 * (n - idx));
                added_leaf_QMARK_.val = !0;
                return new cljs.core.BitmapIndexedNode(null, this.bitmap | bit, j_8375);
              }
              var key_or_nil = this.arr[2 * idx], val_or_node = this.arr[2 * idx + 1];
              if (null == key_or_nil) {
                return n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_), n === val_or_node ? this : new cljs.core.BitmapIndexedNode(null, this.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, 2 * idx + 1, n));
              }
              if (cljs.core.key_test(key, key_or_nil)) {
                return val === val_or_node ? this : new cljs.core.BitmapIndexedNode(null, this.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, 2 * idx + 1, val));
              }
              added_leaf_QMARK_.val = !0;
              return new cljs.core.BitmapIndexedNode(null, this.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(this.arr, 2 * idx, null, 2 * idx + 1, function() {
                var G__6857 = shift + 5;
                return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__6857, key_or_nil, val_or_node, hash, key, val) : cljs.core.create_node.call(null, G__6857, key_or_nil, val_or_node, hash, key, val);
              }()));
            };
            cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
              var bit = 1 << (hash >>> shift & 31);
              if (0 === (this.bitmap & bit)) {
                return not_found;
              }
              var idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit);
              bit = this.arr[2 * idx];
              idx = this.arr[2 * idx + 1];
              return null == bit ? idx.inode_find(shift + 5, hash, key, not_found) : cljs.core.key_test(key, bit) ? new cljs.core.MapEntry(bit, idx, null) : not_found;
            };
            cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
              var bit = 1 << (hash >>> shift & 31);
              if (0 === (this.bitmap & bit)) {
                return this;
              }
              var idx = cljs.core.bitmap_indexed_node_index(this.bitmap, bit), key_or_nil = this.arr[2 * idx], val_or_node = this.arr[2 * idx + 1];
              return null == key_or_nil ? (shift = val_or_node.inode_without(shift + 5, hash, key), shift === val_or_node ? this : null != shift ? new cljs.core.BitmapIndexedNode(null, this.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, 2 * idx + 1, shift)) : this.bitmap === bit ? null : new cljs.core.BitmapIndexedNode(null, this.bitmap ^ bit, cljs.core.remove_pair(this.arr, idx))) : cljs.core.key_test(key, key_or_nil) ? new cljs.core.BitmapIndexedNode(null, this.bitmap ^ bit, cljs.core.remove_pair(this.arr, 
              idx)) : this;
            };
            cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.NodeIterator(this.arr, 0, null, null);
            };
            cljs.core.BitmapIndexedNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$edit, cljs.core.with_meta(cljs$cst$symbol$bitmap, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.BitmapIndexedNode.cljs$lang$type = !0;
            cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
            cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/BitmapIndexedNode");
            };
            cljs.core.__GT_BitmapIndexedNode = function(edit, bitmap, arr) {
              return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
            };
            cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
            cljs.core.pack_array_node = function(array_node, edit, idx) {
              var arr = array_node.arr, len = arr.length;
              array_node = Array(2 * (array_node.cnt - 1));
              for (var i = 0, j = 1, bitmap = 0;;) {
                if (i < len) {
                  i !== idx && null != arr[i] ? (array_node[j] = arr[i], j += 2, bitmap |= 1 << i, i += 1) : i += 1;
                } else {
                  return new cljs.core.BitmapIndexedNode(edit, bitmap, array_node);
                }
              }
            };
            cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
              this.arr = arr;
              this.i = i;
              this.next_iter = next_iter;
            };
            cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
              for (var len = this.arr.length;;) {
                if (null != this.next_iter && this.next_iter.hasNext()) {
                  return !0;
                }
                if (this.i < len) {
                  var node = this.arr[this.i];
                  this.i += 1;
                  null != node && (this.next_iter = cljs.core._iterator(node));
                } else {
                  return !1;
                }
              }
            };
            cljs.core.ArrayNodeIterator.prototype.next = function() {
              if (this.hasNext()) {
                return this.next_iter.next();
              }
              throw Error("No such element");
            };
            cljs.core.ArrayNodeIterator.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.ArrayNodeIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$arr, cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$next_DASH_iter, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ArrayNodeIterator.cljs$lang$type = !0;
            cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
            cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayNodeIterator");
            };
            cljs.core.__GT_ArrayNodeIterator = function(arr, i, next_iter) {
              return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
            };
            cljs.core.ArrayNode = function(edit, cnt, arr) {
              this.edit = edit;
              this.cnt = cnt;
              this.arr = arr;
              this.cljs$lang$protocol_mask$partition1$ = 131072;
              this.cljs$lang$protocol_mask$partition0$ = 0;
            };
            cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
              return e === this.edit ? this : new cljs.core.ArrayNode(e, this.cnt, cljs.core.aclone(this.arr));
            };
            cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
              var idx = hash >>> shift & 31, node = this.arr[idx];
              if (null == node) {
                return this;
              }
              shift = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
              if (shift === node) {
                return this;
              }
              if (null == shift) {
                if (8 >= this.cnt) {
                  return cljs.core.pack_array_node(this, edit__$1, idx);
                }
                edit__$1 = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, idx, shift);
                --edit__$1.cnt;
                return edit__$1;
              }
              return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, idx, shift);
            };
            cljs.core.ArrayNode.prototype.inode_seq = function() {
              return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(this.arr) : cljs.core.create_array_node_seq.call(null, this.arr);
            };
            cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
              for (var len = this.arr.length, i = 0;;) {
                if (i < len) {
                  var node = this.arr[i];
                  if (null != node) {
                    init = node.kv_reduce(f, init);
                    if (cljs.core.reduced_QMARK_(init)) {
                      return init;
                    }
                    i += 1;
                  } else {
                    i += 1;
                  }
                } else {
                  return init;
                }
              }
            };
            cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
              var node = this.arr[hash >>> shift & 31];
              return null != node ? node.inode_lookup(shift + 5, hash, key, not_found) : not_found;
            };
            cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
              var idx = hash >>> shift & 31, node = this.arr[idx];
              if (null == node) {
                return edit__$1 = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_)), edit__$1.cnt += 1, edit__$1;
              }
              shift = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
              return shift === node ? this : cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, idx, shift);
            };
            cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
              var idx = hash >>> shift & 31, node = this.arr[idx];
              if (null == node) {
                return new cljs.core.ArrayNode(null, this.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
              }
              shift = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
              return shift === node ? this : new cljs.core.ArrayNode(null, this.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, idx, shift));
            };
            cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
              var node = this.arr[hash >>> shift & 31];
              return null != node ? node.inode_find(shift + 5, hash, key, not_found) : not_found;
            };
            cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
              var idx = hash >>> shift & 31, node = this.arr[idx];
              return null != node ? (shift = node.inode_without(shift + 5, hash, key), shift === node ? this : null == shift ? 8 >= this.cnt ? cljs.core.pack_array_node(this, null, idx) : new cljs.core.ArrayNode(null, this.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, idx, shift)) : new cljs.core.ArrayNode(null, this.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, idx, shift))) : this;
            };
            cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.ArrayNodeIterator(this.arr, 0, null);
            };
            cljs.core.ArrayNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$edit, cljs.core.with_meta(cljs$cst$symbol$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ArrayNode.cljs$lang$type = !0;
            cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
            cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayNode");
            };
            cljs.core.__GT_ArrayNode = function(edit, cnt, arr) {
              return new cljs.core.ArrayNode(edit, cnt, arr);
            };
            cljs.core.hash_collision_node_find_index = function(arr, cnt, key) {
              cnt *= 2;
              for (var i = 0;;) {
                if (i < cnt) {
                  if (cljs.core.key_test(key, arr[i])) {
                    return i;
                  }
                  i += 2;
                } else {
                  return -1;
                }
              }
            };
            cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
              this.edit = edit;
              this.collision_hash = collision_hash;
              this.cnt = cnt;
              this.arr = arr;
              this.cljs$lang$protocol_mask$partition1$ = 131072;
              this.cljs$lang$protocol_mask$partition0$ = 0;
            };
            cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
              if (e === this.edit) {
                return this;
              }
              var new_arr = Array(2 * (this.cnt + 1));
              cljs.core.array_copy(this.arr, 0, new_arr, 0, 2 * this.cnt);
              return new cljs.core.HashCollisionNode(e, this.collision_hash, this.cnt, new_arr);
            };
            cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
              shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key);
              if (-1 === shift) {
                return this;
              }
              removed_leaf_QMARK_.val = !0;
              if (1 === this.cnt) {
                return null;
              }
              edit__$1 = this.ensure_editable(edit__$1);
              removed_leaf_QMARK_ = edit__$1.arr;
              removed_leaf_QMARK_[shift] = removed_leaf_QMARK_[2 * this.cnt - 2];
              removed_leaf_QMARK_[shift + 1] = removed_leaf_QMARK_[2 * this.cnt - 1];
              removed_leaf_QMARK_[2 * this.cnt - 1] = null;
              removed_leaf_QMARK_[2 * this.cnt - 2] = null;
              --edit__$1.cnt;
              return edit__$1;
            };
            cljs.core.HashCollisionNode.prototype.inode_seq = function() {
              return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(this.arr) : cljs.core.create_inode_seq.call(null, this.arr);
            };
            cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
              return cljs.core.inode_kv_reduce(this.arr, f, init);
            };
            cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
              shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key);
              return 0 > shift ? not_found : cljs.core.key_test(key, this.arr[shift]) ? this.arr[shift + 1] : not_found;
            };
            cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
              if (hash === this.collision_hash) {
                shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key);
                if (-1 === shift) {
                  if (this.arr.length > 2 * this.cnt) {
                    return edit__$1 = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(this, edit__$1, 2 * this.cnt, key, 2 * this.cnt + 1, val), added_leaf_QMARK_.val = !0, edit__$1.cnt += 1, edit__$1;
                  }
                  shift = this.arr.length;
                  hash = Array(shift + 2);
                  cljs.core.array_copy(this.arr, 0, hash, 0, shift);
                  hash[shift] = key;
                  hash[shift + 1] = val;
                  added_leaf_QMARK_.val = !0;
                  return this.ensure_editable_array(edit__$1, this.cnt + 1, hash);
                }
                return this.arr[shift + 1] === val ? this : cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(this, edit__$1, shift + 1, val);
              }
              return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (this.collision_hash >>> shift & 31), [null, this, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
            };
            cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
              return hash === this.collision_hash ? (shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key), -1 === shift ? (shift = 2 * this.cnt, hash = Array(shift + 2), cljs.core.array_copy(this.arr, 0, hash, 0, shift), hash[shift] = key, hash[shift + 1] = val, added_leaf_QMARK_.val = !0, new cljs.core.HashCollisionNode(null, this.collision_hash, this.cnt + 1, hash)) : cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this.arr[shift + 1], val) ? this : new cljs.core.HashCollisionNode(null, this.collision_hash, 
              this.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(this.arr, shift + 1, val))) : (new cljs.core.BitmapIndexedNode(null, 1 << (this.collision_hash >>> shift & 31), [null, this])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
            };
            cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
              return e === this.edit ? (this.arr = array, this.cnt = count, this) : new cljs.core.HashCollisionNode(this.edit, this.collision_hash, count, array);
            };
            cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
              shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key);
              return 0 > shift ? not_found : cljs.core.key_test(key, this.arr[shift]) ? new cljs.core.MapEntry(this.arr[shift], this.arr[shift + 1], null) : not_found;
            };
            cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
              shift = cljs.core.hash_collision_node_find_index(this.arr, this.cnt, key);
              return -1 === shift ? this : 1 === this.cnt ? null : new cljs.core.HashCollisionNode(null, this.collision_hash, this.cnt - 1, cljs.core.remove_pair(this.arr, cljs.core.quot(shift, 2)));
            };
            cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.NodeIterator(this.arr, 0, null, null);
            };
            cljs.core.HashCollisionNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$edit, cljs.core.with_meta(cljs$cst$symbol$collision_DASH_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.HashCollisionNode.cljs$lang$type = !0;
            cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
            cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/HashCollisionNode");
            };
            cljs.core.__GT_HashCollisionNode = function(edit, collision_hash, cnt, arr) {
              return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
            };
            cljs.core.create_node = function(var_args) {
              switch(arguments.length) {
                case 6:
                  return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                case 7:
                  return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
              var key1hash = cljs.core.hash(key1);
              if (key1hash === key2hash) {
                return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
              }
              var added_leaf_QMARK_ = new cljs.core.Box(!1);
              return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
            };
            cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
              var key1hash = cljs.core.hash(key1);
              if (key1hash === key2hash) {
                return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
              }
              var added_leaf_QMARK_ = new cljs.core.Box(!1);
              return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
            };
            cljs.core.create_node.cljs$lang$maxFixedArity = 7;
            cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
              this.meta = meta;
              this.nodes = nodes;
              this.i = i;
              this.s = s;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.NodeSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.NodeSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.NodeSeq.prototype.indexOf = function() {
              var G__8392 = null, G__8392__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8392__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8392 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8392__1.call(this, x);
                  case 2:
                    return G__8392__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8392.cljs$core$IFn$_invoke$arity$1 = G__8392__1;
              G__8392.cljs$core$IFn$_invoke$arity$2 = G__8392__2;
              return G__8392;
            }();
            cljs.core.NodeSeq.prototype.lastIndexOf = function() {
              var G__8393 = null, G__8393__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8393__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8393 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8393__1.call(this, x);
                  case 2:
                    return G__8393__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8393.cljs$core$IFn$_invoke$arity$1 = G__8393__1;
              G__8393.cljs$core$IFn$_invoke$arity$2 = G__8393__2;
              return G__8393;
            }();
            cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.NodeSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              if (null == this.s) {
                coll = this.nodes;
                var G__6866 = this.i + 2;
                return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(coll, G__6866, null) : cljs.core.create_inode_seq.call(null, coll, G__6866, null);
              }
              coll = this.nodes;
              G__6866 = this.i;
              var G__6870 = cljs.core.next(this.s);
              return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(coll, G__6866, G__6870) : cljs.core.create_inode_seq.call(null, coll, G__6866, G__6870);
            };
            cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return null == this.s ? new cljs.core.MapEntry(this.nodes[this.i], this.nodes[this.i + 1], null) : cljs.core.first(this.s);
            };
            cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              var self__ = this;
              coll = null == self__.s ? function() {
                var G__6871 = self__.nodes, G__6872 = self__.i + 2;
                return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__6871, G__6872, null) : cljs.core.create_inode_seq.call(null, G__6871, G__6872, null);
              }() : function() {
                var G__6874 = self__.nodes, G__6875 = self__.i, G__6876 = cljs.core.next(self__.s);
                return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__6874, G__6875, G__6876) : cljs.core.create_inode_seq.call(null, G__6874, G__6875, G__6876);
              }();
              return null != coll ? coll : cljs.core.List.EMPTY;
            };
            cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
              return this;
            };
            cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.NodeSeq(new_meta, this.nodes, this.i, this.s, this.__hash);
            };
            cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.NodeSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$nodes, cljs$cst$symbol$i, cljs$cst$symbol$s, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.NodeSeq.cljs$lang$type = !0;
            cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
            cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/NodeSeq");
            };
            cljs.core.__GT_NodeSeq = function(meta, nodes, i, s, __hash) {
              return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
            };
            var G__6877_8394 = cljs.core.NodeSeq.prototype, G__6878_8395 = cljs.core.ITER_SYMBOL, G__6879_8396 = function(G__6877_8394, G__6878_8395) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6877_8394, G__6878_8395, G__6879_8396);
            cljs.core.create_inode_seq = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 3:
                  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
              return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
            };
            cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
              if (null == s) {
                for (s = nodes.length;;) {
                  if (i < s) {
                    if (null != nodes[i]) {
                      return new cljs.core.NodeSeq(null, nodes, i, null, null);
                    }
                    var temp__5733__auto__ = nodes[i + 1];
                    if (cljs.core.truth_(temp__5733__auto__) && (temp__5733__auto__ = temp__5733__auto__.inode_seq(), cljs.core.truth_(temp__5733__auto__))) {
                      return new cljs.core.NodeSeq(null, nodes, i + 2, temp__5733__auto__, null);
                    }
                    i += 2;
                  } else {
                    return null;
                  }
                }
              } else {
                return new cljs.core.NodeSeq(null, nodes, i, s, null);
              }
            };
            cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
            cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
              this.meta = meta;
              this.nodes = nodes;
              this.i = i;
              this.s = s;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.ArrayNodeSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
              var G__8400 = null, G__8400__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8400__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8400 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8400__1.call(this, x);
                  case 2:
                    return G__8400__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8400.cljs$core$IFn$_invoke$arity$1 = G__8400__1;
              G__8400.cljs$core$IFn$_invoke$arity$2 = G__8400__2;
              return G__8400;
            }();
            cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
              var G__8401 = null, G__8401__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8401__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8401 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8401__1.call(this, x);
                  case 2:
                    return G__8401__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8401.cljs$core$IFn$_invoke$arity$1 = G__8401__1;
              G__8401.cljs$core$IFn$_invoke$arity$2 = G__8401__2;
              return G__8401;
            }();
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              coll = this.nodes;
              var G__6883 = this.i, G__6884 = cljs.core.next(this.s);
              return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(coll, G__6883, G__6884) : cljs.core.create_array_node_seq.call(null, coll, G__6883, G__6884);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return cljs.core.first(this.s);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              coll = this.nodes;
              var G__6886 = this.i, G__6887 = cljs.core.next(this.s);
              coll = cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(coll, G__6886, G__6887) : cljs.core.create_array_node_seq.call(null, coll, G__6886, G__6887);
              return null != coll ? coll : cljs.core.List.EMPTY;
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
              return this;
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.ArrayNodeSeq(new_meta, this.nodes, this.i, this.s, this.__hash);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.ArrayNodeSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$nodes, cljs$cst$symbol$i, cljs$cst$symbol$s, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ArrayNodeSeq.cljs$lang$type = !0;
            cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
            cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayNodeSeq");
            };
            cljs.core.__GT_ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
              return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
            };
            var G__6888_8402 = cljs.core.ArrayNodeSeq.prototype, G__6889_8403 = cljs.core.ITER_SYMBOL, G__6890_8404 = function(G__6888_8402, G__6889_8403) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6888_8402, G__6889_8403, G__6890_8404);
            cljs.core.create_array_node_seq = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 3:
                  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
              return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
            };
            cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
              if (null == s) {
                for (s = nodes.length;;) {
                  if (i < s) {
                    var temp__5733__auto__ = nodes[i];
                    if (cljs.core.truth_(temp__5733__auto__) && (temp__5733__auto__ = temp__5733__auto__.inode_seq(), cljs.core.truth_(temp__5733__auto__))) {
                      return new cljs.core.ArrayNodeSeq(null, nodes, i + 1, temp__5733__auto__, null);
                    }
                    i += 1;
                  } else {
                    return null;
                  }
                }
              } else {
                return new cljs.core.ArrayNodeSeq(null, nodes, i, s, null);
              }
            };
            cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 3;
            cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
              this.nil_val = nil_val;
              this.root_iter = root_iter;
              this.seen = seen;
            };
            cljs.core.HashMapIter.prototype.hasNext = function() {
              return !this.seen || this.root_iter.hasNext();
            };
            cljs.core.HashMapIter.prototype.next = function() {
              if (this.seen) {
                return this.root_iter.next();
              }
              this.seen = !0;
              return new cljs.core.MapEntry(null, this.nil_val, null);
            };
            cljs.core.HashMapIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.HashMapIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$nil_DASH_val, cljs$cst$symbol$root_DASH_iter, cljs.core.with_meta(cljs$cst$symbol$seen, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.HashMapIter.cljs$lang$type = !0;
            cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
            cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/HashMapIter");
            };
            cljs.core.__GT_HashMapIter = function(nil_val, root_iter, seen) {
              return new cljs.core.HashMapIter(nil_val, root_iter, seen);
            };
            cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
              this.meta = meta;
              this.cnt = cnt;
              this.root = root;
              this.has_nil_QMARK_ = has_nil_QMARK_;
              this.nil_val = nil_val;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 16123663;
              this.cljs$lang$protocol_mask$partition1$ = 139268;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentHashMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
              return null == k ? this.has_nil_QMARK_ ? new cljs.core.MapEntry(null, this.nil_val, null) : null : null == this.root ? null : this.root.inode_find(0, cljs.core.hash(k), k, null);
            };
            cljs.core.PersistentHashMap.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentHashMap.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentHashMap.prototype.keys = function() {
              return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.keys.call(null, this));
            };
            cljs.core.PersistentHashMap.prototype.entries = function() {
              return cljs.core.es6_entries_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentHashMap.prototype.values = function() {
              return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.vals.call(null, this));
            };
            cljs.core.PersistentHashMap.prototype.has = function(k) {
              return cljs.core.contains_QMARK_(this, k);
            };
            cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentHashMap.prototype.forEach = function(f) {
              for (var seq__6894 = cljs.core.seq(this), chunk__6895 = null, count__6896 = 0, i__6897 = 0;;) {
                if (i__6897 < count__6896) {
                  var vec__6904 = chunk__6895.cljs$core$IIndexed$_nth$arity$2(null, i__6897), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6904, 0, null);
                  vec__6904 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6904, 1, null);
                  f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6904, k) : f.call(null, vec__6904, k);
                  i__6897 += 1;
                } else {
                  if (seq__6894 = cljs.core.seq(seq__6894)) {
                    cljs.core.chunked_seq_QMARK_(seq__6894) ? (chunk__6895 = cljs.core.chunk_first(seq__6894), seq__6894 = cljs.core.chunk_rest(seq__6894), k = chunk__6895, count__6896 = cljs.core.count(chunk__6895), chunk__6895 = k) : (chunk__6895 = cljs.core.first(seq__6894), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6895, 0, null), vec__6904 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6895, 1, null), f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6904, k) : f.call(null, 
                    vec__6904, k), seq__6894 = cljs.core.next(seq__6894), chunk__6895 = null, count__6896 = 0), i__6897 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              return null == k ? this.has_nil_QMARK_ ? this.nil_val : not_found : null == this.root ? not_found : this.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
              coll = this.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, this.nil_val) : f.call(null, init, null, this.nil_val) : init;
              return cljs.core.reduced_QMARK_(coll) ? cljs.core.deref(coll) : null != this.root ? cljs.core.unreduced(this.root.kv_reduce(f, coll)) : coll;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              coll = this.root ? cljs.core._iterator(this.root) : cljs.core.nil_iter();
              return this.has_nil_QMARK_ ? new cljs.core.HashMapIter(this.nil_val, coll, !1) : coll;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentHashMap(this.meta, this.cnt, this.root, this.has_nil_QMARK_, this.nil_val, this.__hash);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.cnt;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_map(this, other);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
              return new cljs.core.TransientHashMap({}, this.root, this.cnt, this.has_nil_QMARK_, this.nil_val);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, this.meta);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
              if (null == k) {
                return this.has_nil_QMARK_ ? new cljs.core.PersistentHashMap(this.meta, this.cnt - 1, this.root, !1, null, null) : this;
              }
              if (null == this.root) {
                return this;
              }
              coll = this.root.inode_without(0, cljs.core.hash(k), k);
              return coll === this.root ? this : new cljs.core.PersistentHashMap(this.meta, this.cnt - 1, coll, this.has_nil_QMARK_, this.nil_val, null);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
              if (null == k) {
                return this.has_nil_QMARK_ && v === this.nil_val ? this : new cljs.core.PersistentHashMap(this.meta, this.has_nil_QMARK_ ? this.cnt : this.cnt + 1, this.root, !0, v, null);
              }
              coll = new cljs.core.Box(!1);
              k = (null == this.root ? cljs.core.BitmapIndexedNode.EMPTY : this.root).inode_assoc(0, cljs.core.hash(k), k, v, coll);
              return k === this.root ? this : new cljs.core.PersistentHashMap(this.meta, coll.val ? this.cnt + 1 : this.cnt, k, this.has_nil_QMARK_, this.nil_val, null);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
              return null == k ? this.has_nil_QMARK_ : null == this.root ? !1 : this.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) !== cljs.core.lookup_sentinel;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return 0 < this.cnt ? (coll = null != this.root ? this.root.inode_seq() : null, this.has_nil_QMARK_ ? cljs.core.cons(new cljs.core.MapEntry(null, this.nil_val, null), coll) : coll) : null;
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentHashMap(new_meta, this.cnt, this.root, this.has_nil_QMARK_, this.nil_val, this.__hash);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
              if (cljs.core.vector_QMARK_(entry)) {
                return this.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
              }
              coll = this;
              for (entry = cljs.core.seq(entry);;) {
                if (null == entry) {
                  return coll;
                }
                var e = cljs.core.first(entry);
                if (cljs.core.vector_QMARK_(e)) {
                  coll = cljs.core._assoc(coll, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1)), entry = cljs.core.next(entry);
                } else {
                  throw Error("conj on a map takes map entries or seqables of map entries");
                }
              }
            };
            cljs.core.PersistentHashMap.prototype.call = function() {
              var G__8422 = null;
              G__8422 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8422.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8422.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8422;
            }();
            cljs.core.PersistentHashMap.prototype.apply = function(self__, args6893) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6893)));
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentHashMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$cnt, cljs$cst$symbol$root, cljs.core.with_meta(cljs$cst$symbol$has_DASH_nil_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$tag, cljs$cst$symbol$boolean], null)), cljs$cst$symbol$nil_DASH_val, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentHashMap.cljs$lang$type = !0;
            cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
            cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentHashMap");
            };
            cljs.core.__GT_PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
              return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
            };
            cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, !1, null, cljs.core.empty_unordered_hash);
            cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
              arr = no_clone ? arr : cljs.core.aclone(arr);
              no_clone = arr.length;
              for (var i = 0, ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);;) {
                if (i < no_clone) {
                  var G__8423 = i + 2;
                  ret = cljs.core._assoc_BANG_(ret, arr[i], arr[i + 1]);
                  i = G__8423;
                } else {
                  return cljs.core._persistent_BANG_(ret);
                }
              }
            };
            cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
              for (var len = ks.length, i = 0, out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);;) {
                if (i < len) {
                  var G__8425 = i + 1;
                  out = cljs.core._assoc_BANG_(out, ks[i], vs[i]);
                  i = G__8425;
                } else {
                  return cljs.core.persistent_BANG_(out);
                }
              }
            };
            cljs.core.PersistentHashMap.createWithCheck = function(arr) {
              for (var len = arr.length, ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY), i_8427 = 0;;) {
                if (i_8427 < len) {
                  cljs.core._assoc_BANG_(ret, arr[i_8427], arr[i_8427 + 1]);
                  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._count(ret), i_8427 / 2 + 1)) {
                    throw Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arr[i_8427])].join(""));
                  }
                  i_8427 += 2;
                } else {
                  break;
                }
              }
              return cljs.core._persistent_BANG_(ret);
            };
            var G__6912_8429 = cljs.core.PersistentHashMap.prototype, G__6913_8430 = cljs.core.ITER_SYMBOL, G__6914_8431 = function(G__6912_8429, G__6913_8430) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6912_8429, G__6913_8430, G__6914_8431);
            cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
              this.edit = edit;
              this.root = root;
              this.count = count;
              this.has_nil_QMARK_ = has_nil_QMARK_;
              this.nil_val = nil_val;
              this.cljs$lang$protocol_mask$partition0$ = 259;
              this.cljs$lang$protocol_mask$partition1$ = 56;
            };
            cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
              if (this.edit) {
                if (cljs.core.map_entry_QMARK_(o)) {
                  return this.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
                }
                if (cljs.core.vector_QMARK_(o)) {
                  return this.assoc_BANG_(o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(0) : o.call(null, 0), o.cljs$core$IFn$_invoke$arity$1 ? o.cljs$core$IFn$_invoke$arity$1(1) : o.call(null, 1));
                }
                o = cljs.core.seq(o);
                for (var tcoll__$1 = this;;) {
                  var temp__5733__auto__ = cljs.core.first(o);
                  if (cljs.core.truth_(temp__5733__auto__)) {
                    o = cljs.core.next(o), tcoll__$1 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(temp__5733__auto__) : cljs.core.key.call(null, temp__5733__auto__), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(temp__5733__auto__) : cljs.core.val.call(null, temp__5733__auto__));
                  } else {
                    return tcoll__$1;
                  }
                }
              } else {
                throw Error("conj! after persistent");
              }
            };
            cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
              if (this.edit) {
                if (null == k) {
                  this.nil_val !== v && (this.nil_val = v), this.has_nil_QMARK_ || (this.count += 1, this.has_nil_QMARK_ = !0);
                } else {
                  var added_leaf_QMARK_ = new cljs.core.Box(!1);
                  k = (null == this.root ? cljs.core.BitmapIndexedNode.EMPTY : this.root).inode_assoc_BANG_(this.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
                  k !== this.root && (this.root = k);
                  added_leaf_QMARK_.val && (this.count += 1);
                }
                return this;
              }
              throw Error("assoc! after persistent!");
            };
            cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
              if (this.edit) {
                if (null == k) {
                  this.has_nil_QMARK_ && (this.has_nil_QMARK_ = !1, this.nil_val = null, --this.count);
                } else {
                  if (null != this.root) {
                    var removed_leaf_QMARK_ = new cljs.core.Box(!1);
                    k = this.root.inode_without_BANG_(this.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
                    k !== this.root && (this.root = k);
                    removed_leaf_QMARK_.val && --this.count;
                  }
                }
                return this;
              }
              throw Error("dissoc! after persistent!");
            };
            cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
              if (this.edit) {
                return this.edit = null, new cljs.core.PersistentHashMap(null, this.count, this.root, this.has_nil_QMARK_, this.nil_val, null);
              }
              throw Error("persistent! called twice");
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              if (this.edit) {
                return this.count;
              }
              throw Error("count after persistent!");
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
              return null == k ? this.has_nil_QMARK_ ? this.nil_val : null : null == this.root ? null : this.root.inode_lookup(0, cljs.core.hash(k), k);
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
              return null == k ? this.has_nil_QMARK_ ? this.nil_val : not_found : null == this.root ? not_found : this.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
              return this.conj_BANG_(val);
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
              return this.persistent_BANG_();
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
              return this.assoc_BANG_(key, val);
            };
            cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
              return this.without_BANG_(key);
            };
            cljs.core.TransientHashMap.prototype.call = function() {
              var G__8434 = null;
              G__8434 = function(self__, key, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, key);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8434.cljs$core$IFn$_invoke$arity$2 = function(self__, key) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, key);
              };
              G__8434.cljs$core$IFn$_invoke$arity$3 = function(self__, key, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
              };
              return G__8434;
            }();
            cljs.core.TransientHashMap.prototype.apply = function(self__, args6915) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6915)));
            };
            cljs.core.TransientHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(key) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, key);
            };
            cljs.core.TransientHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(key, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
            };
            cljs.core.TransientHashMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$edit, new cljs.core.PersistentArrayMap(null, 2, [cljs$cst$keyword$tag, cljs$cst$symbol$boolean, cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$root, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$count, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], 
              null)), cljs.core.with_meta(cljs$cst$symbol$has_DASH_nil_QMARK_, new cljs.core.PersistentArrayMap(null, 2, [cljs$cst$keyword$tag, cljs$cst$symbol$boolean, cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$nil_DASH_val, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.TransientHashMap.cljs$lang$type = !0;
            cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
            cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TransientHashMap");
            };
            cljs.core.__GT_TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
              return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
            };
            cljs.core.tree_map_seq_push = function(node, stack, ascending_QMARK_) {
              for (var stack__$1 = stack;;) {
                if (null != node) {
                  stack = ascending_QMARK_ ? node.left : node.right, stack__$1 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, node), node = stack;
                } else {
                  return stack__$1;
                }
              }
            };
            cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
              this.meta = meta;
              this.stack = stack;
              this.ascending_QMARK_ = ascending_QMARK_;
              this.cnt = cnt;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32374990;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
              var G__8437 = null, G__8437__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8437__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8437 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8437__1.call(this, x);
                  case 2:
                    return G__8437__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8437.cljs$core$IFn$_invoke$arity$1 = G__8437__1;
              G__8437.cljs$core$IFn$_invoke$arity$2 = G__8437__2;
              return G__8437;
            }();
            cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
              var G__8438 = null, G__8438__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8438__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8438 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8438__1.call(this, x);
                  case 2:
                    return G__8438__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8438.cljs$core$IFn$_invoke$arity$1 = G__8438__1;
              G__8438.cljs$core$IFn$_invoke$arity$2 = G__8438__2;
              return G__8438;
            }();
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
              this$ = cljs.core.first(this.stack);
              this$ = cljs.core.tree_map_seq_push(this.ascending_QMARK_ ? this$.right : this$.left, cljs.core.next(this.stack), this.ascending_QMARK_);
              return null == this$ ? null : new cljs.core.PersistentTreeMapSeq(null, this$, this.ascending_QMARK_, this.cnt - 1, null);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return 0 > this.cnt ? cljs.core.count(cljs.core.next(this)) + 1 : this.cnt;
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
              return cljs.core.peek(this.stack);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
              this$ = cljs.core.first(this.stack);
              this$ = cljs.core.tree_map_seq_push(this.ascending_QMARK_ ? this$.right : this$.left, cljs.core.next(this.stack), this.ascending_QMARK_);
              return null != this$ ? new cljs.core.PersistentTreeMapSeq(null, this$, this.ascending_QMARK_, this.cnt - 1, null) : cljs.core.List.EMPTY;
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
              return this;
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentTreeMapSeq(new_meta, this.stack, this.ascending_QMARK_, this.cnt, this.__hash);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.PersistentTreeMapSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$stack, cljs.core.with_meta(cljs$cst$symbol$ascending_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$tag, cljs$cst$symbol$boolean], null)), cljs$cst$symbol$cnt, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentTreeMapSeq.cljs$lang$type = !0;
            cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
            cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentTreeMapSeq");
            };
            cljs.core.__GT_PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
              return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
            };
            var G__6916_8439 = cljs.core.PersistentTreeMapSeq.prototype, G__6917_8440 = cljs.core.ITER_SYMBOL, G__6918_8441 = function(G__6916_8439, G__6917_8440) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6916_8439, G__6917_8440, G__6918_8441);
            cljs.core.create_tree_map_seq = function(tree, ascending_QMARK_, cnt) {
              return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
            };
            cljs.core.balance_left = function(key, val, ins, right) {
              return ins instanceof cljs.core.RedNode ? ins.left instanceof cljs.core.RedNode ? new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null) : ins.right instanceof cljs.core.RedNode ? new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null) : new cljs.core.BlackNode(key, val, ins, right, null) : 
              new cljs.core.BlackNode(key, val, ins, right, null);
            };
            cljs.core.balance_right = function(key, val, left, ins) {
              return ins instanceof cljs.core.RedNode ? ins.right instanceof cljs.core.RedNode ? new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null) : ins.left instanceof cljs.core.RedNode ? new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null) : new cljs.core.BlackNode(key, val, left, ins, null) : new cljs.core.BlackNode(key, 
              val, left, ins, null);
            };
            cljs.core.balance_left_del = function(key, val, del, right) {
              if (del instanceof cljs.core.RedNode) {
                return new cljs.core.RedNode(key, val, del.blacken(), right, null);
              }
              if (right instanceof cljs.core.BlackNode) {
                return cljs.core.balance_right(key, val, del, right.redden());
              }
              if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
                return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
              }
              throw Error("red-black tree invariant violation");
            };
            cljs.core.balance_right_del = function(key, val, left, del) {
              if (del instanceof cljs.core.RedNode) {
                return new cljs.core.RedNode(key, val, left, del.blacken(), null);
              }
              if (left instanceof cljs.core.BlackNode) {
                return cljs.core.balance_left(key, val, left.redden(), del);
              }
              if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
                return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
              }
              throw Error("red-black tree invariant violation");
            };
            cljs.core.tree_map_kv_reduce = function(node, f, init) {
              var init__$1 = null != node.left ? function() {
                var G__6919 = node.left;
                return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__6919, f, init) : cljs.core.tree_map_kv_reduce.call(null, G__6919, f, init);
              }() : init;
              if (cljs.core.reduced_QMARK_(init__$1)) {
                return init__$1;
              }
              var init__$2 = function() {
                var G__6923 = node.key, G__6924 = node.val;
                return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init__$1, G__6923, G__6924) : f.call(null, init__$1, G__6923, G__6924);
              }();
              if (cljs.core.reduced_QMARK_(init__$2)) {
                return init__$2;
              }
              if (null != node.right) {
                var G__6925 = node.right;
                return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__6925, f, init__$2) : cljs.core.tree_map_kv_reduce.call(null, G__6925, f, init__$2);
              }
              return init__$2;
            };
            cljs.core.BlackNode = function(key, val, left, right, __hash) {
              this.key = key;
              this.val = val;
              this.left = left;
              this.right = right;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 166619935;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.BlackNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.BlackNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
              switch(k) {
                case 0:
                  return new cljs.core.MapEntry(0, this.key, null);
                case 1:
                  return new cljs.core.MapEntry(1, this.val, null);
                default:
                  return null;
              }
            };
            cljs.core.BlackNode.prototype.lastIndexOf = function() {
              var G__8443 = null, G__8443__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8443__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8443 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8443__1.call(this, x);
                  case 2:
                    return G__8443__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8443.cljs$core$IFn$_invoke$arity$1 = G__8443__1;
              G__8443.cljs$core$IFn$_invoke$arity$2 = G__8443__2;
              return G__8443;
            }();
            cljs.core.BlackNode.prototype.indexOf = function() {
              var G__8444 = null, G__8444__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8444__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8444 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8444__1.call(this, x);
                  case 2:
                    return G__8444__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8444.cljs$core$IFn$_invoke$arity$1 = G__8444__1;
              G__8444.cljs$core$IFn$_invoke$arity$2 = G__8444__2;
              return G__8444;
            }();
            cljs.core.BlackNode.prototype.add_right = function(ins) {
              return ins.balance_right(this);
            };
            cljs.core.BlackNode.prototype.redden = function() {
              return new cljs.core.RedNode(this.key, this.val, this.left, this.right, null);
            };
            cljs.core.BlackNode.prototype.blacken = function() {
              return this;
            };
            cljs.core.BlackNode.prototype.add_left = function(ins) {
              return ins.balance_left(this);
            };
            cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
              return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
            };
            cljs.core.BlackNode.prototype.balance_left = function(parent) {
              return new cljs.core.BlackNode(parent.key, parent.val, this, parent.right, null);
            };
            cljs.core.BlackNode.prototype.balance_right = function(parent) {
              return new cljs.core.BlackNode(parent.key, parent.val, parent.left, this, null);
            };
            cljs.core.BlackNode.prototype.remove_left = function(del) {
              return cljs.core.balance_left_del(this.key, this.val, del, this.right);
            };
            cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
              return cljs.core.tree_map_kv_reduce(this, f, init);
            };
            cljs.core.BlackNode.prototype.remove_right = function(del) {
              return cljs.core.balance_right_del(this.key, this.val, this.left, del);
            };
            cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, null);
            };
            cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
              if (0 === n) {
                return this.key;
              }
              if (1 === n) {
                return this.val;
              }
              throw Error("Index out of bounds");
            };
            cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
              return 0 === n ? this.key : 1 === n ? this.val : not_found;
            };
            cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
              return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
            };
            cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
              return null;
            };
            cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
              return 2;
            };
            cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
              return this.key;
            };
            cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key], null);
            };
            cljs.core.BlackNode.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.val, this.key], 0, null);
            };
            cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
              return null;
            };
            cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(this, f, start);
            };
            cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), k, v);
            };
            cljs.core.BlackNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
              return 0 === k || 1 === k;
            };
            cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.key, this.val], 0, null);
            };
            cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
              return cljs.core._with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), meta);
            };
            cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val, o], null);
            };
            cljs.core.BlackNode.prototype.call = function() {
              var G__8445 = null;
              G__8445 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$IIndexed$_nth$arity$2(null, k);
                  case 3:
                    return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8445.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$IIndexed$_nth$arity$2(null, k);
              };
              G__8445.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
              };
              return G__8445;
            }();
            cljs.core.BlackNode.prototype.apply = function(self__, args6928) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6928)));
            };
            cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$IIndexed$_nth$arity$2(null, k);
            };
            cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.BlackNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$key, cljs$cst$symbol$val, cljs$cst$symbol$left, cljs$cst$symbol$right, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.BlackNode.cljs$lang$type = !0;
            cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
            cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/BlackNode");
            };
            cljs.core.__GT_BlackNode = function(key, val, left, right, __hash) {
              return new cljs.core.BlackNode(key, val, left, right, __hash);
            };
            var G__6930_8446 = cljs.core.BlackNode.prototype, G__6931_8447 = cljs.core.ITER_SYMBOL, G__6932_8448 = function(G__6930_8446, G__6931_8447) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6930_8446, G__6931_8447, G__6932_8448);
            cljs.core.RedNode = function(key, val, left, right, __hash) {
              this.key = key;
              this.val = val;
              this.left = left;
              this.right = right;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 166619935;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.RedNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.RedNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
              switch(k) {
                case 0:
                  return new cljs.core.MapEntry(0, this.key, null);
                case 1:
                  return new cljs.core.MapEntry(1, this.val, null);
                default:
                  return null;
              }
            };
            cljs.core.RedNode.prototype.lastIndexOf = function() {
              var G__8450 = null, G__8450__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8450__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8450 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8450__1.call(this, x);
                  case 2:
                    return G__8450__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8450.cljs$core$IFn$_invoke$arity$1 = G__8450__1;
              G__8450.cljs$core$IFn$_invoke$arity$2 = G__8450__2;
              return G__8450;
            }();
            cljs.core.RedNode.prototype.indexOf = function() {
              var G__8451 = null, G__8451__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8451__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8451 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8451__1.call(this, x);
                  case 2:
                    return G__8451__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8451.cljs$core$IFn$_invoke$arity$1 = G__8451__1;
              G__8451.cljs$core$IFn$_invoke$arity$2 = G__8451__2;
              return G__8451;
            }();
            cljs.core.RedNode.prototype.add_right = function(ins) {
              return new cljs.core.RedNode(this.key, this.val, this.left, ins, null);
            };
            cljs.core.RedNode.prototype.redden = function() {
              throw Error("red-black tree invariant violation");
            };
            cljs.core.RedNode.prototype.blacken = function() {
              return new cljs.core.BlackNode(this.key, this.val, this.left, this.right, null);
            };
            cljs.core.RedNode.prototype.add_left = function(ins) {
              return new cljs.core.RedNode(this.key, this.val, ins, this.right, null);
            };
            cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
              return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
            };
            cljs.core.RedNode.prototype.balance_left = function(parent) {
              return this.left instanceof cljs.core.RedNode ? new cljs.core.RedNode(this.key, this.val, this.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, this.right, parent.right, null), null) : this.right instanceof cljs.core.RedNode ? new cljs.core.RedNode(this.right.key, this.right.val, new cljs.core.BlackNode(this.key, this.val, this.left, this.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, this.right.right, parent.right, null), null) : new cljs.core.BlackNode(parent.key, 
              parent.val, this, parent.right, null);
            };
            cljs.core.RedNode.prototype.balance_right = function(parent) {
              return this.right instanceof cljs.core.RedNode ? new cljs.core.RedNode(this.key, this.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, this.left, null), this.right.blacken(), null) : this.left instanceof cljs.core.RedNode ? new cljs.core.RedNode(this.left.key, this.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, this.left.left, null), new cljs.core.BlackNode(this.key, this.val, this.left.right, this.right, null), null) : new cljs.core.BlackNode(parent.key, 
              parent.val, parent.left, this, null);
            };
            cljs.core.RedNode.prototype.remove_left = function(del) {
              return new cljs.core.RedNode(this.key, this.val, del, this.right, null);
            };
            cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
              return cljs.core.tree_map_kv_reduce(this, f, init);
            };
            cljs.core.RedNode.prototype.remove_right = function(del) {
              return new cljs.core.RedNode(this.key, this.val, this.left, del, null);
            };
            cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, null);
            };
            cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
              if (0 === n) {
                return this.key;
              }
              if (1 === n) {
                return this.val;
              }
              throw Error("Index out of bounds");
            };
            cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
              return 0 === n ? this.key : 1 === n ? this.val : not_found;
            };
            cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
              return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
            };
            cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
              return null;
            };
            cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
              return 2;
            };
            cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
              return this.key;
            };
            cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
              return this.val;
            };
            cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key], null);
            };
            cljs.core.RedNode.prototype.cljs$core$IReversible$_rseq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.val, this.key], 0, null);
            };
            cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
              return null;
            };
            cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(this, f, start);
            };
            cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
              return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), k, v);
            };
            cljs.core.RedNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(node, k) {
              return 0 === k || 1 === k;
            };
            cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
              return new cljs.core.IndexedSeq([this.key, this.val], 0, null);
            };
            cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
              return cljs.core._with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val], null), meta);
            };
            cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [this.key, this.val, o], null);
            };
            cljs.core.RedNode.prototype.call = function() {
              var G__8452 = null;
              G__8452 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$IIndexed$_nth$arity$2(null, k);
                  case 3:
                    return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8452.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$IIndexed$_nth$arity$2(null, k);
              };
              G__8452.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
              };
              return G__8452;
            }();
            cljs.core.RedNode.prototype.apply = function(self__, args6933) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6933)));
            };
            cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$IIndexed$_nth$arity$2(null, k);
            };
            cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
            };
            cljs.core.RedNode.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$key, cljs$cst$symbol$val, cljs$cst$symbol$left, cljs$cst$symbol$right, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.RedNode.cljs$lang$type = !0;
            cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
            cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RedNode");
            };
            cljs.core.__GT_RedNode = function(key, val, left, right, __hash) {
              return new cljs.core.RedNode(key, val, left, right, __hash);
            };
            var G__6935_8453 = cljs.core.RedNode.prototype, G__6936_8454 = cljs.core.ITER_SYMBOL, G__6937_8455 = function(G__6935_8453, G__6936_8454) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6935_8453, G__6936_8454, G__6937_8455);
            cljs.core.tree_map_add = function(comp, tree, k, v, found) {
              if (null == tree) {
                return new cljs.core.RedNode(k, v, null, null, null);
              }
              var c = function() {
                var G__6939 = tree.key;
                return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, G__6939) : comp.call(null, k, G__6939);
              }();
              if (0 === c) {
                return found[0] = tree, null;
              }
              if (0 > c) {
                return c = function() {
                  var G__6941 = tree.left;
                  return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(comp, G__6941, k, v, found) : cljs.core.tree_map_add.call(null, comp, G__6941, k, v, found);
                }(), null != c ? tree.add_left(c) : null;
              }
              c = function() {
                var G__6946 = tree.right;
                return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(comp, G__6946, k, v, found) : cljs.core.tree_map_add.call(null, comp, G__6946, k, v, found);
              }();
              return null != c ? tree.add_right(c) : null;
            };
            cljs.core.tree_map_append = function(left, right) {
              if (null == left) {
                return right;
              }
              if (null == right) {
                return left;
              }
              if (left instanceof cljs.core.RedNode) {
                if (right instanceof cljs.core.RedNode) {
                  var app = function() {
                    var G__6950 = left.right, G__6951 = right.left;
                    return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__6950, G__6951) : cljs.core.tree_map_append.call(null, G__6950, G__6951);
                  }();
                  return app instanceof cljs.core.RedNode ? new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null) : new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
                }
                return new cljs.core.RedNode(left.key, left.val, left.left, function() {
                  var G__6952 = left.right;
                  return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__6952, right) : cljs.core.tree_map_append.call(null, G__6952, right);
                }(), null);
              }
              if (right instanceof cljs.core.RedNode) {
                return new cljs.core.RedNode(right.key, right.val, function() {
                  var G__6955 = right.left;
                  return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(left, G__6955) : cljs.core.tree_map_append.call(null, left, G__6955);
                }(), right.right, null);
              }
              app = function() {
                var G__6956 = left.right, G__6957 = right.left;
                return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__6956, G__6957) : cljs.core.tree_map_append.call(null, G__6956, G__6957);
              }();
              return app instanceof cljs.core.RedNode ? new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null) : cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            };
            cljs.core.tree_map_remove = function(comp, tree, k, found) {
              if (null != tree) {
                var c = function() {
                  var G__6959 = tree.key;
                  return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, G__6959) : comp.call(null, k, G__6959);
                }();
                if (0 === c) {
                  return found[0] = tree, cljs.core.tree_map_append(tree.left, tree.right);
                }
                if (0 > c) {
                  return c = function() {
                    var G__6961 = tree.left;
                    return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(comp, G__6961, k, found) : cljs.core.tree_map_remove.call(null, comp, G__6961, k, found);
                  }(), null != c || null != found[0] ? tree.left instanceof cljs.core.BlackNode ? cljs.core.balance_left_del(tree.key, tree.val, c, tree.right) : new cljs.core.RedNode(tree.key, tree.val, c, tree.right, null) : null;
                }
                c = function() {
                  var G__6965 = tree.right;
                  return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(comp, G__6965, k, found) : cljs.core.tree_map_remove.call(null, comp, G__6965, k, found);
                }();
                return null != c || null != found[0] ? tree.right instanceof cljs.core.BlackNode ? cljs.core.balance_right_del(tree.key, tree.val, tree.left, c) : new cljs.core.RedNode(tree.key, tree.val, tree.left, c, null) : null;
              }
              return null;
            };
            cljs.core.tree_map_replace = function(comp, tree, k, v) {
              var tk = tree.key, c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
              return 0 === c ? tree.replace(tk, v, tree.left, tree.right) : 0 > c ? tree.replace(tk, tree.val, function() {
                var G__6969 = tree.left;
                return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(comp, G__6969, k, v) : cljs.core.tree_map_replace.call(null, comp, G__6969, k, v);
              }(), tree.right) : tree.replace(tk, tree.val, tree.left, function() {
                var G__6973 = tree.right;
                return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(comp, G__6973, k, v) : cljs.core.tree_map_replace.call(null, comp, G__6973, k, v);
              }());
            };
            cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
              this.comp = comp;
              this.tree = tree;
              this.cnt = cnt;
              this.meta = meta;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 418776847;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
              return this.entry_at(k);
            };
            cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
              for (var seq__6977 = cljs.core.seq(this), chunk__6978 = null, count__6979 = 0, i__6980 = 0;;) {
                if (i__6980 < count__6979) {
                  var vec__6987 = chunk__6978.cljs$core$IIndexed$_nth$arity$2(null, i__6980), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6987, 0, null);
                  vec__6987 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6987, 1, null);
                  f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6987, k) : f.call(null, vec__6987, k);
                  i__6980 += 1;
                } else {
                  if (seq__6977 = cljs.core.seq(seq__6977)) {
                    cljs.core.chunked_seq_QMARK_(seq__6977) ? (chunk__6978 = cljs.core.chunk_first(seq__6977), seq__6977 = cljs.core.chunk_rest(seq__6977), k = chunk__6978, count__6979 = cljs.core.count(chunk__6978), chunk__6978 = k) : (chunk__6978 = cljs.core.first(seq__6977), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6978, 0, null), vec__6987 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__6978, 1, null), f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__6987, k) : f.call(null, 
                    vec__6987, k), seq__6977 = cljs.core.next(seq__6977), chunk__6978 = null, count__6979 = 0), i__6980 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentTreeMap.prototype.entries = function() {
              return cljs.core.es6_entries_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentTreeMap.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentTreeMap.prototype.keys = function() {
              return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.keys.call(null, this));
            };
            cljs.core.PersistentTreeMap.prototype.values = function() {
              return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(this) : cljs.core.vals.call(null, this));
            };
            cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
              for (var t = this.tree;;) {
                if (null != t) {
                  var c = k;
                  var G__6994 = t.key;
                  c = this.comp.cljs$core$IFn$_invoke$arity$2 ? this.comp.cljs$core$IFn$_invoke$arity$2(c, G__6994) : this.comp.call(null, c, G__6994);
                  if (0 === c) {
                    return t;
                  }
                  t = 0 > c ? t.left : t.right;
                } else {
                  return null;
                }
              }
            };
            cljs.core.PersistentTreeMap.prototype.has = function(k) {
              return cljs.core.contains_QMARK_(this, k);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, null);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
              coll = this.entry_at(k);
              return null != coll ? coll.val : not_found;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
              return null != this.tree ? cljs.core.unreduced(cljs.core.tree_map_kv_reduce(this.tree, f, init)) : init;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentTreeMap(this.comp, this.tree, this.cnt, this.meta, this.__hash);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.cnt;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
              return 0 < this.cnt ? cljs.core.create_tree_map_seq(this.tree, !1, this.cnt) : null;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_map(this, other);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return new cljs.core.PersistentTreeMap(this.comp, null, 0, this.meta, 0);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
              coll = [null];
              k = cljs.core.tree_map_remove(this.comp, this.tree, k, coll);
              return null == k ? null == cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, 0) ? this : new cljs.core.PersistentTreeMap(this.comp, null, 0, this.meta, null) : new cljs.core.PersistentTreeMap(this.comp, k.blacken(), this.cnt - 1, this.meta, null);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
              coll = [null];
              var t = cljs.core.tree_map_add(this.comp, this.tree, k, v, coll);
              return null == t ? (coll = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, 0), cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, coll.val) ? this : new cljs.core.PersistentTreeMap(this.comp, cljs.core.tree_map_replace(this.comp, this.tree, k, v), this.cnt, this.meta, null)) : new cljs.core.PersistentTreeMap(this.comp, t.blacken(), this.cnt + 1, this.meta, null);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
              return null != this.entry_at(k);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return 0 < this.cnt ? cljs.core.create_tree_map_seq(this.tree, !0, this.cnt) : null;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentTreeMap(this.comp, this.tree, this.cnt, new_meta, this.__hash);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
              if (cljs.core.vector_QMARK_(entry)) {
                return this.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
              }
              coll = this;
              for (entry = cljs.core.seq(entry);;) {
                if (null == entry) {
                  return coll;
                }
                var e = cljs.core.first(entry);
                if (cljs.core.vector_QMARK_(e)) {
                  coll = cljs.core._assoc(coll, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1)), entry = cljs.core.next(entry);
                } else {
                  throw Error("conj on a map takes map entries or seqables of map entries");
                }
              }
            };
            cljs.core.PersistentTreeMap.prototype.call = function() {
              var G__8472 = null;
              G__8472 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8472.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8472.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8472;
            }();
            cljs.core.PersistentTreeMap.prototype.apply = function(self__, args6976) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args6976)));
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
              return 0 < this.cnt ? cljs.core.create_tree_map_seq(this.tree, ascending_QMARK_, this.cnt) : null;
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
              if (0 < this.cnt) {
                coll = null;
                for (var t = this.tree;;) {
                  if (null != t) {
                    var c = k;
                    var G__6998 = t.key;
                    c = this.comp.cljs$core$IFn$_invoke$arity$2 ? this.comp.cljs$core$IFn$_invoke$arity$2(c, G__6998) : this.comp.call(null, c, G__6998);
                    if (0 === c) {
                      return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, t), ascending_QMARK_, -1, null);
                    }
                    cljs.core.truth_(ascending_QMARK_) ? 0 > c ? (coll = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, t), t = t.left) : t = t.right : 0 < c ? (coll = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, t), t = t.right) : t = t.left;
                  } else {
                    return null == coll ? null : new cljs.core.PersistentTreeMapSeq(null, coll, ascending_QMARK_, -1, null);
                  }
                }
              } else {
                return null;
              }
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
              return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
              return this.comp;
            };
            cljs.core.PersistentTreeMap.getBasis = function() {
              return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$comp, cljs$cst$symbol$tree, cljs$cst$symbol$cnt, cljs$cst$symbol$meta, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentTreeMap.cljs$lang$type = !0;
            cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
            cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentTreeMap");
            };
            cljs.core.__GT_PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
              return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
            };
            cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
            var G__6999_8481 = cljs.core.PersistentTreeMap.prototype, G__7000_8482 = cljs.core.ITER_SYMBOL, G__7001_8483 = function(G__6999_8481, G__7000_8482) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__6999_8481, G__7000_8482, G__7001_8483);
            cljs.core.hash_map = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8484 = arguments.length, i__4731__auto___8485 = 0;;) {
                if (i__4731__auto___8485 < len__4730__auto___8484) {
                  args__4736__auto__.push(arguments[i__4731__auto___8485]), i__4731__auto___8485 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
              keyvals = cljs.core.seq(keyvals);
              for (var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);;) {
                if (keyvals) {
                  var G__8487 = cljs.core.nnext(keyvals);
                  out = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(keyvals), cljs.core.second(keyvals));
                  keyvals = G__8487;
                } else {
                  return cljs.core.persistent_BANG_(out);
                }
              }
            };
            cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
            cljs.core.hash_map.cljs$lang$applyTo = function(seq7002) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7002));
            };
            cljs.core.array_map = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8489 = arguments.length, i__4731__auto___8490 = 0;;) {
                if (i__4731__auto___8490 < len__4730__auto___8489) {
                  args__4736__auto__.push(arguments[i__4731__auto___8490]), i__4731__auto___8490 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
              keyvals = keyvals instanceof cljs.core.IndexedSeq && 0 === keyvals.i ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
              return cljs.core.PersistentArrayMap.createAsIfByAssoc(keyvals);
            };
            cljs.core.array_map.cljs$lang$maxFixedArity = 0;
            cljs.core.array_map.cljs$lang$applyTo = function(seq7003) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7003));
            };
            cljs.core.obj_map = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8492 = arguments.length, i__4731__auto___8493 = 0;;) {
                if (i__4731__auto___8493 < len__4730__auto___8492) {
                  args__4736__auto__.push(arguments[i__4731__auto___8493]), i__4731__auto___8493 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
              var ks = [], obj = {};
              for (keyvals = cljs.core.seq(keyvals);;) {
                if (keyvals) {
                  ks.push(cljs.core.first(keyvals));
                  var G__7007_8495 = obj, G__7008_8496 = cljs.core.first(keyvals), G__7009_8497 = cljs.core.second(keyvals);
                  goog.object.set(G__7007_8495, G__7008_8496, G__7009_8497);
                  keyvals = cljs.core.nnext(keyvals);
                } else {
                  return cljs.core.ObjMap.fromObject(ks, obj);
                }
              }
            };
            cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
            cljs.core.obj_map.cljs$lang$applyTo = function(seq7004) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7004));
            };
            cljs.core.sorted_map = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8499 = arguments.length, i__4731__auto___8500 = 0;;) {
                if (i__4731__auto___8500 < len__4730__auto___8499) {
                  args__4736__auto__.push(arguments[i__4731__auto___8500]), i__4731__auto___8500 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
              keyvals = cljs.core.seq(keyvals);
              for (var out = cljs.core.PersistentTreeMap.EMPTY;;) {
                if (keyvals) {
                  var G__8502 = cljs.core.nnext(keyvals);
                  out = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(keyvals), cljs.core.second(keyvals));
                  keyvals = G__8502;
                } else {
                  return out;
                }
              }
            };
            cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
            cljs.core.sorted_map.cljs$lang$applyTo = function(seq7010) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7010));
            };
            cljs.core.sorted_map_by = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8504 = arguments.length, i__4731__auto___8505 = 0;;) {
                if (i__4731__auto___8505 < len__4730__auto___8504) {
                  args__4736__auto__.push(arguments[i__4731__auto___8505]), i__4731__auto___8505 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
              keyvals = cljs.core.seq(keyvals);
              for (var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);;) {
                if (keyvals) {
                  comparator = cljs.core.nnext(keyvals), out = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(keyvals), cljs.core.second(keyvals)), keyvals = comparator;
                } else {
                  return out;
                }
              }
            };
            cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
            cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq7011) {
              var G__7012 = cljs.core.first(seq7011);
              seq7011 = cljs.core.next(seq7011);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7012, seq7011);
            };
            cljs.core.KeySeq = function(mseq, _meta) {
              this.mseq = mseq;
              this._meta = _meta;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.KeySeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.KeySeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.KeySeq.prototype.indexOf = function() {
              var G__8509 = null, G__8509__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8509__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8509 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8509__1.call(this, x);
                  case 2:
                    return G__8509__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8509.cljs$core$IFn$_invoke$arity$1 = G__8509__1;
              G__8509.cljs$core$IFn$_invoke$arity$2 = G__8509__2;
              return G__8509;
            }();
            cljs.core.KeySeq.prototype.lastIndexOf = function() {
              var G__8510 = null, G__8510__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8510__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8510 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8510__1.call(this, x);
                  case 2:
                    return G__8510__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8510.cljs$core$IFn$_invoke$arity$1 = G__8510__1;
              G__8510.cljs$core$IFn$_invoke$arity$2 = G__8510__2;
              return G__8510;
            }();
            cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this._meta;
            };
            cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              coll = (null != this.mseq ? this.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === this.mseq.cljs$core$INext$ || (this.mseq.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) ? this.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(this.mseq);
              return null == coll ? null : new cljs.core.KeySeq(coll, null);
            };
            cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.hash_ordered_coll(this);
            };
            cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.mseq.cljs$core$ISeq$_first$arity$1(null).cljs$core$IMapEntry$_key$arity$1(null);
            };
            cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              coll = (null != this.mseq ? this.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === this.mseq.cljs$core$INext$ || (this.mseq.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) ? this.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(this.mseq);
              return null != coll ? new cljs.core.KeySeq(coll, null) : cljs.core.List.EMPTY;
            };
            cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this._meta ? this : new cljs.core.KeySeq(this.mseq, new_meta);
            };
            cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.KeySeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$mseq, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$tag, cljs$cst$symbol$not_DASH_native], null)), cljs$cst$symbol$_meta], null);
            };
            cljs.core.KeySeq.cljs$lang$type = !0;
            cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
            cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/KeySeq");
            };
            cljs.core.__GT_KeySeq = function(mseq, _meta) {
              return new cljs.core.KeySeq(mseq, _meta);
            };
            var G__7015_8511 = cljs.core.KeySeq.prototype, G__7016_8512 = cljs.core.ITER_SYMBOL, G__7017_8513 = function(G__7015_8511, G__7016_8512) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7015_8511, G__7016_8512, G__7017_8513);
            cljs.core.keys = function(map) {
              return (map = cljs.core.seq(map)) ? new cljs.core.KeySeq(map, null) : null;
            };
            cljs.core.key = function(map_entry) {
              return cljs.core._key(map_entry);
            };
            cljs.core.ValSeq = function(mseq, _meta) {
              this.mseq = mseq;
              this._meta = _meta;
              this.cljs$lang$protocol_mask$partition0$ = 32374988;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.ValSeq.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ValSeq.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.ValSeq.prototype.indexOf = function() {
              var G__8514 = null, G__8514__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8514__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8514 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8514__1.call(this, x);
                  case 2:
                    return G__8514__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8514.cljs$core$IFn$_invoke$arity$1 = G__8514__1;
              G__8514.cljs$core$IFn$_invoke$arity$2 = G__8514__2;
              return G__8514;
            }();
            cljs.core.ValSeq.prototype.lastIndexOf = function() {
              var G__8515 = null, G__8515__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8515__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8515 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8515__1.call(this, x);
                  case 2:
                    return G__8515__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8515.cljs$core$IFn$_invoke$arity$1 = G__8515__1;
              G__8515.cljs$core$IFn$_invoke$arity$2 = G__8515__2;
              return G__8515;
            }();
            cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this._meta;
            };
            cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
              coll = (null != this.mseq ? this.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === this.mseq.cljs$core$INext$ || (this.mseq.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) ? this.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(this.mseq);
              return null == coll ? null : new cljs.core.ValSeq(coll, null);
            };
            cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              return cljs.core.hash_ordered_coll(this);
            };
            cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, this);
            };
            cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
              return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, this);
            };
            cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.mseq.cljs$core$ISeq$_first$arity$1(null).cljs$core$IMapEntry$_val$arity$1(null);
            };
            cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
              coll = (null != this.mseq ? this.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === this.mseq.cljs$core$INext$ || (this.mseq.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) : cljs.core.native_satisfies_QMARK_(cljs.core.INext, this.mseq)) ? this.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(this.mseq);
              return null != coll ? new cljs.core.ValSeq(coll, null) : cljs.core.List.EMPTY;
            };
            cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return this;
            };
            cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this._meta ? this : new cljs.core.ValSeq(this.mseq, new_meta);
            };
            cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.ValSeq.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$mseq, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$tag, cljs$cst$symbol$not_DASH_native], null)), cljs$cst$symbol$_meta], null);
            };
            cljs.core.ValSeq.cljs$lang$type = !0;
            cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
            cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ValSeq");
            };
            cljs.core.__GT_ValSeq = function(mseq, _meta) {
              return new cljs.core.ValSeq(mseq, _meta);
            };
            var G__7020_8516 = cljs.core.ValSeq.prototype, G__7021_8517 = cljs.core.ITER_SYMBOL, G__7022_8518 = function(G__7020_8516, G__7021_8517) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7020_8516, G__7021_8517, G__7022_8518);
            cljs.core.vals = function(map) {
              return (map = cljs.core.seq(map)) ? new cljs.core.ValSeq(map, null) : null;
            };
            cljs.core.val = function(map_entry) {
              return cljs.core._val(map_entry);
            };
            cljs.core.merge = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8519 = arguments.length, i__4731__auto___8520 = 0;;) {
                if (i__4731__auto___8520 < len__4730__auto___8519) {
                  args__4736__auto__.push(arguments[i__4731__auto___8520]), i__4731__auto___8520 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
              return cljs.core.truth_(cljs.core.some(cljs.core.identity, maps)) ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__7023_SHARP_, p2__7024_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.truth_(p1__7023_SHARP_) ? p1__7023_SHARP_ : cljs.core.PersistentArrayMap.EMPTY, p2__7024_SHARP_);
              }, maps) : null;
            };
            cljs.core.merge.cljs$lang$maxFixedArity = 0;
            cljs.core.merge.cljs$lang$applyTo = function(seq7025) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7025));
            };
            cljs.core.merge_with = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8522 = arguments.length, i__4731__auto___8523 = 0;;) {
                if (i__4731__auto___8523 < len__4730__auto___8522) {
                  args__4736__auto__.push(arguments[i__4731__auto___8523]), i__4731__auto___8523 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
              if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
                var merge2 = function(merge_entry) {
                  return function(m1, m2) {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, cljs.core.truth_(m1) ? m1 : cljs.core.PersistentArrayMap.EMPTY, cljs.core.seq(m2));
                  };
                }(function(m, e) {
                  var k = cljs.core.key(e), v = cljs.core.val(e);
                  return cljs.core.contains_QMARK_(m, k) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
                    var G__7028 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
                    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7028, v) : f.call(null, G__7028, v);
                  }()) : cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
                });
                return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
              }
              return null;
            };
            cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
            cljs.core.merge_with.cljs$lang$applyTo = function(seq7026) {
              var G__7027 = cljs.core.first(seq7026);
              seq7026 = cljs.core.next(seq7026);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7027, seq7026);
            };
            cljs.core.select_keys = function(map, keyseq) {
              var ret = cljs.core.PersistentArrayMap.EMPTY;
              for (keyseq = cljs.core.seq(keyseq);;) {
                if (keyseq) {
                  var key = cljs.core.first(keyseq), entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, cljs$cst$keyword$cljs_DOT_core_SLASH_not_DASH_found);
                  ret = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, cljs$cst$keyword$cljs_DOT_core_SLASH_not_DASH_found) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
                  keyseq = cljs.core.next(keyseq);
                } else {
                  return cljs.core._with_meta(ret, cljs.core.meta(map));
                }
              }
            };
            cljs.core.HashSetIter = function(iter) {
              this.iter = iter;
            };
            cljs.core.HashSetIter.prototype.hasNext = function() {
              return this.iter.hasNext();
            };
            cljs.core.HashSetIter.prototype.next = function() {
              if (this.iter.hasNext()) {
                return this.iter.next().key;
              }
              throw Error("No such element");
            };
            cljs.core.HashSetIter.prototype.remove = function() {
              return Error("Unsupported operation");
            };
            cljs.core.HashSetIter.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$iter], null);
            };
            cljs.core.HashSetIter.cljs$lang$type = !0;
            cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
            cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/HashSetIter");
            };
            cljs.core.__GT_HashSetIter = function(iter) {
              return new cljs.core.HashSetIter(iter);
            };
            cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
              this.meta = meta;
              this.hash_map = hash_map;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 15077647;
              this.cljs$lang$protocol_mask$partition1$ = 139268;
            };
            cljs.core.PersistentHashSet.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentHashSet.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentHashSet.prototype.keys = function() {
              return cljs.core.es6_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentHashSet.prototype.entries = function() {
              return cljs.core.es6_set_entries_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentHashSet.prototype.values = function() {
              return cljs.core.es6_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentHashSet.prototype.has = function(k) {
              return cljs.core.contains_QMARK_(this, k);
            };
            cljs.core.PersistentHashSet.prototype.forEach = function(f) {
              for (var seq__7033 = cljs.core.seq(this), chunk__7034 = null, count__7035 = 0, i__7036 = 0;;) {
                if (i__7036 < count__7035) {
                  var vec__7043 = chunk__7034.cljs$core$IIndexed$_nth$arity$2(null, i__7036), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7043, 0, null);
                  vec__7043 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7043, 1, null);
                  f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__7043, k) : f.call(null, vec__7043, k);
                  i__7036 += 1;
                } else {
                  if (seq__7033 = cljs.core.seq(seq__7033)) {
                    cljs.core.chunked_seq_QMARK_(seq__7033) ? (chunk__7034 = cljs.core.chunk_first(seq__7033), seq__7033 = cljs.core.chunk_rest(seq__7033), k = chunk__7034, count__7035 = cljs.core.count(chunk__7034), chunk__7034 = k) : (chunk__7034 = cljs.core.first(seq__7033), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7034, 0, null), vec__7043 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7034, 1, null), f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__7043, k) : f.call(null, 
                    vec__7043, k), seq__7033 = cljs.core.next(seq__7033), chunk__7034 = null, count__7035 = 0), i__7036 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, v, null);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
              coll = cljs.core._find(this.hash_map, v);
              return cljs.core.truth_(coll) ? cljs.core.key(coll) : not_found;
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
              return new cljs.core.HashSetIter(cljs.core._iterator(this.hash_map));
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentHashSet(this.meta, this.hash_map, this.__hash);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return cljs.core._count(this.hash_map);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              if (coll = cljs.core.set_QMARK_(other)) {
                var and__4120__auto____$1$jscomp$0 = cljs.core.count(this) === cljs.core.count(other);
                if (and__4120__auto____$1$jscomp$0) {
                  try {
                    return cljs.core.reduce_kv(function(and__4120__auto____$1, and__4120__auto__, coll__$1) {
                      return function(p1__7031_SHARP_, p2__7030_SHARP_) {
                        return (p1__7031_SHARP_ = cljs.core.contains_QMARK_(other, p2__7030_SHARP_)) ? p1__7031_SHARP_ : cljs.core.reduced(!1);
                      };
                    }(and__4120__auto____$1$jscomp$0, coll, this), !0, this.hash_map);
                  } catch (e7051) {
                    if (e7051 instanceof Error) {
                      return !1;
                    }
                    throw e7051;
                  }
                } else {
                  return and__4120__auto____$1$jscomp$0;
                }
              } else {
                return coll;
              }
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
              return new cljs.core.TransientHashSet(cljs.core._as_transient(this.hash_map));
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return cljs.core._with_meta(cljs.core.PersistentHashSet.EMPTY, this.meta);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
              return new cljs.core.PersistentHashSet(this.meta, cljs.core._dissoc(this.hash_map, v), null);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return cljs.core.keys(this.hash_map);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentHashSet(new_meta, this.hash_map, this.__hash);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return new cljs.core.PersistentHashSet(this.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(this.hash_map, o, null), null);
            };
            cljs.core.PersistentHashSet.prototype.call = function() {
              var G__8539 = null;
              G__8539 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8539.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8539.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8539;
            }();
            cljs.core.PersistentHashSet.prototype.apply = function(self__, args7032) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args7032)));
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentHashSet.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$hash_DASH_map, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentHashSet.cljs$lang$type = !0;
            cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
            cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentHashSet");
            };
            cljs.core.__GT_PersistentHashSet = function(meta, hash_map, __hash) {
              return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
            };
            cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
            cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
              var len = items.length;
              if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
                no_clone || cljs.core.aclone(items);
                no_clone = 0;
                for (var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);;) {
                  if (no_clone < len) {
                    var G__8540 = no_clone + 1;
                    out = cljs.core._assoc_BANG_(out, items[no_clone], null);
                    no_clone = G__8540;
                  } else {
                    return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
                  }
                }
              } else {
                for (no_clone = 0, out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);;) {
                  if (no_clone < len) {
                    G__8540 = no_clone + 1, out = cljs.core._conj_BANG_(out, items[no_clone]), no_clone = G__8540;
                  } else {
                    return cljs.core._persistent_BANG_(out);
                  }
                }
              }
            };
            cljs.core.PersistentHashSet.createWithCheck = function(items) {
              for (var len = items.length, t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY), i_8545 = 0;;) {
                if (i_8545 < len) {
                  cljs.core._conj_BANG_(t, items[i_8545]);
                  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(t), i_8545 + 1)) {
                    throw Error(["Duplicate key: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(items[i_8545])].join(""));
                  }
                  i_8545 += 1;
                } else {
                  break;
                }
              }
              return cljs.core._persistent_BANG_(t);
            };
            cljs.core.PersistentHashSet.createAsIfByAssoc = function(items) {
              for (var len = items.length, t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY), i_8548 = 0;;) {
                if (i_8548 < len) {
                  cljs.core._conj_BANG_(t, items[i_8548]), i_8548 += 1;
                } else {
                  break;
                }
              }
              return cljs.core._persistent_BANG_(t);
            };
            var G__7052_8550 = cljs.core.PersistentHashSet.prototype, G__7053_8551 = cljs.core.ITER_SYMBOL, G__7054_8552 = function(G__7052_8550, G__7053_8551) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7052_8550, G__7053_8551, G__7054_8552);
            cljs.core.TransientHashSet = function(transient_map) {
              this.transient_map = transient_map;
              this.cljs$lang$protocol_mask$partition1$ = 136;
              this.cljs$lang$protocol_mask$partition0$ = 259;
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
              this.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(this.transient_map, o, null);
              return this;
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
              return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(this.transient_map), null);
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
              this.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(this.transient_map, v);
              return this;
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
              return cljs.core.count(this.transient_map);
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, v, null);
            };
            cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? not_found : v;
            };
            cljs.core.TransientHashSet.prototype.call = function() {
              var G__8553 = null, G__8553__2 = function(self__, k) {
                return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? null : k;
              }, G__8553__3 = function(self__, k, not_found) {
                return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? not_found : k;
              };
              G__8553 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return G__8553__2.call(this, self__, k);
                  case 3:
                    return G__8553__3.call(this, self__, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8553.cljs$core$IFn$_invoke$arity$2 = G__8553__2;
              G__8553.cljs$core$IFn$_invoke$arity$3 = G__8553__3;
              return G__8553;
            }();
            cljs.core.TransientHashSet.prototype.apply = function(self__, args7055) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args7055)));
            };
            cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? null : k;
            };
            cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel ? not_found : k;
            };
            cljs.core.TransientHashSet.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$transient_DASH_map, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.TransientHashSet.cljs$lang$type = !0;
            cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
            cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TransientHashSet");
            };
            cljs.core.__GT_TransientHashSet = function(transient_map) {
              return new cljs.core.TransientHashSet(transient_map);
            };
            cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
              this.meta = meta;
              this.tree_map = tree_map;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 417730831;
              this.cljs$lang$protocol_mask$partition1$ = 8192;
            };
            cljs.core.PersistentTreeSet.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.PersistentTreeSet.prototype.keys = function() {
              return cljs.core.es6_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentTreeSet.prototype.entries = function() {
              return cljs.core.es6_set_entries_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentTreeSet.prototype.values = function() {
              return cljs.core.es6_iterator(cljs.core.seq(this));
            };
            cljs.core.PersistentTreeSet.prototype.has = function(k) {
              return cljs.core.contains_QMARK_(this, k);
            };
            cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
              for (var seq__7059 = cljs.core.seq(this), chunk__7060 = null, count__7061 = 0, i__7062 = 0;;) {
                if (i__7062 < count__7061) {
                  var vec__7069 = chunk__7060.cljs$core$IIndexed$_nth$arity$2(null, i__7062), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7069, 0, null);
                  vec__7069 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7069, 1, null);
                  f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__7069, k) : f.call(null, vec__7069, k);
                  i__7062 += 1;
                } else {
                  if (seq__7059 = cljs.core.seq(seq__7059)) {
                    cljs.core.chunked_seq_QMARK_(seq__7059) ? (chunk__7060 = cljs.core.chunk_first(seq__7059), seq__7059 = cljs.core.chunk_rest(seq__7059), k = chunk__7060, count__7061 = cljs.core.count(chunk__7060), chunk__7060 = k) : (chunk__7060 = cljs.core.first(seq__7059), k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7060, 0, null), vec__7069 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7060, 1, null), f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(vec__7069, k) : f.call(null, 
                    vec__7069, k), seq__7059 = cljs.core.next(seq__7059), chunk__7060 = null, count__7061 = 0), i__7062 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, v, null);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
              coll = this.tree_map.entry_at(v);
              return null != coll ? coll.key : not_found;
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
              return this.meta;
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.PersistentTreeSet(this.meta, this.tree_map, this.__hash);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return cljs.core.count(this.tree_map);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
              return 0 < cljs.core.count(this.tree_map) ? cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(this.tree_map)) : null;
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
              coll = this.__hash;
              return null != coll ? coll : this.__hash = coll = cljs.core.hash_unordered_coll(this);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
              if (coll = cljs.core.set_QMARK_(other)) {
                var and__4120__auto____$1$jscomp$0 = cljs.core.count(this) === cljs.core.count(other);
                if (and__4120__auto____$1$jscomp$0) {
                  try {
                    return cljs.core.reduce_kv(function(and__4120__auto____$1, and__4120__auto__, coll__$1) {
                      return function(p1__7057_SHARP_, p2__7056_SHARP_) {
                        return (p1__7057_SHARP_ = cljs.core.contains_QMARK_(other, p2__7056_SHARP_)) ? p1__7057_SHARP_ : cljs.core.reduced(!1);
                      };
                    }(and__4120__auto____$1$jscomp$0, coll, this), !0, this.tree_map);
                  } catch (e7077) {
                    if (e7077 instanceof Error) {
                      return !1;
                    }
                    throw e7077;
                  }
                } else {
                  return and__4120__auto____$1$jscomp$0;
                }
              } else {
                return coll;
              }
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
              return new cljs.core.PersistentTreeSet(this.meta, cljs.core._empty(this.tree_map), 0);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
              return new cljs.core.PersistentTreeSet(this.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(this.tree_map, v), null);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
              return cljs.core.keys(this.tree_map);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.PersistentTreeSet(new_meta, this.tree_map, this.__hash);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
              return new cljs.core.PersistentTreeSet(this.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(this.tree_map, o, null), null);
            };
            cljs.core.PersistentTreeSet.prototype.call = function() {
              var G__8566 = null;
              G__8566 = function(self__, k, not_found) {
                switch(arguments.length) {
                  case 2:
                    return this.cljs$core$ILookup$_lookup$arity$2(null, k);
                  case 3:
                    return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8566.cljs$core$IFn$_invoke$arity$2 = function(self__, k) {
                return this.cljs$core$ILookup$_lookup$arity$2(null, k);
              };
              G__8566.cljs$core$IFn$_invoke$arity$3 = function(self__, k, not_found) {
                return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
              };
              return G__8566;
            }();
            cljs.core.PersistentTreeSet.prototype.apply = function(self__, args7058) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args7058)));
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return this.cljs$core$ILookup$_lookup$arity$2(null, k);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
              return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(this.tree_map, ascending_QMARK_));
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
              return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(this.tree_map, k, ascending_QMARK_));
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
              return entry;
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
              return cljs.core._comparator(this.tree_map);
            };
            cljs.core.PersistentTreeSet.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$tree_DASH_map, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.PersistentTreeSet.cljs$lang$type = !0;
            cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
            cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/PersistentTreeSet");
            };
            cljs.core.__GT_PersistentTreeSet = function(meta, tree_map, __hash) {
              return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
            };
            cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
            var G__7078_8567 = cljs.core.PersistentTreeSet.prototype, G__7079_8568 = cljs.core.ITER_SYMBOL, G__7080_8569 = function(G__7078_8567, G__7079_8568) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7078_8567, G__7079_8568, G__7080_8569);
            cljs.core.set_from_indexed_seq = function(iseq) {
              iseq = iseq.arr;
              a: {
                for (var l__4605__auto__ = iseq.length, i = 0, res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);;) {
                  if (i < l__4605__auto__) {
                    var G__8570 = i + 1;
                    res = cljs.core._conj_BANG_(res, iseq[i]);
                    i = G__8570;
                  } else {
                    break a;
                  }
                }
              }
              return res.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
            };
            cljs.core.set = function(coll) {
              if (cljs.core.set_QMARK_(coll)) {
                return cljs.core.with_meta(coll, null);
              }
              coll = cljs.core.seq(coll);
              if (null == coll) {
                return cljs.core.PersistentHashSet.EMPTY;
              }
              if (coll instanceof cljs.core.IndexedSeq && 0 === coll.i) {
                return cljs.core.PersistentHashSet.createAsIfByAssoc(coll.arr);
              }
              for (var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);;) {
                if (null != coll) {
                  var G__8572 = cljs.core.next(coll);
                  out = cljs.core._conj_BANG_(out, cljs.core._first(coll));
                  coll = G__8572;
                } else {
                  return cljs.core.persistent_BANG_(out);
                }
              }
            };
            cljs.core.hash_set = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8575 = arguments.length, i__4731__auto___8576 = 0;;) {
                    if (i__4731__auto___8576 < len__4730__auto___8575) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8576]), i__4731__auto___8576 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(0), 0, null);
                  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(args_arr__4751__auto__);
              }
            };
            cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.PersistentHashSet.EMPTY;
            };
            cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
              return cljs.core.set(keys);
            };
            cljs.core.hash_set.cljs$lang$applyTo = function(seq7082) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7082));
            };
            cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
            cljs.core.sorted_set = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8578 = arguments.length, i__4731__auto___8579 = 0;;) {
                if (i__4731__auto___8579 < len__4730__auto___8578) {
                  args__4736__auto__.push(arguments[i__4731__auto___8579]), i__4731__auto___8579 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
            };
            cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
            cljs.core.sorted_set.cljs$lang$applyTo = function(seq7084) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7084));
            };
            cljs.core.sorted_set_by = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8581 = arguments.length, i__4731__auto___8582 = 0;;) {
                if (i__4731__auto___8582 < len__4730__auto___8581) {
                  args__4736__auto__.push(arguments[i__4731__auto___8582]), i__4731__auto___8582 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
            };
            cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
            cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq7085) {
              var G__7086 = cljs.core.first(seq7085);
              seq7085 = cljs.core.next(seq7085);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7086, seq7085);
            };
            cljs.core.replace = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
              return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__7087_SHARP_) {
                var temp__5733__auto__ = cljs.core.find(smap, p1__7087_SHARP_);
                return cljs.core.truth_(temp__5733__auto__) ? cljs.core.val(temp__5733__auto__) : p1__7087_SHARP_;
              });
            };
            cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
              if (cljs.core.vector_QMARK_(coll)) {
                var n$jscomp$0 = cljs.core.count(coll);
                return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
                  return function(v, i) {
                    var temp__5733__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
                    return cljs.core.truth_(temp__5733__auto__) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(temp__5733__auto__)) : v;
                  };
                }(), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n$jscomp$0, cljs.core.iterate(cljs.core.inc, 0)));
              }
              return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__7088_SHARP_) {
                var temp__5733__auto__ = cljs.core.find(smap, p1__7088_SHARP_);
                return cljs.core.truth_(temp__5733__auto__) ? cljs.core.second(temp__5733__auto__) : p1__7088_SHARP_;
              }, coll);
            };
            cljs.core.replace.cljs$lang$maxFixedArity = 2;
            cljs.core.distinct = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
              return function(rf) {
                return function(seen) {
                  return function() {
                    var G__8586 = null, G__8586__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8586__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8586__2 = function(result, input) {
                      if (cljs.core.contains_QMARK_(cljs.core.deref(seen), input)) {
                        return result;
                      }
                      seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
                      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8586 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8586__0.call(this);
                        case 1:
                          return G__8586__1.call(this, result);
                        case 2:
                          return G__8586__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8586.cljs$core$IFn$_invoke$arity$0 = G__8586__0;
                    G__8586.cljs$core$IFn$_invoke$arity$1 = G__8586__1;
                    G__8586.cljs$core$IFn$_invoke$arity$2 = G__8586__2;
                    return G__8586;
                  }();
                }(cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY));
              };
            };
            cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return function cljs$core$step(xs, seen) {
                return new cljs.core.LazySeq(null, function() {
                  var JSCompiler_inline_result;
                  a: {
                    var p__7098 = xs;
                    for (JSCompiler_inline_result = seen;;) {
                      var vec__7099 = p__7098;
                      p__7098 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7099, 0, null);
                      if (vec__7099 = cljs.core.seq(vec__7099)) {
                        if (cljs.core.contains_QMARK_(JSCompiler_inline_result, p__7098)) {
                          p__7098 = cljs.core.rest(vec__7099);
                        } else {
                          JSCompiler_inline_result = cljs.core.cons(p__7098, cljs$core$step(cljs.core.rest(vec__7099), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(JSCompiler_inline_result, p__7098)));
                          break a;
                        }
                      } else {
                        JSCompiler_inline_result = null;
                        break a;
                      }
                    }
                  }
                  return JSCompiler_inline_result;
                }, null, null);
              }(coll, cljs.core.PersistentHashSet.EMPTY);
            };
            cljs.core.distinct.cljs$lang$maxFixedArity = 1;
            cljs.core.butlast = function(s) {
              for (var ret = cljs.core.PersistentVector.EMPTY;;) {
                if (cljs.core.next(s)) {
                  ret = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s)), s = cljs.core.next(s);
                } else {
                  return cljs.core.seq(ret);
                }
              }
            };
            cljs.core.name = function(x) {
              if (null != x && (x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$)) {
                return cljs.core._name(x);
              }
              if ("string" === typeof x) {
                return x;
              }
              throw Error(["Doesn't support name: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
            };
            cljs.core.zipmap = function(keys, vals) {
              var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
              keys = cljs.core.seq(keys);
              for (vals = cljs.core.seq(vals);;) {
                if (keys && vals) {
                  map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(keys), cljs.core.first(vals)), keys = cljs.core.next(keys), vals = cljs.core.next(vals);
                } else {
                  return cljs.core.persistent_BANG_(map);
                }
              }
            };
            cljs.core.max_key = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8595 = arguments.length, i__4731__auto___8596 = 0;;) {
                    if (i__4731__auto___8596 < len__4730__auto___8595) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8596]), i__4731__auto___8596 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
              return x;
            };
            cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
              return (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y)) ? x : y;
            };
            cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__7103_SHARP_, p2__7104_SHARP_) {
                return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__7103_SHARP_, p2__7104_SHARP_);
              }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
            };
            cljs.core.max_key.cljs$lang$applyTo = function(seq7106) {
              var G__7107 = cljs.core.first(seq7106), seq7106__$1 = cljs.core.next(seq7106);
              seq7106 = cljs.core.first(seq7106__$1);
              var seq7106__$2 = cljs.core.next(seq7106__$1);
              seq7106__$1 = cljs.core.first(seq7106__$2);
              seq7106__$2 = cljs.core.next(seq7106__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7107, seq7106, seq7106__$1, seq7106__$2);
            };
            cljs.core.max_key.cljs$lang$maxFixedArity = 3;
            cljs.core.min_key = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8599 = arguments.length, i__4731__auto___8600 = 0;;) {
                    if (i__4731__auto___8600 < len__4730__auto___8599) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8600]), i__4731__auto___8600 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
              return x;
            };
            cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
              return (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y)) ? x : y;
            };
            cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__7111_SHARP_, p2__7112_SHARP_) {
                return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__7111_SHARP_, p2__7112_SHARP_);
              }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
            };
            cljs.core.min_key.cljs$lang$applyTo = function(seq7114) {
              var G__7115 = cljs.core.first(seq7114), seq7114__$1 = cljs.core.next(seq7114);
              seq7114 = cljs.core.first(seq7114__$1);
              var seq7114__$2 = cljs.core.next(seq7114__$1);
              seq7114__$1 = cljs.core.first(seq7114__$2);
              seq7114__$2 = cljs.core.next(seq7114__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7115, seq7114, seq7114__$1, seq7114__$2);
            };
            cljs.core.min_key.cljs$lang$maxFixedArity = 3;
            cljs.core.ArrayList = function(arr) {
              this.arr = arr;
            };
            cljs.core.ArrayList.prototype.add = function(x) {
              return this.arr.push(x);
            };
            cljs.core.ArrayList.prototype.size = function() {
              return this.arr.length;
            };
            cljs.core.ArrayList.prototype.clear = function() {
              return this.arr = [];
            };
            cljs.core.ArrayList.prototype.isEmpty = function() {
              return 0 === this.arr.length;
            };
            cljs.core.ArrayList.prototype.toArray = function() {
              return this.arr;
            };
            cljs.core.ArrayList.getBasis = function() {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.ArrayList.cljs$lang$type = !0;
            cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
            cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/ArrayList");
            };
            cljs.core.__GT_ArrayList = function(arr) {
              return new cljs.core.ArrayList(arr);
            };
            cljs.core.array_list = function() {
              return new cljs.core.ArrayList([]);
            };
            cljs.core.partition_all = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
              return function(rf) {
                return function(a) {
                  return function() {
                    var G__8603 = null, G__8603__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8603__1 = function(result) {
                      if (!cljs.core.truth_(a.isEmpty())) {
                        var v = cljs.core.vec(a.toArray());
                        a.clear();
                        result = cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
                      }
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8603__2 = function(result, input) {
                      a.add(input);
                      return n === a.size() ? (input = cljs.core.vec(a.toArray()), a.clear(), rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input)) : result;
                    };
                    G__8603 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8603__0.call(this);
                        case 1:
                          return G__8603__1.call(this, result);
                        case 2:
                          return G__8603__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8603.cljs$core$IFn$_invoke$arity$0 = G__8603__0;
                    G__8603.cljs$core$IFn$_invoke$arity$1 = G__8603__1;
                    G__8603.cljs$core$IFn$_invoke$arity$2 = G__8603__2;
                    return G__8603;
                  }();
                }(cljs.core.array_list());
              };
            };
            cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
            };
            cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                return temp__5735__auto__ ? cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, temp__5735__auto__), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, temp__5735__auto__))) : null;
              }, null, null);
            };
            cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
            cljs.core.take_while = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
              return function(rf) {
                return function() {
                  var G__8605 = null, G__8605__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8605__1 = function(result) {
                    return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8605__2 = function(result, input) {
                    return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input)) ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : cljs.core.reduced(result);
                  };
                  G__8605 = function(result, input) {
                    switch(arguments.length) {
                      case 0:
                        return G__8605__0.call(this);
                      case 1:
                        return G__8605__1.call(this, result);
                      case 2:
                        return G__8605__2.call(this, result, input);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8605.cljs$core$IFn$_invoke$arity$0 = G__8605__0;
                  G__8605.cljs$core$IFn$_invoke$arity$1 = G__8605__1;
                  G__8605.cljs$core$IFn$_invoke$arity$2 = G__8605__2;
                  return G__8605;
                }();
              };
            };
            cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                return temp__5735__auto__ ? cljs.core.truth_(function() {
                  var G__7123 = cljs.core.first(temp__5735__auto__);
                  return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__7123) : pred.call(null, G__7123);
                }()) ? cljs.core.cons(cljs.core.first(temp__5735__auto__), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(temp__5735__auto__))) : null : null;
              }, null, null);
            };
            cljs.core.take_while.cljs$lang$maxFixedArity = 2;
            cljs.core.mk_bound_fn = function(sc, test, key) {
              return function(e) {
                var comp = cljs.core._comparator(sc);
                e = cljs.core._entry_key(sc, e);
                comp = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(e, key) : comp.call(null, e, key);
                return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(comp, 0) : test.call(null, comp, 0);
              };
            };
            cljs.core.subseq = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 5:
                  return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
              var include = cljs.core.mk_bound_fn(sc, test, key);
              return cljs.core.truth_(function() {
                var fexpr__7130 = cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._GT_, cljs.core._GT__EQ_]);
                return fexpr__7130.cljs$core$IFn$_invoke$arity$1 ? fexpr__7130.cljs$core$IFn$_invoke$arity$1(test) : fexpr__7130.call(null, test);
              }()) ? (sc = cljs.core._sorted_seq_from(sc, key, !0), cljs.core.truth_(sc) ? (key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(sc, 0, null), cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(key) : include.call(null, key)) ? sc : cljs.core.next(sc)) : null) : cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, !0));
            };
            cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
              var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, start_key, !0);
              if (cljs.core.truth_(temp__5735__auto__)) {
                var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(temp__5735__auto__, 0, null);
                return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(function() {
                  var fexpr__7137 = cljs.core.mk_bound_fn(sc, start_test, start_key);
                  return fexpr__7137.cljs$core$IFn$_invoke$arity$1 ? fexpr__7137.cljs$core$IFn$_invoke$arity$1(e) : fexpr__7137.call(null, e);
                }()) ? temp__5735__auto__ : cljs.core.next(temp__5735__auto__));
              }
              return null;
            };
            cljs.core.subseq.cljs$lang$maxFixedArity = 5;
            cljs.core.rsubseq = function(var_args) {
              switch(arguments.length) {
                case 3:
                  return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                case 5:
                  return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
              var include = cljs.core.mk_bound_fn(sc, test, key);
              return cljs.core.truth_(function() {
                var fexpr__7140 = cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._LT_, cljs.core._LT__EQ_]);
                return fexpr__7140.cljs$core$IFn$_invoke$arity$1 ? fexpr__7140.cljs$core$IFn$_invoke$arity$1(test) : fexpr__7140.call(null, test);
              }()) ? (sc = cljs.core._sorted_seq_from(sc, key, !1), cljs.core.truth_(sc) ? (key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(sc, 0, null), cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(key) : include.call(null, key)) ? sc : cljs.core.next(sc)) : null) : cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, !1));
            };
            cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
              var temp__5735__auto__ = cljs.core._sorted_seq_from(sc, end_key, !1);
              if (cljs.core.truth_(temp__5735__auto__)) {
                var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(temp__5735__auto__, 0, null);
                return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(function() {
                  var fexpr__7147 = cljs.core.mk_bound_fn(sc, end_test, end_key);
                  return fexpr__7147.cljs$core$IFn$_invoke$arity$1 ? fexpr__7147.cljs$core$IFn$_invoke$arity$1(e) : fexpr__7147.call(null, e);
                }()) ? temp__5735__auto__ : cljs.core.next(temp__5735__auto__));
              }
              return null;
            };
            cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
            cljs.core.RangeChunk = function(start, step, count) {
              this.start = start;
              this.step = step;
              this.count = count;
              this.cljs$lang$protocol_mask$partition0$ = 82;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.RangeChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
              return this.count;
            };
            cljs.core.RangeChunk.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
              return this.start;
            };
            cljs.core.RangeChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
              return this.start + i * this.step;
            };
            cljs.core.RangeChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
              return 0 <= i && i < this.count ? this.start + i * this.step : not_found;
            };
            cljs.core.RangeChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.RangeChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
              if (1 >= this.count) {
                throw Error("-drop-first of empty chunk");
              }
              return new cljs.core.RangeChunk(this.start + this.step, this.step, this.count - 1);
            };
            cljs.core.RangeChunk.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$start, cljs$cst$symbol$step, cljs$cst$symbol$count], null);
            };
            cljs.core.RangeChunk.cljs$lang$type = !0;
            cljs.core.RangeChunk.cljs$lang$ctorStr = "cljs.core/RangeChunk";
            cljs.core.RangeChunk.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RangeChunk");
            };
            cljs.core.__GT_RangeChunk = function(start, step, count) {
              return new cljs.core.RangeChunk(start, step, count);
            };
            cljs.core.RangeIterator = function(i, end, step) {
              this.i = i;
              this.end = end;
              this.step = step;
            };
            cljs.core.RangeIterator.prototype.hasNext = function() {
              return 0 < this.step ? this.i < this.end : this.i > this.end;
            };
            cljs.core.RangeIterator.prototype.next = function() {
              var ret = this.i;
              this.i += this.step;
              return ret;
            };
            cljs.core.RangeIterator.getBasis = function() {
              return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$i, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs$cst$symbol$end, cljs$cst$symbol$step], null);
            };
            cljs.core.RangeIterator.cljs$lang$type = !0;
            cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
            cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/RangeIterator");
            };
            cljs.core.__GT_RangeIterator = function(i, end, step) {
              return new cljs.core.RangeIterator(i, end, step);
            };
            cljs.core.Range = function(meta, start, end, step, chunk, chunk_next, __hash) {
              this.meta = meta;
              this.start = start;
              this.end = end;
              this.step = step;
              this.chunk = chunk;
              this.chunk_next = chunk_next;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 32375006;
              this.cljs$lang$protocol_mask$partition1$ = 140800;
            };
            cljs.core.Range.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.Range.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.Range.prototype.indexOf = function() {
              var G__8608 = null, G__8608__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8608__2 = function(x, start__$1) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start__$1);
              };
              G__8608 = function(x, start__$1) {
                switch(arguments.length) {
                  case 1:
                    return G__8608__1.call(this, x);
                  case 2:
                    return G__8608__2.call(this, x, start__$1);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8608.cljs$core$IFn$_invoke$arity$1 = G__8608__1;
              G__8608.cljs$core$IFn$_invoke$arity$2 = G__8608__2;
              return G__8608;
            }();
            cljs.core.Range.prototype.lastIndexOf = function() {
              var G__8609 = null, G__8609__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8609__2 = function(x, start__$1) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start__$1);
              };
              G__8609 = function(x, start__$1) {
                switch(arguments.length) {
                  case 1:
                    return G__8609__1.call(this, x);
                  case 2:
                    return G__8609__2.call(this, x, start__$1);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8609.cljs$core$IFn$_invoke$arity$1 = G__8609__1;
              G__8609.cljs$core$IFn$_invoke$arity$2 = G__8609__2;
              return G__8609;
            }();
            cljs.core.Range.prototype.forceChunk = function() {
              if (null == this.chunk) {
                var count = this.cljs$core$ICounted$_count$arity$1(null);
                return 32 < count ? (this.chunk_next = new cljs.core.Range(null, this.start + 32 * this.step, this.end, this.step, null, null, null), this.chunk = new cljs.core.RangeChunk(this.start, this.step, 32)) : this.chunk = new cljs.core.RangeChunk(this.start, this.step, count);
              }
              return null;
            };
            cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
              if (0 <= n && n < this.cljs$core$ICounted$_count$arity$1(null)) {
                return this.start + n * this.step;
              }
              if (0 <= n && this.start > this.end && 0 === this.step) {
                return this.start;
              }
              throw Error("Index out of bounds");
            };
            cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
              return 0 <= n && n < this.cljs$core$ICounted$_count$arity$1(null) ? this.start + n * this.step : 0 <= n && this.start > this.end && 0 === this.step ? this.start : not_found;
            };
            cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
              return new cljs.core.RangeIterator(this.start, this.end, this.step);
            };
            cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
              return this.meta;
            };
            cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
              return new cljs.core.Range(this.meta, this.start, this.end, this.step, this.chunk, this.chunk_next, this.__hash);
            };
            cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
              return 0 < this.step ? this.start + this.step < this.end ? new cljs.core.Range(null, this.start + this.step, this.end, this.step, null, null, null) : null : this.start + this.step > this.end ? new cljs.core.Range(null, this.start + this.step, this.end, this.step, null, null, null) : null;
            };
            cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
              return Math.ceil((this.end - this.start) / this.step);
            };
            cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
              rng = this.__hash;
              return null != rng ? rng : this.__hash = rng = cljs.core.hash_ordered_coll(this);
            };
            cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
              return cljs.core.equiv_sequential(this, other);
            };
            cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
              return cljs.core.List.EMPTY;
            };
            cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
              return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(this, f);
            };
            cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
              for (rng = this.start;;) {
                if (0 < this.step ? rng < this.end : rng > this.end) {
                  init = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(init, rng) : f.call(null, init, rng);
                  if (cljs.core.reduced_QMARK_(init)) {
                    return cljs.core.deref(init);
                  }
                  rng += this.step;
                } else {
                  return init;
                }
              }
            };
            cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
              return this.start;
            };
            cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
              rng = this.cljs$core$INext$_next$arity$1(null);
              return null == rng ? cljs.core.List.EMPTY : rng;
            };
            cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
              return this;
            };
            cljs.core.Range.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(rng) {
              this.forceChunk();
              return this.chunk;
            };
            cljs.core.Range.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(rng) {
              this.forceChunk();
              return null == this.chunk_next ? cljs.core.List.EMPTY : this.chunk_next;
            };
            cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, new_meta) {
              return new_meta === this.meta ? this : new cljs.core.Range(new_meta, this.start, this.end, this.step, this.chunk, this.chunk_next, this.__hash);
            };
            cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
              return cljs.core.cons(o, this);
            };
            cljs.core.Range.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(rng) {
              return cljs.core.seq(this.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null));
            };
            cljs.core.Range.getBasis = function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$meta, cljs$cst$symbol$start, cljs$cst$symbol$end, cljs$cst$symbol$step, cljs.core.with_meta(cljs$cst$symbol$chunk, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$chunk_DASH_next, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 
              1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Range.cljs$lang$type = !0;
            cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
            cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Range");
            };
            cljs.core.__GT_Range = function(meta, start, end, step, chunk, chunk_next, __hash) {
              return new cljs.core.Range(meta, start, end, step, chunk, chunk_next, __hash);
            };
            var G__7149_8612 = cljs.core.Range.prototype, G__7150_8613 = cljs.core.ITER_SYMBOL, G__7151_8614 = function(G__7149_8612, G__7150_8613) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7149_8612, G__7150_8613, G__7151_8614);
            cljs.core.range = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
            };
            cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
              return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
            };
            cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
              return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
            };
            cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
              return 0 < step ? end <= start ? cljs.core.List.EMPTY : new cljs.core.Range(null, start, end, step, null, null, null) : 0 > step ? end >= start ? cljs.core.List.EMPTY : new cljs.core.Range(null, start, end, step, null, null, null) : end === start ? cljs.core.List.EMPTY : cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(start);
            };
            cljs.core.range.cljs$lang$maxFixedArity = 3;
            cljs.core.take_nth = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
              return function(rf) {
                return function(ia) {
                  return function() {
                    var G__8617 = null, G__8617__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8617__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8617__2 = function(result, input) {
                      var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
                      return 0 === cljs.core.rem(i, n) ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
                    };
                    G__8617 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8617__0.call(this);
                        case 1:
                          return G__8617__1.call(this, result);
                        case 2:
                          return G__8617__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8617.cljs$core$IFn$_invoke$arity$0 = G__8617__0;
                    G__8617.cljs$core$IFn$_invoke$arity$1 = G__8617__1;
                    G__8617.cljs$core$IFn$_invoke$arity$2 = G__8617__2;
                    return G__8617;
                  }();
                }(cljs.core.volatile_BANG_(-1));
              };
            };
            cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                return temp__5735__auto__ ? cljs.core.cons(cljs.core.first(temp__5735__auto__), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, temp__5735__auto__))) : null;
              }, null, null);
            };
            cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
            cljs.core.split_with = function(pred, coll) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
            };
            cljs.core.partition_by = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function(rf) {
                var a$jscomp$0 = cljs.core.array_list(), pa = cljs.core.volatile_BANG_(cljs$cst$keyword$cljs_DOT_core_SLASH_none);
                return function(a, pa) {
                  return function() {
                    var G__8619 = null, G__8619__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8619__1 = function(result) {
                      if (!cljs.core.truth_(a.isEmpty())) {
                        var v = cljs.core.vec(a.toArray());
                        a.clear();
                        result = cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
                      }
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8619__2 = function(result, input) {
                      var pval = cljs.core.deref(pa), val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
                      cljs.core.vreset_BANG_(pa, val);
                      if (cljs.core.keyword_identical_QMARK_(pval, cljs$cst$keyword$cljs_DOT_core_SLASH_none) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
                        return a.add(input), result;
                      }
                      pval = cljs.core.vec(a.toArray());
                      a.clear();
                      result = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, pval) : rf.call(null, result, pval);
                      cljs.core.reduced_QMARK_(result) || a.add(input);
                      return result;
                    };
                    G__8619 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8619__0.call(this);
                        case 1:
                          return G__8619__1.call(this, result);
                        case 2:
                          return G__8619__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8619.cljs$core$IFn$_invoke$arity$0 = G__8619__0;
                    G__8619.cljs$core$IFn$_invoke$arity$1 = G__8619__1;
                    G__8619.cljs$core$IFn$_invoke$arity$2 = G__8619__2;
                    return G__8619;
                  }();
                }(a$jscomp$0, pa);
              };
            };
            cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__$jscomp$0 = cljs.core.seq(coll);
                if (temp__5735__auto__$jscomp$0) {
                  var fst = cljs.core.first(temp__5735__auto__$jscomp$0), fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst), run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__5735__auto__) {
                    return function(p1__7156_SHARP_) {
                      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__7156_SHARP_) : f.call(null, p1__7156_SHARP_));
                    };
                  }(fst, fv), cljs.core.next(temp__5735__auto__$jscomp$0)));
                  return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, new cljs.core.LazySeq(null, function(fst, fv, run, s, temp__5735__auto__) {
                    return function() {
                      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s);
                    };
                  }(fst, fv, run, temp__5735__auto__$jscomp$0), null, null)));
                }
                return null;
              }, null, null);
            };
            cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
            cljs.core.frequencies = function(coll) {
              return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
                return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
              }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
            };
            cljs.core.reductions = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
              return new cljs.core.LazySeq(null, function() {
                var temp__5733__auto__ = cljs.core.seq(coll);
                return temp__5733__auto__ ? cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(temp__5733__auto__), cljs.core.rest(temp__5733__auto__)) : new cljs.core.List(null, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), null, 1, null);
              }, null, null);
            };
            cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
              return cljs.core.reduced_QMARK_(init) ? new cljs.core.List(null, cljs.core.deref(init), null, 1, null) : cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
                var temp__5735__auto__ = cljs.core.seq(coll);
                return temp__5735__auto__ ? cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
                  var G__7162 = cljs.core.first(temp__5735__auto__);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(init, G__7162) : f.call(null, init, G__7162);
                }(), cljs.core.rest(temp__5735__auto__)) : null;
              }, null, null));
            };
            cljs.core.reductions.cljs$lang$maxFixedArity = 3;
            cljs.core.juxt = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8622 = arguments.length, i__4731__auto___8623 = 0;;) {
                    if (i__4731__auto___8623 < len__4730__auto___8622) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8623]), i__4731__auto___8623 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(3), 0, null);
                  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], args_arr__4751__auto__);
              }
            };
            cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
              return function() {
                var G__8625 = null, G__8625__0 = function() {
                  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
                }, G__8625__1 = function(x) {
                  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
                }, G__8625__2 = function(x, y) {
                  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
                }, G__8625__3 = function(x, y, z) {
                  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
                }, G__8625__4 = function() {
                  var G__8626__delegate = function(x, y, z, args) {
                    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
                  }, G__8626 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8627__a = Array(arguments.length - 3); args < G__8627__a.length;) {
                        G__8627__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8627__a, 0, null);
                    }
                    return G__8626__delegate.call(this, x, y, z, args);
                  };
                  G__8626.cljs$lang$maxFixedArity = 3;
                  G__8626.cljs$lang$applyTo = function(arglist__8628) {
                    var x = cljs.core.first(arglist__8628);
                    arglist__8628 = cljs.core.next(arglist__8628);
                    var y = cljs.core.first(arglist__8628);
                    arglist__8628 = cljs.core.next(arglist__8628);
                    var z = cljs.core.first(arglist__8628);
                    arglist__8628 = cljs.core.rest(arglist__8628);
                    return G__8626__delegate(x, y, z, arglist__8628);
                  };
                  G__8626.cljs$core$IFn$_invoke$arity$variadic = G__8626__delegate;
                  return G__8626;
                }();
                G__8625 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8625__0.call(this);
                    case 1:
                      return G__8625__1.call(this, x);
                    case 2:
                      return G__8625__2.call(this, x, y);
                    case 3:
                      return G__8625__3.call(this, x, y, z);
                    default:
                      var G__8629 = null;
                      if (3 < arguments.length) {
                        G__8629 = 0;
                        for (var G__8630__a = Array(arguments.length - 3); G__8629 < G__8630__a.length;) {
                          G__8630__a[G__8629] = arguments[G__8629 + 3], ++G__8629;
                        }
                        G__8629 = new cljs.core.IndexedSeq(G__8630__a, 0, null);
                      }
                      return G__8625__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8629);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8625.cljs$lang$maxFixedArity = 3;
                G__8625.cljs$lang$applyTo = G__8625__4.cljs$lang$applyTo;
                G__8625.cljs$core$IFn$_invoke$arity$0 = G__8625__0;
                G__8625.cljs$core$IFn$_invoke$arity$1 = G__8625__1;
                G__8625.cljs$core$IFn$_invoke$arity$2 = G__8625__2;
                G__8625.cljs$core$IFn$_invoke$arity$3 = G__8625__3;
                G__8625.cljs$core$IFn$_invoke$arity$variadic = G__8625__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8625;
              }();
            };
            cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
              return function() {
                var G__8631 = null, G__8631__0 = function() {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
                }, G__8631__1 = function(x) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
                }, G__8631__2 = function(x, y) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
                }, G__8631__3 = function(x, y, z) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
                }, G__8631__4 = function() {
                  var G__8632__delegate = function(x, y, z, args) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
                  }, G__8632 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8633__a = Array(arguments.length - 3); args < G__8633__a.length;) {
                        G__8633__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8633__a, 0, null);
                    }
                    return G__8632__delegate.call(this, x, y, z, args);
                  };
                  G__8632.cljs$lang$maxFixedArity = 3;
                  G__8632.cljs$lang$applyTo = function(arglist__8634) {
                    var x = cljs.core.first(arglist__8634);
                    arglist__8634 = cljs.core.next(arglist__8634);
                    var y = cljs.core.first(arglist__8634);
                    arglist__8634 = cljs.core.next(arglist__8634);
                    var z = cljs.core.first(arglist__8634);
                    arglist__8634 = cljs.core.rest(arglist__8634);
                    return G__8632__delegate(x, y, z, arglist__8634);
                  };
                  G__8632.cljs$core$IFn$_invoke$arity$variadic = G__8632__delegate;
                  return G__8632;
                }();
                G__8631 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8631__0.call(this);
                    case 1:
                      return G__8631__1.call(this, x);
                    case 2:
                      return G__8631__2.call(this, x, y);
                    case 3:
                      return G__8631__3.call(this, x, y, z);
                    default:
                      var G__8635 = null;
                      if (3 < arguments.length) {
                        G__8635 = 0;
                        for (var G__8636__a = Array(arguments.length - 3); G__8635 < G__8636__a.length;) {
                          G__8636__a[G__8635] = arguments[G__8635 + 3], ++G__8635;
                        }
                        G__8635 = new cljs.core.IndexedSeq(G__8636__a, 0, null);
                      }
                      return G__8631__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8635);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8631.cljs$lang$maxFixedArity = 3;
                G__8631.cljs$lang$applyTo = G__8631__4.cljs$lang$applyTo;
                G__8631.cljs$core$IFn$_invoke$arity$0 = G__8631__0;
                G__8631.cljs$core$IFn$_invoke$arity$1 = G__8631__1;
                G__8631.cljs$core$IFn$_invoke$arity$2 = G__8631__2;
                G__8631.cljs$core$IFn$_invoke$arity$3 = G__8631__3;
                G__8631.cljs$core$IFn$_invoke$arity$variadic = G__8631__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8631;
              }();
            };
            cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
              return function() {
                var G__8637 = null, G__8637__0 = function() {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
                }, G__8637__1 = function(x) {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
                }, G__8637__2 = function(x, y) {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
                }, G__8637__3 = function(x, y, z) {
                  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
                }, G__8637__4 = function() {
                  var G__8638__delegate = function(x, y, z, args) {
                    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
                  }, G__8638 = function(x, y, z, var_args) {
                    var args = null;
                    if (3 < arguments.length) {
                      args = 0;
                      for (var G__8639__a = Array(arguments.length - 3); args < G__8639__a.length;) {
                        G__8639__a[args] = arguments[args + 3], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8639__a, 0, null);
                    }
                    return G__8638__delegate.call(this, x, y, z, args);
                  };
                  G__8638.cljs$lang$maxFixedArity = 3;
                  G__8638.cljs$lang$applyTo = function(arglist__8640) {
                    var x = cljs.core.first(arglist__8640);
                    arglist__8640 = cljs.core.next(arglist__8640);
                    var y = cljs.core.first(arglist__8640);
                    arglist__8640 = cljs.core.next(arglist__8640);
                    var z = cljs.core.first(arglist__8640);
                    arglist__8640 = cljs.core.rest(arglist__8640);
                    return G__8638__delegate(x, y, z, arglist__8640);
                  };
                  G__8638.cljs$core$IFn$_invoke$arity$variadic = G__8638__delegate;
                  return G__8638;
                }();
                G__8637 = function(x, y, z, var_args) {
                  switch(arguments.length) {
                    case 0:
                      return G__8637__0.call(this);
                    case 1:
                      return G__8637__1.call(this, x);
                    case 2:
                      return G__8637__2.call(this, x, y);
                    case 3:
                      return G__8637__3.call(this, x, y, z);
                    default:
                      var G__8641 = null;
                      if (3 < arguments.length) {
                        G__8641 = 0;
                        for (var G__8642__a = Array(arguments.length - 3); G__8641 < G__8642__a.length;) {
                          G__8642__a[G__8641] = arguments[G__8641 + 3], ++G__8641;
                        }
                        G__8641 = new cljs.core.IndexedSeq(G__8642__a, 0, null);
                      }
                      return G__8637__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8641);
                  }
                  throw Error("Invalid arity: " + arguments.length);
                };
                G__8637.cljs$lang$maxFixedArity = 3;
                G__8637.cljs$lang$applyTo = G__8637__4.cljs$lang$applyTo;
                G__8637.cljs$core$IFn$_invoke$arity$0 = G__8637__0;
                G__8637.cljs$core$IFn$_invoke$arity$1 = G__8637__1;
                G__8637.cljs$core$IFn$_invoke$arity$2 = G__8637__2;
                G__8637.cljs$core$IFn$_invoke$arity$3 = G__8637__3;
                G__8637.cljs$core$IFn$_invoke$arity$variadic = G__8637__4.cljs$core$IFn$_invoke$arity$variadic;
                return G__8637;
              }();
            };
            cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
              return function(fs__$1$jscomp$0) {
                return function() {
                  var G__8643 = null, G__8643__0 = function() {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                      return function(p1__7163_SHARP_, p2__7164_SHARP_) {
                        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7163_SHARP_, p2__7164_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__7164_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__7164_SHARP_.call(null));
                      };
                    }(), cljs.core.PersistentVector.EMPTY, fs__$1$jscomp$0);
                  }, G__8643__1 = function(x) {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                      return function(p1__7165_SHARP_, p2__7166_SHARP_) {
                        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7165_SHARP_, p2__7166_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__7166_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__7166_SHARP_.call(null, x));
                      };
                    }(), cljs.core.PersistentVector.EMPTY, fs__$1$jscomp$0);
                  }, G__8643__2 = function(x, y) {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                      return function(p1__7167_SHARP_, p2__7168_SHARP_) {
                        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7167_SHARP_, p2__7168_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__7168_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__7168_SHARP_.call(null, x, y));
                      };
                    }(), cljs.core.PersistentVector.EMPTY, fs__$1$jscomp$0);
                  }, G__8643__3 = function(x, y, z) {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                      return function(p1__7169_SHARP_, p2__7170_SHARP_) {
                        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7169_SHARP_, p2__7170_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__7170_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__7170_SHARP_.call(null, x, y, z));
                      };
                    }(), cljs.core.PersistentVector.EMPTY, fs__$1$jscomp$0);
                  }, G__8643__4 = function() {
                    var G__8644__delegate = function(x, y, z, args) {
                      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                        return function(p1__7171_SHARP_, p2__7172_SHARP_) {
                          return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__7171_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__7172_SHARP_, x, y, z, args));
                        };
                      }(), cljs.core.PersistentVector.EMPTY, fs__$1$jscomp$0);
                    }, G__8644 = function(x, y, z, var_args) {
                      var args = null;
                      if (3 < arguments.length) {
                        args = 0;
                        for (var G__8645__a = Array(arguments.length - 3); args < G__8645__a.length;) {
                          G__8645__a[args] = arguments[args + 3], ++args;
                        }
                        args = new cljs.core.IndexedSeq(G__8645__a, 0, null);
                      }
                      return G__8644__delegate.call(this, x, y, z, args);
                    };
                    G__8644.cljs$lang$maxFixedArity = 3;
                    G__8644.cljs$lang$applyTo = function(arglist__8646) {
                      var x = cljs.core.first(arglist__8646);
                      arglist__8646 = cljs.core.next(arglist__8646);
                      var y = cljs.core.first(arglist__8646);
                      arglist__8646 = cljs.core.next(arglist__8646);
                      var z = cljs.core.first(arglist__8646);
                      arglist__8646 = cljs.core.rest(arglist__8646);
                      return G__8644__delegate(x, y, z, arglist__8646);
                    };
                    G__8644.cljs$core$IFn$_invoke$arity$variadic = G__8644__delegate;
                    return G__8644;
                  }();
                  G__8643 = function(x, y, z, var_args) {
                    switch(arguments.length) {
                      case 0:
                        return G__8643__0.call(this);
                      case 1:
                        return G__8643__1.call(this, x);
                      case 2:
                        return G__8643__2.call(this, x, y);
                      case 3:
                        return G__8643__3.call(this, x, y, z);
                      default:
                        var G__8647 = null;
                        if (3 < arguments.length) {
                          G__8647 = 0;
                          for (var G__8648__a = Array(arguments.length - 3); G__8647 < G__8648__a.length;) {
                            G__8648__a[G__8647] = arguments[G__8647 + 3], ++G__8647;
                          }
                          G__8647 = new cljs.core.IndexedSeq(G__8648__a, 0, null);
                        }
                        return G__8643__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8647);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8643.cljs$lang$maxFixedArity = 3;
                  G__8643.cljs$lang$applyTo = G__8643__4.cljs$lang$applyTo;
                  G__8643.cljs$core$IFn$_invoke$arity$0 = G__8643__0;
                  G__8643.cljs$core$IFn$_invoke$arity$1 = G__8643__1;
                  G__8643.cljs$core$IFn$_invoke$arity$2 = G__8643__2;
                  G__8643.cljs$core$IFn$_invoke$arity$3 = G__8643__3;
                  G__8643.cljs$core$IFn$_invoke$arity$variadic = G__8643__4.cljs$core$IFn$_invoke$arity$variadic;
                  return G__8643;
                }();
              }(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs));
            };
            cljs.core.juxt.cljs$lang$applyTo = function(seq7174) {
              var G__7175 = cljs.core.first(seq7174), seq7174__$1 = cljs.core.next(seq7174);
              seq7174 = cljs.core.first(seq7174__$1);
              var seq7174__$2 = cljs.core.next(seq7174__$1);
              seq7174__$1 = cljs.core.first(seq7174__$2);
              seq7174__$2 = cljs.core.next(seq7174__$2);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7175, seq7174, seq7174__$1, seq7174__$2);
            };
            cljs.core.juxt.cljs$lang$maxFixedArity = 3;
            cljs.core.dorun = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              for (;;) {
                if (coll = cljs.core.seq(coll)) {
                  coll = cljs.core.next(coll);
                } else {
                  return null;
                }
              }
            };
            cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              for (;;) {
                if (cljs.core.seq(coll) && 0 < n) {
                  --n, coll = cljs.core.next(coll);
                } else {
                  return null;
                }
              }
            };
            cljs.core.dorun.cljs$lang$maxFixedArity = 2;
            cljs.core.doall = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
              return coll;
            };
            cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
              cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
              return coll;
            };
            cljs.core.doall.cljs$lang$maxFixedArity = 2;
            cljs.core.regexp_QMARK_ = function(x) {
              return x instanceof RegExp;
            };
            cljs.core.re_matches = function(re, s) {
              if ("string" === typeof s) {
                return re = re.exec(s), cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(re), s) ? 1 === cljs.core.count(re) ? cljs.core.first(re) : cljs.core.vec(re) : null;
              }
              throw new TypeError("re-matches must match against a string.");
            };
            cljs.core.re_find = function(re, s) {
              if ("string" === typeof s) {
                return re = re.exec(s), null == re ? null : 1 === cljs.core.count(re) ? cljs.core.first(re) : cljs.core.vec(re);
              }
              throw new TypeError("re-find must match against a string.");
            };
            cljs.core.re_seq_STAR_ = function(re, s) {
              var temp__5739__auto__ = re.exec(s);
              if (null == temp__5739__auto__) {
                return null;
              }
              var match_str = temp__5739__auto__[0], match_vals = 1 === temp__5739__auto__.length ? match_str : cljs.core.vec(temp__5739__auto__);
              return cljs.core.cons(match_vals, new cljs.core.LazySeq(null, function(match_str, match_vals, matches, temp__5739__auto__) {
                return function() {
                  var y__4220__auto__ = match_str.length;
                  y__4220__auto__ = matches.index + (1 > y__4220__auto__ ? 1 : y__4220__auto__);
                  return y__4220__auto__ <= s.length ? (y__4220__auto__ = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, y__4220__auto__), cljs.core.re_seq_STAR_.cljs$core$IFn$_invoke$arity$2 ? cljs.core.re_seq_STAR_.cljs$core$IFn$_invoke$arity$2(re, y__4220__auto__) : cljs.core.re_seq_STAR_.call(null, re, y__4220__auto__)) : null;
                };
              }(match_str, match_vals, temp__5739__auto__), null, null));
            };
            cljs.core.re_seq = function(re, s) {
              if ("string" === typeof s) {
                return cljs.core.re_seq_STAR_(re, s);
              }
              throw new TypeError("re-seq must match against a string.");
            };
            cljs.core.re_pattern = function(s) {
              if (s instanceof RegExp) {
                return s;
              }
              var vec__7185 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s), prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7185, 0, null);
              vec__7185 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7185, 1, null);
              s = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
              prefix = RegExp;
              vec__7185 = cljs.core.truth_(vec__7185) ? vec__7185 : "";
              return new prefix(s, vec__7185);
            };
            cljs.core.pr_sequential_writer = function(writer, print_one, begin, sep, end, opts, coll) {
              var _STAR_print_level_STAR__orig_val__7188 = cljs.core._STAR_print_level_STAR_;
              cljs.core._STAR_print_level_STAR_ = null == cljs.core._STAR_print_level_STAR_ ? null : cljs.core._STAR_print_level_STAR_ - 1;
              try {
                if (null != cljs.core._STAR_print_level_STAR_ && 0 > cljs.core._STAR_print_level_STAR_) {
                  return cljs.core._write(writer, "#");
                }
                cljs.core._write(writer, begin);
                if (0 === cljs$cst$keyword$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts)) {
                  cljs.core.seq(coll) && cljs.core._write(writer, function() {
                    var or__4131__auto__ = cljs$cst$keyword$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
                    return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : "...";
                  }());
                } else {
                  if (cljs.core.seq(coll)) {
                    var G__7190_8654 = cljs.core.first(coll);
                    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__7190_8654, writer, opts) : print_one.call(null, G__7190_8654, writer, opts);
                  }
                  for (var coll_8657__$1 = cljs.core.next(coll), n_8658 = cljs$cst$keyword$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts) - 1;;) {
                    if (!coll_8657__$1 || null != n_8658 && 0 === n_8658) {
                      cljs.core.seq(coll_8657__$1) && 0 === n_8658 && (cljs.core._write(writer, sep), cljs.core._write(writer, function() {
                        var or__4131__auto__ = cljs$cst$keyword$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
                        return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : "...";
                      }()));
                      break;
                    } else {
                      cljs.core._write(writer, sep);
                      var G__7193_8659 = cljs.core.first(coll_8657__$1);
                      begin = writer;
                      coll = opts;
                      print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__7193_8659, begin, coll) : print_one.call(null, G__7193_8659, begin, coll);
                      var G__8662 = cljs.core.next(coll_8657__$1);
                      begin = n_8658 - 1;
                      coll_8657__$1 = G__8662;
                      n_8658 = begin;
                    }
                  }
                }
                return cljs.core._write(writer, end);
              } finally {
                cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR__orig_val__7188;
              }
            };
            cljs.core.write_all = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8664 = arguments.length, i__4731__auto___8665 = 0;;) {
                if (i__4731__auto___8665 < len__4730__auto___8664) {
                  args__4736__auto__.push(arguments[i__4731__auto___8665]), i__4731__auto___8665 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
              ss = cljs.core.seq(ss);
              for (var chunk__7199 = null, count__7200 = 0, i__7201 = 0;;) {
                if (i__7201 < count__7200) {
                  var s = chunk__7199.cljs$core$IIndexed$_nth$arity$2(null, i__7201);
                  cljs.core._write(writer, s);
                  i__7201 += 1;
                } else {
                  if (ss = cljs.core.seq(ss)) {
                    chunk__7199 = ss, cljs.core.chunked_seq_QMARK_(chunk__7199) ? (ss = cljs.core.chunk_first(chunk__7199), count__7200 = cljs.core.chunk_rest(chunk__7199), chunk__7199 = ss, s = cljs.core.count(ss), ss = count__7200, count__7200 = s) : (s = cljs.core.first(chunk__7199), cljs.core._write(writer, s), ss = cljs.core.next(chunk__7199), chunk__7199 = null, count__7200 = 0), i__7201 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.write_all.cljs$lang$maxFixedArity = 1;
            cljs.core.write_all.cljs$lang$applyTo = function(seq7196) {
              var G__7197 = cljs.core.first(seq7196);
              seq7196 = cljs.core.next(seq7196);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7197, seq7196);
            };
            cljs.core.string_print = function(x) {
              if (null == cljs.core._STAR_print_fn_STAR_) {
                throw Error("No *print-fn* fn set for evaluation environment");
              }
              cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
              return null;
            };
            cljs.core.flush = function() {
              return null;
            };
            cljs.core.char_escapes = function() {
              return {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
            }();
            cljs.core.quote_string = function(s) {
              return ['"', cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(/[\\"\b\f\n\r\t]/g, function(match) {
                return cljs.core.char_escapes[match];
              })), '"'].join("");
            };
            cljs.core.print_meta_QMARK_ = function(opts, obj) {
              return (opts = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, cljs$cst$keyword$meta))) ? (opts = null != obj ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$ ? !0 : !1 : !1) ? null != cljs.core.meta(obj) : opts : opts;
            };
            cljs.core.pr_writer_impl = function(obj, writer, opts) {
              if (null == obj) {
                return cljs.core._write(writer, "nil");
              }
              if (cljs.core.print_meta_QMARK_(opts, obj)) {
                cljs.core._write(writer, "^");
                var G__7207_8679 = cljs.core.meta(obj);
                cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__7207_8679, writer, opts) : cljs.core.pr_writer.call(null, G__7207_8679, writer, opts);
                cljs.core._write(writer, " ");
              }
              if (obj.cljs$lang$type) {
                return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
              }
              if (null != obj ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IPrintWithWriter$ || (obj.cljs$lang$protocol_mask$partition0$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, obj)) : cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, obj)) {
                return cljs.core._pr_writer(obj, writer, opts);
              }
              if (!0 === obj || !1 === obj) {
                return cljs.core._write(writer, cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              }
              if ("number" === typeof obj) {
                return cljs.core._write(writer, isNaN(obj) ? "##NaN" : obj === Number.POSITIVE_INFINITY ? "##Inf" : obj === Number.NEGATIVE_INFINITY ? "##-Inf" : cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              }
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                G__7207_8679 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  var JSCompiler_temp_const = cljs.core.MapEntry;
                  var JSCompiler_inline_result = null != cljs.core.re_matches(/[A-Za-z_\*\+\?!\-'][\w\*\+\?!\-']*/, k) ? cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k) : k;
                  return new JSCompiler_temp_const(JSCompiler_inline_result, obj[k], null);
                }, cljs.core.js_keys(obj));
                var G__7212 = cljs.core.pr_writer;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__7207_8679, G__7212, writer, opts) : cljs.core.print_map.call(null, G__7207_8679, G__7212, writer, opts);
              }
              if (cljs.core.array_QMARK_(obj)) {
                return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
              }
              if (goog.isString(obj)) {
                return cljs.core.truth_(cljs$cst$keyword$readably.cljs$core$IFn$_invoke$arity$1(opts)) ? cljs.core._write(writer, cljs.core.quote_string(obj)) : cljs.core._write(writer, obj);
              }
              if (goog.isFunction(obj)) {
                var name = obj.name;
                opts = cljs.core.truth_(function() {
                  var or__4131__auto__ = null == name;
                  return or__4131__auto__ ? or__4131__auto__ : goog.string.isEmpty(name);
                }()) ? "Function" : name;
                return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", opts, cljs.core._STAR_print_fn_bodies_STAR_ ? [' "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), '"'].join("") : "", "]"], 0));
              }
              if (obj instanceof Date) {
                return opts = function(n, len) {
                  for (n = cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);;) {
                    if (cljs.core.count(n) < len) {
                      n = ["0", n].join("");
                    } else {
                      return n;
                    }
                  }
                }, cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(['#inst "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", opts(obj.getUTCMonth() + 1, 2), "-", opts(obj.getUTCDate(), 2), "T", opts(obj.getUTCHours(), 2), ":", opts(obj.getUTCMinutes(), 2), ":", opts(obj.getUTCSeconds(), 2), ".", opts(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
              }
              if (cljs.core.regexp_QMARK_(obj)) {
                return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(['#"', obj.source, '"'], 0));
              }
              if (cljs.core.truth_(function() {
                var G__7216__$1 = null == obj ? null : obj.constructor;
                return null == G__7216__$1 ? null : G__7216__$1.cljs$lang$ctorStr;
              }())) {
                return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", obj.constructor.cljs$lang$ctorStr.replace(/\//g, "."), "]"], 0));
              }
              name = function() {
                var G__7217__$1 = null == obj ? null : obj.constructor;
                return null == G__7217__$1 ? null : G__7217__$1.name;
              }();
              opts = cljs.core.truth_(function() {
                var or__4131__auto__ = null == name;
                return or__4131__auto__ ? or__4131__auto__ : goog.string.isEmpty(name);
              }()) ? "Object" : name;
              return null == obj.constructor ? cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", opts, "]"], 0)) : cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["#object[", opts, " ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "]"], 0));
            };
            cljs.core.pr_writer = function(obj, writer, opts) {
              var temp__5733__auto__ = cljs$cst$keyword$alt_DASH_impl.cljs$core$IFn$_invoke$arity$1(opts);
              return cljs.core.truth_(temp__5733__auto__) ? (opts = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, cljs$cst$keyword$fallback_DASH_impl, cljs.core.pr_writer_impl), temp__5733__auto__.cljs$core$IFn$_invoke$arity$3 ? temp__5733__auto__.cljs$core$IFn$_invoke$arity$3(obj, writer, opts) : temp__5733__auto__.call(null, obj, writer, opts)) : cljs.core.pr_writer_impl(obj, writer, opts);
            };
            cljs.core.pr_seq_writer = function(objs, writer, opts) {
              cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
              objs = cljs.core.seq(cljs.core.next(objs));
              for (var chunk__7222 = null, count__7223 = 0, i__7224 = 0;;) {
                if (i__7224 < count__7223) {
                  var obj = chunk__7222.cljs$core$IIndexed$_nth$arity$2(null, i__7224);
                  cljs.core._write(writer, " ");
                  cljs.core.pr_writer(obj, writer, opts);
                  i__7224 += 1;
                } else {
                  if (objs = cljs.core.seq(objs)) {
                    chunk__7222 = objs, cljs.core.chunked_seq_QMARK_(chunk__7222) ? (objs = cljs.core.chunk_first(chunk__7222), count__7223 = cljs.core.chunk_rest(chunk__7222), chunk__7222 = objs, obj = cljs.core.count(objs), objs = count__7223, count__7223 = obj) : (obj = cljs.core.first(chunk__7222), cljs.core._write(writer, " "), cljs.core.pr_writer(obj, writer, opts), objs = cljs.core.next(chunk__7222), chunk__7222 = null, count__7223 = 0), i__7224 = 0;
                  } else {
                    return null;
                  }
                }
              }
            };
            cljs.core.pr_sb_with_opts = function(objs, opts) {
              var sb = new goog.string.StringBuffer, writer = new cljs.core.StringBufferWriter(sb);
              cljs.core.pr_seq_writer(objs, writer, opts);
              writer.cljs$core$IWriter$_flush$arity$1(null);
              return sb;
            };
            cljs.core.pr_str_with_opts = function(objs, opts) {
              return cljs.core.empty_QMARK_(objs) ? "" : cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts(objs, opts));
            };
            cljs.core.prn_str_with_opts = function(objs, opts) {
              if (cljs.core.empty_QMARK_(objs)) {
                return "\n";
              }
              objs = cljs.core.pr_sb_with_opts(objs, opts);
              objs.append("\n");
              return cljs.core.str.cljs$core$IFn$_invoke$arity$1(objs);
            };
            cljs.core.pr_with_opts = function(objs, opts) {
              return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
            };
            cljs.core.newline = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
            };
            cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
              cljs.core.string_print("\n");
              return cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, cljs$cst$keyword$flush_DASH_on_DASH_newline)) ? cljs.core.flush() : null;
            };
            cljs.core.newline.cljs$lang$maxFixedArity = 1;
            cljs.core.pr_str = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8696 = arguments.length, i__4731__auto___8697 = 0;;) {
                if (i__4731__auto___8697 < len__4730__auto___8696) {
                  args__4736__auto__.push(arguments[i__4731__auto___8697]), i__4731__auto___8697 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
            };
            cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
            cljs.core.pr_str.cljs$lang$applyTo = function(seq7227) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7227));
            };
            cljs.core.prn_str = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8699 = arguments.length, i__4731__auto___8700 = 0;;) {
                if (i__4731__auto___8700 < len__4730__auto___8699) {
                  args__4736__auto__.push(arguments[i__4731__auto___8700]), i__4731__auto___8700 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
            };
            cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
            cljs.core.prn_str.cljs$lang$applyTo = function(seq7228) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7228));
            };
            cljs.core.pr = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8702 = arguments.length, i__4731__auto___8703 = 0;;) {
                if (i__4731__auto___8703 < len__4730__auto___8702) {
                  args__4736__auto__.push(arguments[i__4731__auto___8703]), i__4731__auto___8703 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
            };
            cljs.core.pr.cljs$lang$maxFixedArity = 0;
            cljs.core.pr.cljs$lang$applyTo = function(seq7229) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7229));
            };
            cljs.core.print = function() {
              var cljs$core$cljs_core_print__delegate = function(objs) {
                return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs$cst$keyword$readably, !1));
              }, cljs$core$cljs_core_print = function(var_args) {
                var objs = null;
                if (0 < arguments.length) {
                  objs = 0;
                  for (var G__8705__a = Array(arguments.length - 0); objs < G__8705__a.length;) {
                    G__8705__a[objs] = arguments[objs + 0], ++objs;
                  }
                  objs = new cljs.core.IndexedSeq(G__8705__a, 0, null);
                }
                return cljs$core$cljs_core_print__delegate.call(this, objs);
              };
              cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
              cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__8706) {
                arglist__8706 = cljs.core.seq(arglist__8706);
                return cljs$core$cljs_core_print__delegate(arglist__8706);
              };
              cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
              return cljs$core$cljs_core_print;
            }();
            cljs.core.print_str = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8707 = arguments.length, i__4731__auto___8708 = 0;;) {
                if (i__4731__auto___8708 < len__4730__auto___8707) {
                  args__4736__auto__.push(arguments[i__4731__auto___8708]), i__4731__auto___8708 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs$cst$keyword$readably, !1));
            };
            cljs.core.print_str.cljs$lang$maxFixedArity = 0;
            cljs.core.print_str.cljs$lang$applyTo = function(seq7230) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7230));
            };
            cljs.core.println = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8710 = arguments.length, i__4731__auto___8711 = 0;;) {
                if (i__4731__auto___8711 < len__4730__auto___8710) {
                  args__4736__auto__.push(arguments[i__4731__auto___8711]), i__4731__auto___8711 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs$cst$keyword$readably, !1));
              return cljs.core._STAR_print_newline_STAR_ ? cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts()) : null;
            };
            cljs.core.println.cljs$lang$maxFixedArity = 0;
            cljs.core.println.cljs$lang$applyTo = function(seq7231) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7231));
            };
            cljs.core.println_str = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8713 = arguments.length, i__4731__auto___8714 = 0;;) {
                if (i__4731__auto___8714 < len__4730__auto___8713) {
                  args__4736__auto__.push(arguments[i__4731__auto___8714]), i__4731__auto___8714 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs$cst$keyword$readably, !1));
            };
            cljs.core.println_str.cljs$lang$maxFixedArity = 0;
            cljs.core.println_str.cljs$lang$applyTo = function(seq7232) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7232));
            };
            cljs.core.prn = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8716 = arguments.length, i__4731__auto___8717 = 0;;) {
                if (i__4731__auto___8717 < len__4730__auto___8716) {
                  args__4736__auto__.push(arguments[i__4731__auto___8717]), i__4731__auto___8717 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
              cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
              return cljs.core._STAR_print_newline_STAR_ ? cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts()) : null;
            };
            cljs.core.prn.cljs$lang$maxFixedArity = 0;
            cljs.core.prn.cljs$lang$applyTo = function(seq7233) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7233));
            };
            cljs.core.strip_ns = function(named) {
              return named instanceof cljs.core.Symbol ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named)) : cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
            };
            cljs.core.lift_ns = function(m) {
              if (cljs.core._STAR_print_namespace_maps_STAR_) {
                var G__7240 = cljs.core.seq(m), seq__7242 = cljs.core.seq(G__7240), first__7243 = cljs.core.first(seq__7242);
                cljs.core.next(seq__7242);
                cljs.core.nth.cljs$core$IFn$_invoke$arity$3(first__7243, 0, null);
                cljs.core.nth.cljs$core$IFn$_invoke$arity$3(first__7243, 1, null);
                seq__7242 = cljs.core.empty(m);
                for (m = null;;) {
                  first__7243 = m;
                  G__7240 = cljs.core.seq(G__7240);
                  m = cljs.core.first(G__7240);
                  var seq__7254__$1 = cljs.core.next(G__7240), vec__7256 = m;
                  m = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7256, 0, null);
                  G__7240 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7256, 1, null);
                  if (cljs.core.truth_(vec__7256)) {
                    if (m instanceof cljs.core.Keyword || m instanceof cljs.core.Symbol) {
                      if (cljs.core.truth_(first__7243)) {
                        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(first__7243, cljs.core.namespace(m))) {
                          seq__7242 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(seq__7242, cljs.core.strip_ns(m), G__7240), m = first__7243, G__7240 = seq__7254__$1;
                        } else {
                          return null;
                        }
                      } else {
                        if (first__7243 = cljs.core.namespace(m), cljs.core.truth_(first__7243)) {
                          seq__7242 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(seq__7242, cljs.core.strip_ns(m), G__7240), m = first__7243, G__7240 = seq__7254__$1;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      return null;
                    }
                  } else {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [first__7243, seq__7242], null);
                  }
                }
              } else {
                return null;
              }
            };
            cljs.core.print_prefix_map = function(prefix, m, print_one, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
                var G__7259_8725 = cljs.core.key(e);
                print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__7259_8725, w, opts__$1) : print_one.call(null, G__7259_8725, w, opts__$1);
                cljs.core._write(w, " ");
                e = cljs.core.val(e);
                return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(e, w, opts__$1) : print_one.call(null, e, w, opts__$1);
              }, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), "{"].join(""), ", ", "}", opts, cljs.core.seq(m));
            };
            cljs.core.print_map = function(m, print_one, writer, opts) {
              var vec__7265 = cljs.core.map_QMARK_(m) ? cljs.core.lift_ns(m) : null, ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7265, 0, null);
              vec__7265 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7265, 1, null);
              return cljs.core.truth_(ns) ? cljs.core.print_prefix_map(["#:", cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""), vec__7265, print_one, writer, opts) : cljs.core.print_prefix_map(null, m, print_one, writer, opts);
            };
            cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
              cljs.core._write(writer, "#object[cljs.core.Volatile ");
              cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$val, this.state], null), writer, opts);
              return cljs.core._write(writer, "]");
            };
            cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
              cljs.core._write(writer, "#'");
              return cljs.core.pr_writer(this.sym, writer, opts);
            };
            cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.MapEntry.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.MapEntry.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, this);
            };
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, this);
            };
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, this);
            };
            cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.print_map(this, cljs.core.pr_writer, writer, opts);
            };
            cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.Iterate.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Iterate.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.print_map(this, cljs.core.pr_writer, writer, opts);
            };
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, this);
            };
            cljs.core.Cycle.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Cycle.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.print_map(this, cljs.core.pr_writer, writer, opts);
            };
            cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, this);
            };
            cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
              cljs.core._write(writer, "#object[cljs.core.Atom ");
              cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$val, this.state], null), writer, opts);
              return cljs.core._write(writer, "]");
            };
            cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, this);
            };
            cljs.core.Repeat.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Repeat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, this);
            };
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core._write(writer, "()");
            };
            cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(this));
            };
            cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.print_map(this, cljs.core.pr_writer, writer, opts);
            };
            cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.TransformerIterator.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.TransformerIterator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.Symbol.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (y instanceof cljs.core.Symbol) {
                return cljs.core.compare_symbols(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.Keyword.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (y instanceof cljs.core.Keyword) {
                return cljs.core.compare_keywords(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.Subvec.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (cljs.core.vector_QMARK_(y)) {
                return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (cljs.core.vector_QMARK_(y)) {
                return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.MapEntry.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.MapEntry.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (cljs.core.vector_QMARK_(y)) {
                return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.BlackNode.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.BlackNode.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (cljs.core.vector_QMARK_(y)) {
                return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.RedNode.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.RedNode.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
              if (cljs.core.vector_QMARK_(y)) {
                return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(this, y);
              }
              throw Error(["Cannot compare ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this), " to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            };
            cljs.core.alter_meta_BANG_ = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8728 = arguments.length, i__4731__auto___8729 = 0;;) {
                if (i__4731__auto___8729 < len__4730__auto___8728) {
                  args__4736__auto__.push(arguments[i__4731__auto___8729]), i__4731__auto___8729 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 2 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(2), 0, null) : null;
              return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], args__4736__auto__);
            };
            cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
              return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
            };
            cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
            cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq7268) {
              var G__7269 = cljs.core.first(seq7268), seq7268__$1 = cljs.core.next(seq7268);
              seq7268 = cljs.core.first(seq7268__$1);
              seq7268__$1 = cljs.core.next(seq7268__$1);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7269, seq7268, seq7268__$1);
            };
            cljs.core.reset_meta_BANG_ = function(iref, m) {
              return iref.meta = m;
            };
            cljs.core.add_watch = function(iref, key, f) {
              cljs.core._add_watch(iref, key, f);
              return iref;
            };
            cljs.core.remove_watch = function(iref, key) {
              cljs.core._remove_watch(iref, key);
              return iref;
            };
            cljs.core.gensym_counter = null;
            cljs.core.gensym = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
            };
            cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
              null == cljs.core.gensym_counter && (cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0));
              return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
            };
            cljs.core.gensym.cljs$lang$maxFixedArity = 1;
            cljs.core.Delay = function(f, value) {
              this.f = f;
              this.value = value;
              this.cljs$lang$protocol_mask$partition0$ = 2147516416;
              this.cljs$lang$protocol_mask$partition1$ = 1;
            };
            cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
              cljs.core.truth_(this.f) && (this.value = this.f.cljs$core$IFn$_invoke$arity$0 ? this.f.cljs$core$IFn$_invoke$arity$0() : this.f.call(null), this.f = null);
              return this.value;
            };
            cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
              return cljs.core.not(this.f);
            };
            cljs.core.Delay.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(x, writer, opts) {
              cljs.core._write(writer, "#object[cljs.core.Delay ");
              cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 2, [cljs$cst$keyword$status, null == this.f ? cljs$cst$keyword$ready : cljs$cst$keyword$pending, cljs$cst$keyword$val, this.value], null), writer, opts);
              return cljs.core._write(writer, "]");
            };
            cljs.core.Delay.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs$cst$symbol$f, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null)), cljs.core.with_meta(cljs$cst$symbol$value, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.Delay.cljs$lang$type = !0;
            cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
            cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Delay");
            };
            cljs.core.__GT_Delay = function(f, value) {
              return new cljs.core.Delay(f, value);
            };
            cljs.core.delay_QMARK_ = function(x) {
              return x instanceof cljs.core.Delay;
            };
            cljs.core.force = function(x) {
              return cljs.core.delay_QMARK_(x) ? cljs.core.deref(x) : x;
            };
            cljs.core.realized_QMARK_ = function(x) {
              return cljs.core._realized_QMARK_(x);
            };
            cljs.core.preserving_reduced = function(rf) {
              return function(p1__7273_SHARP_, p2__7274_SHARP_) {
                p1__7273_SHARP_ = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__7273_SHARP_, p2__7274_SHARP_) : rf.call(null, p1__7273_SHARP_, p2__7274_SHARP_);
                return cljs.core.reduced_QMARK_(p1__7273_SHARP_) ? cljs.core.reduced(p1__7273_SHARP_) : p1__7273_SHARP_;
              };
            };
            cljs.core.cat = function(rf) {
              return function(rf1) {
                return function() {
                  var G__8732 = null, G__8732__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8732__1 = function(result) {
                    return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8732__2 = function(result, input) {
                    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
                  };
                  G__8732 = function(result, input) {
                    switch(arguments.length) {
                      case 0:
                        return G__8732__0.call(this);
                      case 1:
                        return G__8732__1.call(this, result);
                      case 2:
                        return G__8732__2.call(this, result, input);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8732.cljs$core$IFn$_invoke$arity$0 = G__8732__0;
                  G__8732.cljs$core$IFn$_invoke$arity$1 = G__8732__1;
                  G__8732.cljs$core$IFn$_invoke$arity$2 = G__8732__2;
                  return G__8732;
                }();
              }(cljs.core.preserving_reduced(rf));
            };
            cljs.core.halt_when = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1 = function(pred) {
              return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(pred, null);
            };
            cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2 = function(pred, retf) {
              return function(rf) {
                return function() {
                  var G__8734 = null, G__8734__0 = function() {
                    return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                  }, G__8734__1 = function(result) {
                    return cljs.core.map_QMARK_(result) && cljs.core.contains_QMARK_(result, cljs$cst$keyword$cljs_DOT_core_SLASH_halt) ? cljs$cst$keyword$cljs_DOT_core_SLASH_halt.cljs$core$IFn$_invoke$arity$1(result) : rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                  }, G__8734__2 = function(result, input) {
                    return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input)) ? cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$cljs_DOT_core_SLASH_halt, cljs.core.truth_(retf) ? function() {
                      var G__7277 = rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                      return retf.cljs$core$IFn$_invoke$arity$2 ? retf.cljs$core$IFn$_invoke$arity$2(G__7277, input) : retf.call(null, G__7277, input);
                    }() : input], null)) : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                  };
                  G__8734 = function(result, input) {
                    switch(arguments.length) {
                      case 0:
                        return G__8734__0.call(this);
                      case 1:
                        return G__8734__1.call(this, result);
                      case 2:
                        return G__8734__2.call(this, result, input);
                    }
                    throw Error("Invalid arity: " + arguments.length);
                  };
                  G__8734.cljs$core$IFn$_invoke$arity$0 = G__8734__0;
                  G__8734.cljs$core$IFn$_invoke$arity$1 = G__8734__1;
                  G__8734.cljs$core$IFn$_invoke$arity$2 = G__8734__2;
                  return G__8734;
                }();
              };
            };
            cljs.core.halt_when.cljs$lang$maxFixedArity = 2;
            cljs.core.dedupe = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
              return function(rf) {
                return function(pa) {
                  return function() {
                    var G__8736 = null, G__8736__0 = function() {
                      return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
                    }, G__8736__1 = function(result) {
                      return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
                    }, G__8736__2 = function(result, input) {
                      var prior = cljs.core.deref(pa);
                      cljs.core.vreset_BANG_(pa, input);
                      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input) ? result : rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
                    };
                    G__8736 = function(result, input) {
                      switch(arguments.length) {
                        case 0:
                          return G__8736__0.call(this);
                        case 1:
                          return G__8736__1.call(this, result);
                        case 2:
                          return G__8736__2.call(this, result, input);
                      }
                      throw Error("Invalid arity: " + arguments.length);
                    };
                    G__8736.cljs$core$IFn$_invoke$arity$0 = G__8736__0;
                    G__8736.cljs$core$IFn$_invoke$arity$1 = G__8736__1;
                    G__8736.cljs$core$IFn$_invoke$arity$2 = G__8736__2;
                    return G__8736;
                  }();
                }(cljs.core.volatile_BANG_(cljs$cst$keyword$cljs_DOT_core_SLASH_none));
              };
            };
            cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
            };
            cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
            cljs.core.random_sample = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
              return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
                return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
              });
            };
            cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
              return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
                return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
              }, coll);
            };
            cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
            cljs.core.Eduction = function(xform, coll) {
              this.xform = xform;
              this.coll = coll;
              this.cljs$lang$protocol_mask$partition0$ = 2173173760;
              this.cljs$lang$protocol_mask$partition1$ = 131072;
            };
            cljs.core.Eduction.prototype.indexOf = function() {
              var G__8738 = null, G__8738__1 = function(x) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, 0);
              }, G__8738__2 = function(x, start) {
                return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8738 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8738__1.call(this, x);
                  case 2:
                    return G__8738__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8738.cljs$core$IFn$_invoke$arity$1 = G__8738__1;
              G__8738.cljs$core$IFn$_invoke$arity$2 = G__8738__2;
              return G__8738;
            }();
            cljs.core.Eduction.prototype.lastIndexOf = function() {
              var G__8739 = null, G__8739__1 = function(x) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, cljs.core.count(this));
              }, G__8739__2 = function(x, start) {
                return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(this, x, start);
              };
              G__8739 = function(x, start) {
                switch(arguments.length) {
                  case 1:
                    return G__8739__1.call(this, x);
                  case 2:
                    return G__8739__2.call(this, x, start);
                }
                throw Error("Invalid arity: " + arguments.length);
              };
              G__8739.cljs$core$IFn$_invoke$arity$1 = G__8739__1;
              G__8739.cljs$core$IFn$_invoke$arity$2 = G__8739__2;
              return G__8739;
            }();
            cljs.core.Eduction.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
              return cljs.core.TransformerIterator.create(this.xform, cljs.core.iter(this.coll));
            };
            cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
              return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(this.xform, this.coll));
            };
            cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
              return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(this.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), this.coll);
            };
            cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
              return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(this.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, this.coll);
            };
            cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, this);
            };
            cljs.core.Eduction.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$xform, cljs$cst$symbol$coll], null);
            };
            cljs.core.Eduction.cljs$lang$type = !0;
            cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
            cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Eduction");
            };
            cljs.core.__GT_Eduction = function(xform, coll) {
              return new cljs.core.Eduction(xform, coll);
            };
            var G__7283_8740 = cljs.core.Eduction.prototype, G__7284_8741 = cljs.core.ITER_SYMBOL, G__7285_8742 = function(G__7283_8740, G__7284_8741) {
              return function() {
                return cljs.core.es6_iterator(this);
              };
            }();
            goog.object.set(G__7283_8740, G__7284_8741, G__7285_8742);
            cljs.core.eduction = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8743 = arguments.length, i__4731__auto___8744 = 0;;) {
                if (i__4731__auto___8744 < len__4730__auto___8743) {
                  args__4736__auto__.push(arguments[i__4731__auto___8744]), i__4731__auto___8744 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 0 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(0), 0, null) : null;
              return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(args__4736__auto__);
            };
            cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
              return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
            };
            cljs.core.eduction.cljs$lang$maxFixedArity = 0;
            cljs.core.eduction.cljs$lang$applyTo = function(seq7286) {
              return this.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7286));
            };
            cljs.core.run_BANG_ = function(proc, coll) {
              cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__7288_SHARP_, p2__7287_SHARP_) {
                return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__7287_SHARP_) : proc.call(null, p2__7287_SHARP_);
              }, null, coll);
              return null;
            };
            cljs.core.IEncodeJS = function() {
            };
            cljs.core._clj__GT_js = function(x) {
              if (null != x && null != x.cljs$core$IEncodeJS$_clj__GT_js$arity$1) {
                return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
              }
              var m__4434__auto__ = cljs.core._clj__GT_js[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              m__4434__auto__ = cljs.core._clj__GT_js._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
            };
            cljs.core._key__GT_js = function(x) {
              if (null != x && null != x.cljs$core$IEncodeJS$_key__GT_js$arity$1) {
                return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
              }
              var m__4434__auto__ = cljs.core._key__GT_js[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              m__4434__auto__ = cljs.core._key__GT_js._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__4434__auto__.call(null, x);
              }
              throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
            };
            cljs.core.key__GT_js = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$1 = function(k) {
              return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(k, cljs.core.clj__GT_js);
            };
            cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2 = function(k, primitive_fn) {
              return (null != k ? cljs.core.PROTOCOL_SENTINEL === k.cljs$core$IEncodeJS$ || (k.cljs$lang$protocol_mask$partition$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) ? cljs.core._clj__GT_js(k) : "string" === typeof k || "number" === typeof k || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol ? primitive_fn.cljs$core$IFn$_invoke$arity$1 ? primitive_fn.cljs$core$IFn$_invoke$arity$1(k) : primitive_fn.call(null, 
              k) : cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([k], 0));
            };
            cljs.core.key__GT_js.cljs$lang$maxFixedArity = 2;
            cljs.core.clj__GT_js = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8747 = arguments.length, i__4731__auto___8748 = 0;;) {
                if (i__4731__auto___8748 < len__4730__auto___8747) {
                  args__4736__auto__.push(arguments[i__4731__auto___8748]), i__4731__auto___8748 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic = function(x, p__7294) {
              var map__7295__$1 = null != p__7294 && (p__7294.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__7294.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__7294) : p__7294, keyword_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__7295__$1, cljs$cst$keyword$keyword_DASH_fn, cljs.core.name), keyfn = function(map__7295, map__7295__$1, options, keyword_fn) {
                return function(k) {
                  return cljs.core.key__GT_js.cljs$core$IFn$_invoke$arity$2(k, thisfn);
                };
              }(), thisfn = function(map__7295, map__7295__$1, options, keyword_fn) {
                return function cljs$core$thisfn(x__$1) {
                  if (null == x__$1) {
                    return null;
                  }
                  if (null != x__$1 ? cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeJS$ || (x__$1.cljs$lang$protocol_mask$partition$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x__$1)) : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x__$1)) {
                    return cljs.core._clj__GT_js(x__$1);
                  }
                  if (x__$1 instanceof cljs.core.Keyword) {
                    return keyword_fn.cljs$core$IFn$_invoke$arity$1 ? keyword_fn.cljs$core$IFn$_invoke$arity$1(x__$1) : keyword_fn.call(null, x__$1);
                  }
                  if (x__$1 instanceof cljs.core.Symbol) {
                    return cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1);
                  }
                  if (cljs.core.map_QMARK_(x__$1)) {
                    var m = {};
                    x__$1 = cljs.core.seq(x__$1);
                    for (var chunk__7336_8751 = null, count__7337_8752 = 0, i__7338_8753 = 0;;) {
                      if (i__7338_8753 < count__7337_8752) {
                        var vec__7351_8754 = chunk__7336_8751.cljs$core$IIndexed$_nth$arity$2(null, i__7338_8753), k_8755 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7351_8754, 0, null), v_8756 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7351_8754, 1, null);
                        vec__7351_8754 = m;
                        k_8755 = keyfn(k_8755);
                        v_8756 = cljs$core$thisfn(v_8756);
                        goog.object.set(vec__7351_8754, k_8755, v_8756);
                        i__7338_8753 += 1;
                      } else {
                        if (x__$1 = cljs.core.seq(x__$1)) {
                          cljs.core.chunked_seq_QMARK_(x__$1) ? (count__7337_8752 = cljs.core.chunk_first(x__$1), x__$1 = cljs.core.chunk_rest(x__$1), chunk__7336_8751 = count__7337_8752, count__7337_8752 = cljs.core.count(count__7337_8752)) : (chunk__7336_8751 = cljs.core.first(x__$1), count__7337_8752 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7336_8751, 0, null), i__7338_8753 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(chunk__7336_8751, 1, null), chunk__7336_8751 = m, count__7337_8752 = keyfn(count__7337_8752), 
                          i__7338_8753 = cljs$core$thisfn(i__7338_8753), goog.object.set(chunk__7336_8751, count__7337_8752, i__7338_8753), x__$1 = cljs.core.next(x__$1), chunk__7336_8751 = null, count__7337_8752 = 0), i__7338_8753 = 0;
                        } else {
                          break;
                        }
                      }
                    }
                    return m;
                  }
                  if (cljs.core.coll_QMARK_(x__$1)) {
                    m = [];
                    x__$1 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
                    chunk__7336_8751 = null;
                    for (i__7338_8753 = count__7337_8752 = 0;;) {
                      if (i__7338_8753 < count__7337_8752) {
                        vec__7351_8754 = chunk__7336_8751.cljs$core$IIndexed$_nth$arity$2(null, i__7338_8753), m.push(vec__7351_8754), i__7338_8753 += 1;
                      } else {
                        if (x__$1 = cljs.core.seq(x__$1)) {
                          chunk__7336_8751 = x__$1, cljs.core.chunked_seq_QMARK_(chunk__7336_8751) ? (x__$1 = cljs.core.chunk_first(chunk__7336_8751), i__7338_8753 = cljs.core.chunk_rest(chunk__7336_8751), chunk__7336_8751 = x__$1, count__7337_8752 = cljs.core.count(x__$1), x__$1 = i__7338_8753) : (x__$1 = cljs.core.first(chunk__7336_8751), m.push(x__$1), x__$1 = cljs.core.next(chunk__7336_8751), chunk__7336_8751 = null, count__7337_8752 = 0), i__7338_8753 = 0;
                        } else {
                          break;
                        }
                      }
                    }
                    return m;
                  }
                  return x__$1;
                };
              }(p__7294, map__7295__$1, map__7295__$1, keyword_fn);
              return thisfn(x);
            };
            cljs.core.clj__GT_js.cljs$lang$maxFixedArity = 1;
            cljs.core.clj__GT_js.cljs$lang$applyTo = function(seq7292) {
              var G__7293 = cljs.core.first(seq7292);
              seq7292 = cljs.core.next(seq7292);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7293, seq7292);
            };
            cljs.core.IEncodeClojure = function() {
            };
            cljs.core._js__GT_clj = function(x, options) {
              if (null != x && null != x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2) {
                return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
              }
              var m__4434__auto__ = cljs.core._js__GT_clj[goog.typeOf(null == x ? null : x)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__4434__auto__.call(null, x, options);
              }
              m__4434__auto__ = cljs.core._js__GT_clj._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__4434__auto__.call(null, x, options);
              }
              throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
            };
            cljs.core.js__GT_clj = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8803 = arguments.length, i__4731__auto___8804 = 0;;) {
                    if (i__4731__auto___8804 < len__4730__auto___8803) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8804]), i__4731__auto___8804 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(1), 0, null);
                  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args_arr__4751__auto__);
              }
            };
            cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
              return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs$cst$keyword$keywordize_DASH_keys, !1], 0));
            };
            cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
              var map__7373__$1 = null != opts && (opts.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === opts.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, opts) : opts, keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__7373__$1, cljs$cst$keyword$keywordize_DASH_keys), keyfn$jscomp$1 = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
              return function(map__7373$jscomp$0, map__7373__$1$jscomp$0, keywordize_keys$jscomp$0, keyfn$jscomp$0) {
                return function cljs$core$thisfn(x__$1) {
                  return (null != x__$1 ? cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeClojure$ || (x__$1.cljs$lang$protocol_mask$partition$ ? 0 : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) ? cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts)) : cljs.core.seq_QMARK_(x__$1) ? cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, 
                  x__$1)) : cljs.core.map_entry_QMARK_(x__$1) ? new cljs.core.MapEntry(cljs$core$thisfn(cljs.core.key(x__$1)), cljs$core$thisfn(cljs.core.val(x__$1)), null) : cljs.core.coll_QMARK_(x__$1) ? cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$1(cljs$core$thisfn), x__$1) : cljs.core.array_QMARK_(x__$1) ? cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(map__7373, map__7373__$1, keywordize_keys, keyfn) {
                    return function(p1__7367_SHARP_, p2__7368_SHARP_) {
                      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(p1__7367_SHARP_, cljs$core$thisfn(p2__7368_SHARP_));
                    };
                  }(), cljs.core.transient$(cljs.core.PersistentVector.EMPTY), x__$1)) : cljs.core.type(x__$1) === Object ? cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(map__7373, map__7373__$1, keywordize_keys, keyfn) {
                    return function(r, k) {
                      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(r, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(goog.object.get(x__$1, k)));
                    };
                  }(map__7373$jscomp$0, map__7373__$1$jscomp$0, keywordize_keys$jscomp$0, keyfn$jscomp$0), cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), cljs.core.js_keys(x__$1))) : x__$1;
                };
              }(opts, map__7373__$1, keywordize_keys, keyfn$jscomp$1)(x);
            };
            cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq7370) {
              var G__7371 = cljs.core.first(seq7370);
              seq7370 = cljs.core.next(seq7370);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7371, seq7370);
            };
            cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
            cljs.core.memoize = function(f) {
              return function(mem) {
                return function() {
                  var G__8806__delegate = function(args) {
                    var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(mem), args, cljs.core.lookup_sentinel);
                    v === cljs.core.lookup_sentinel && (v = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args), cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, v));
                    return v;
                  }, G__8806 = function(var_args) {
                    var args = null;
                    if (0 < arguments.length) {
                      args = 0;
                      for (var G__8807__a = Array(arguments.length - 0); args < G__8807__a.length;) {
                        G__8807__a[args] = arguments[args + 0], ++args;
                      }
                      args = new cljs.core.IndexedSeq(G__8807__a, 0, null);
                    }
                    return G__8806__delegate.call(this, args);
                  };
                  G__8806.cljs$lang$maxFixedArity = 0;
                  G__8806.cljs$lang$applyTo = function(arglist__8808) {
                    arglist__8808 = cljs.core.seq(arglist__8808);
                    return G__8806__delegate(arglist__8808);
                  };
                  G__8806.cljs$core$IFn$_invoke$arity$variadic = G__8806__delegate;
                  return G__8806;
                }();
              }(cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY));
            };
            cljs.core.trampoline = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  for (var args_arr__4751__auto__ = [], len__4730__auto___8810 = arguments.length, i__4731__auto___8811 = 0;;) {
                    if (i__4731__auto___8811 < len__4730__auto___8810) {
                      args_arr__4751__auto__.push(arguments[i__4731__auto___8811]), i__4731__auto___8811 += 1;
                    } else {
                      break;
                    }
                  }
                  args_arr__4751__auto__ = new cljs.core.IndexedSeq(args_arr__4751__auto__.slice(1), 0, null);
                  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args_arr__4751__auto__);
              }
            };
            cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
              for (;;) {
                if (f = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), !cljs.core.fn_QMARK_(f)) {
                  return f;
                }
              }
            };
            cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
              return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
                return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
              });
            };
            cljs.core.trampoline.cljs$lang$applyTo = function(seq7377) {
              var G__7378 = cljs.core.first(seq7377);
              seq7377 = cljs.core.next(seq7377);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7378, seq7377);
            };
            cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
            cljs.core.rand = function(var_args) {
              switch(arguments.length) {
                case 0:
                  return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
                case 1:
                  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
              return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
            };
            cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
              return Math.random() * n;
            };
            cljs.core.rand.cljs$lang$maxFixedArity = 1;
            cljs.core.rand_int = function(n) {
              return Math.floor(Math.random() * n);
            };
            cljs.core.rand_nth = function(coll) {
              return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
            };
            cljs.core.group_by = function(f, coll) {
              return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
                var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
                return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
              }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
            };
            cljs.core.make_hierarchy = function() {
              return new cljs.core.PersistentArrayMap(null, 3, [cljs$cst$keyword$parents, cljs.core.PersistentArrayMap.EMPTY, cljs$cst$keyword$descendants, cljs.core.PersistentArrayMap.EMPTY, cljs$cst$keyword$ancestors, cljs.core.PersistentArrayMap.EMPTY], null);
            };
            cljs.core._global_hierarchy = null;
            cljs.core.get_global_hierarchy = function() {
              null == cljs.core._global_hierarchy && (cljs.core._global_hierarchy = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.make_hierarchy()));
              return cljs.core._global_hierarchy;
            };
            cljs.core.swap_global_hierarchy_BANG_ = function(var_args) {
              for (var args__4736__auto__ = [], len__4730__auto___8815 = arguments.length, i__4731__auto___8816 = 0;;) {
                if (i__4731__auto___8816 < len__4730__auto___8815) {
                  args__4736__auto__.push(arguments[i__4731__auto___8816]), i__4731__auto___8816 += 1;
                } else {
                  break;
                }
              }
              args__4736__auto__ = 1 < args__4736__auto__.length ? new cljs.core.IndexedSeq(args__4736__auto__.slice(1), 0, null) : null;
              return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], args__4736__auto__);
            };
            cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
            };
            cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
            cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq7383) {
              var G__7384 = cljs.core.first(seq7383);
              seq7383 = cljs.core.next(seq7383);
              return this.cljs$core$IFn$_invoke$arity$variadic(G__7384, seq7383);
            };
            cljs.core.isa_QMARK_ = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
              return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(cljs.core.get_global_hierarchy()), child, parent);
            };
            cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
              var or__4131__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
              if (!or__4131__auto__ && !(or__4131__auto__ = cljs.core.contains_QMARK_(function() {
                var fexpr__7389 = cljs$cst$keyword$ancestors.cljs$core$IFn$_invoke$arity$1(h);
                return fexpr__7389.cljs$core$IFn$_invoke$arity$1 ? fexpr__7389.cljs$core$IFn$_invoke$arity$1(child) : fexpr__7389.call(null, child);
              }(), parent)) && (or__4131__auto__ = cljs.core.vector_QMARK_(parent)) && (or__4131__auto__ = cljs.core.vector_QMARK_(child))) {
                if (or__4131__auto__ = cljs.core.count(parent) === cljs.core.count(child)) {
                  or__4131__auto__ = !0;
                  for (var i = 0;;) {
                    if (or__4131__auto__ && i !== cljs.core.count(parent)) {
                      or__4131__auto__ = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i)), i += 1;
                    } else {
                      return or__4131__auto__;
                    }
                  }
                } else {
                  return or__4131__auto__;
                }
              } else {
                return or__4131__auto__;
              }
            };
            cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
            cljs.core.parents = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
              return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
            };
            cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
              return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs$cst$keyword$parents.cljs$core$IFn$_invoke$arity$1(h), tag));
            };
            cljs.core.parents.cljs$lang$maxFixedArity = 2;
            cljs.core.ancestors = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
              return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
            };
            cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
              return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs$cst$keyword$ancestors.cljs$core$IFn$_invoke$arity$1(h), tag));
            };
            cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
            cljs.core.descendants = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
              return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.get_global_hierarchy()), tag);
            };
            cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
              return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs$cst$keyword$descendants.cljs$core$IFn$_invoke$arity$1(h), tag));
            };
            cljs.core.descendants.cljs$lang$maxFixedArity = 2;
            cljs.core.derive = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
              cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tag, parent], 0));
              return null;
            };
            cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
              var tp = cljs$cst$keyword$parents.cljs$core$IFn$_invoke$arity$1(h), td = cljs$cst$keyword$descendants.cljs$core$IFn$_invoke$arity$1(h), ta = cljs$cst$keyword$ancestors.cljs$core$IFn$_invoke$arity$1(h), tf = function(tp$jscomp$0, td$jscomp$0, ta$jscomp$0) {
                return function(m, source, sources, target, targets) {
                  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
                    return function(ret, k) {
                      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
                    };
                  }(), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
                };
              }();
              if (cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent)) {
                tag = null;
              } else {
                if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
                  throw Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), "already has", cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), "as ancestor"].join(""));
                }
                if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
                  throw Error(["Cyclic derivation:", cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), "has", cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), "as ancestor"].join(""));
                }
                tag = new cljs.core.PersistentArrayMap(null, 3, [cljs$cst$keyword$parents, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs$cst$keyword$parents.cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), cljs$cst$keyword$ancestors, tf(cljs$cst$keyword$ancestors.cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), cljs$cst$keyword$descendants, tf(cljs$cst$keyword$descendants.cljs$core$IFn$_invoke$arity$1(h), 
                parent, ta, tag, td)], null);
              }
              return cljs.core.truth_(tag) ? tag : h;
            };
            cljs.core.derive.cljs$lang$maxFixedArity = 3;
            cljs.core.underive = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
              cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tag, parent], 0));
              return null;
            };
            cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
              var parentMap = cljs$cst$keyword$parents.cljs$core$IFn$_invoke$arity$1(h), childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY, newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? 
              cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag), deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
                return function(p1__7398_SHARP_) {
                  return cljs.core.cons(cljs.core.first(p1__7398_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__7398_SHARP_), cljs.core.second(p1__7398_SHARP_)));
                };
              }(), cljs.core.seq(newParents)));
              return cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
                return function(p1__7399_SHARP_, p2__7400_SHARP_) {
                  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__7399_SHARP_, p2__7400_SHARP_);
                };
              }(), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq)) : h;
            };
            cljs.core.underive.cljs$lang$maxFixedArity = 3;
            cljs.core.reset_cache = function(method_cache, method_table, cached_hierarchy, hierarchy) {
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
                return cljs.core.deref(method_table);
              });
              return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
                return cljs.core.deref(hierarchy);
              });
            };
            cljs.core.prefers_STAR_ = function(x, y, prefer_table) {
              var xprefs = function() {
                var fexpr__7403 = cljs.core.deref(prefer_table);
                return fexpr__7403.cljs$core$IFn$_invoke$arity$1 ? fexpr__7403.cljs$core$IFn$_invoke$arity$1(x) : fexpr__7403.call(null, x);
              }();
              xprefs = cljs.core.truth_(cljs.core.truth_(xprefs) ? xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y) : xprefs) ? !0 : null;
              if (cljs.core.truth_(xprefs)) {
                return xprefs;
              }
              xprefs = function() {
                for (var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);;) {
                  if (0 < cljs.core.count(ps)) {
                    cljs.core.truth_(function() {
                      var G__7408 = cljs.core.first(ps);
                      return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(x, G__7408, prefer_table) : cljs.core.prefers_STAR_.call(null, x, G__7408, prefer_table);
                    }()), ps = cljs.core.rest(ps);
                  } else {
                    return null;
                  }
                }
              }();
              if (cljs.core.truth_(xprefs)) {
                return xprefs;
              }
              xprefs = function() {
                for (var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);;) {
                  if (0 < cljs.core.count(ps)) {
                    cljs.core.truth_(function() {
                      var G__7413 = cljs.core.first(ps);
                      return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__7413, y, prefer_table) : cljs.core.prefers_STAR_.call(null, G__7413, y, prefer_table);
                    }()), ps = cljs.core.rest(ps);
                  } else {
                    return null;
                  }
                }
              }();
              return cljs.core.truth_(xprefs) ? xprefs : !1;
            };
            cljs.core.dominates = function(x, y, prefer_table, hierarchy) {
              prefer_table = cljs.core.prefers_STAR_(x, y, prefer_table);
              return cljs.core.truth_(prefer_table) ? prefer_table : cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(hierarchy, x, y);
            };
            cljs.core.find_and_cache_best_method = function(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val) {
              var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__7416) {
                var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(p__7416, 0, null);
                cljs.core.nth.cljs$core$IFn$_invoke$arity$3(p__7416, 1, null);
                if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(hierarchy), dispatch_val, k) && (be = null == be || cljs.core.dominates(k, cljs.core.first(be), prefer_table, cljs.core.deref(hierarchy)) ? p__7416 : be, !cljs.core.dominates(cljs.core.first(be), k, prefer_table, cljs.core.deref(hierarchy)))) {
                  throw Error(["Multiple methods in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), "' match dispatch value: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val), " -\x3e ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(k), " and ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(be)), ", and neither is preferred"].join(""));
                }
                return be;
              }, null, cljs.core.deref(method_table)), best_entry__$1 = function() {
                var temp__5733__auto__;
                if (temp__5733__auto__ = null == best_entry) {
                  temp__5733__auto__ = cljs.core.deref(method_table), temp__5733__auto__ = temp__5733__auto__.cljs$core$IFn$_invoke$arity$1 ? temp__5733__auto__.cljs$core$IFn$_invoke$arity$1(default_dispatch_val) : temp__5733__auto__.call(null, default_dispatch_val);
                }
                return cljs.core.truth_(temp__5733__auto__) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default_dispatch_val, temp__5733__auto__], null) : best_entry;
              }();
              if (cljs.core.truth_(best_entry__$1)) {
                if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cached_hierarchy), cljs.core.deref(hierarchy))) {
                  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry__$1)), cljs.core.second(best_entry__$1);
                }
                cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
                return cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$8 ? cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$8(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val) : cljs.core.find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy, default_dispatch_val);
              }
              return null;
            };
            cljs.core.IMultiFn = function() {
            };
            cljs.core._reset = function(mf) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_reset$arity$1) {
                return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
              }
              var m__4434__auto__ = cljs.core._reset[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              m__4434__auto__ = cljs.core._reset._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
            };
            cljs.core._add_method = function(mf, dispatch_val, method) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_add_method$arity$3) {
                return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
              }
              var m__4434__auto__ = cljs.core._add_method[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4434__auto__.call(null, mf, dispatch_val, method);
              }
              m__4434__auto__ = cljs.core._add_method._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__4434__auto__.call(null, mf, dispatch_val, method);
              }
              throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
            };
            cljs.core._remove_method = function(mf, dispatch_val) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_remove_method$arity$2) {
                return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
              }
              var m__4434__auto__ = cljs.core._remove_method[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4434__auto__.call(null, mf, dispatch_val);
              }
              m__4434__auto__ = cljs.core._remove_method._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4434__auto__.call(null, mf, dispatch_val);
              }
              throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
            };
            cljs.core._prefer_method = function(mf, dispatch_val, dispatch_val_y) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_prefer_method$arity$3) {
                return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
              }
              var m__4434__auto__ = cljs.core._prefer_method[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4434__auto__.call(null, mf, dispatch_val, dispatch_val_y);
              }
              m__4434__auto__ = cljs.core._prefer_method._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__4434__auto__.call(null, mf, dispatch_val, dispatch_val_y);
              }
              throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
            };
            cljs.core._get_method = function(mf, dispatch_val) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_get_method$arity$2) {
                return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
              }
              var m__4434__auto__ = cljs.core._get_method[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4434__auto__.call(null, mf, dispatch_val);
              }
              m__4434__auto__ = cljs.core._get_method._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__4434__auto__.call(null, mf, dispatch_val);
              }
              throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
            };
            cljs.core._methods = function(mf) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_methods$arity$1) {
                return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
              }
              var m__4434__auto__ = cljs.core._methods[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              m__4434__auto__ = cljs.core._methods._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
            };
            cljs.core._prefers = function(mf) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_prefers$arity$1) {
                return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
              }
              var m__4434__auto__ = cljs.core._prefers[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              m__4434__auto__ = cljs.core._prefers._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
            };
            cljs.core._default_dispatch_val = function(mf) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1) {
                return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
              }
              var m__4434__auto__ = cljs.core._default_dispatch_val[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              m__4434__auto__ = cljs.core._default_dispatch_val._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
            };
            cljs.core._dispatch_fn = function(mf) {
              if (null != mf && null != mf.cljs$core$IMultiFn$_dispatch_fn$arity$1) {
                return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
              }
              var m__4434__auto__ = cljs.core._dispatch_fn[goog.typeOf(null == mf ? null : mf)];
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              m__4434__auto__ = cljs.core._dispatch_fn._;
              if (null != m__4434__auto__) {
                return m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__4434__auto__.call(null, mf);
              }
              throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
            };
            cljs.core.throw_no_method_error = function(name, dispatch_val) {
              throw Error(["No method in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), "' for dispatch value: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val)].join(""));
            };
            cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
              this.name = name;
              this.dispatch_fn = dispatch_fn;
              this.default_dispatch_val = default_dispatch_val;
              this.hierarchy = hierarchy;
              this.method_table = method_table;
              this.prefer_table = prefer_table;
              this.method_cache = method_cache;
              this.cached_hierarchy = cached_hierarchy;
              this.cljs$lang$protocol_mask$partition0$ = 4194305;
              this.cljs$lang$protocol_mask$partition1$ = 4352;
            };
            cljs.core.MultiFn.prototype.call = function() {
              var G__8828 = null, G__8828__1 = function(self__) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
              }, G__8828__2 = function(self__, a) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
              }, G__8828__3 = function(self__, a, b) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
              }, G__8828__4 = function(self__, a, b, c) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
              }, G__8828__5 = function(self__, a, b, c, d) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
              }, G__8828__6 = function(self__, a, b, c, d, e) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
              }, G__8828__7 = function(self__, a, b, c, d, e, f) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
              }, G__8828__8 = function(self__, a, b, c, d, e, f, g) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
              }, G__8828__9 = function(self__, a, b, c, d, e, f, g, h) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
              }, G__8828__10 = function(self__, a, b, c, d, e, f, g, h, i) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
              }, G__8828__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
              }, G__8828__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
              }, G__8828__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
              }, G__8828__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
              }, G__8828__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
              }, G__8828__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
              }, G__8828__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
              }, G__8828__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
              }, G__8828__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
              }, G__8828__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
              }, G__8828__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
                self__ = this;
                var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
              }, G__8828__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                self__ = this;
                var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0)), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
                cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(self__.name, dispatch_val);
                return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
              };
              G__8828 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
                switch(arguments.length) {
                  case 1:
                    return G__8828__1.call(this, self__);
                  case 2:
                    return G__8828__2.call(this, self__, a);
                  case 3:
                    return G__8828__3.call(this, self__, a, b);
                  case 4:
                    return G__8828__4.call(this, self__, a, b, c);
                  case 5:
                    return G__8828__5.call(this, self__, a, b, c, d);
                  case 6:
                    return G__8828__6.call(this, self__, a, b, c, d, e);
                  case 7:
                    return G__8828__7.call(this, self__, a, b, c, d, e, f);
                  case 8:
                    return G__8828__8.call(this, self__, a, b, c, d, e, f, g);
                  case 9:
                    return G__8828__9.call(this, self__, a, b, c, d, e, f, g, h);
                  case 10:
                    return G__8828__10.call(this, self__, a, b, c, d, e, f, g, h, i);
                  case 11:
                    return G__8828__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
                  case 12:
                    return G__8828__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
                  case 13:
                    return G__8828__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
                  case 14:
                    return G__8828__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
                  case 15:
                    return G__8828__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
                  case 16:
                    return G__8828__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
                  case 17:
                    return G__8828__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                  case 18:
                    return G__8828__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
                  case 19:
                    return G__8828__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
                  case 20:
                    return G__8828__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
                  case 21:
                    return G__8828__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                  case 22:
                    return G__8828__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
                }
                throw Error("Invalid arity: " + (arguments.length - 1));
              };
              G__8828.cljs$core$IFn$_invoke$arity$1 = G__8828__1;
              G__8828.cljs$core$IFn$_invoke$arity$2 = G__8828__2;
              G__8828.cljs$core$IFn$_invoke$arity$3 = G__8828__3;
              G__8828.cljs$core$IFn$_invoke$arity$4 = G__8828__4;
              G__8828.cljs$core$IFn$_invoke$arity$5 = G__8828__5;
              G__8828.cljs$core$IFn$_invoke$arity$6 = G__8828__6;
              G__8828.cljs$core$IFn$_invoke$arity$7 = G__8828__7;
              G__8828.cljs$core$IFn$_invoke$arity$8 = G__8828__8;
              G__8828.cljs$core$IFn$_invoke$arity$9 = G__8828__9;
              G__8828.cljs$core$IFn$_invoke$arity$10 = G__8828__10;
              G__8828.cljs$core$IFn$_invoke$arity$11 = G__8828__11;
              G__8828.cljs$core$IFn$_invoke$arity$12 = G__8828__12;
              G__8828.cljs$core$IFn$_invoke$arity$13 = G__8828__13;
              G__8828.cljs$core$IFn$_invoke$arity$14 = G__8828__14;
              G__8828.cljs$core$IFn$_invoke$arity$15 = G__8828__15;
              G__8828.cljs$core$IFn$_invoke$arity$16 = G__8828__16;
              G__8828.cljs$core$IFn$_invoke$arity$17 = G__8828__17;
              G__8828.cljs$core$IFn$_invoke$arity$18 = G__8828__18;
              G__8828.cljs$core$IFn$_invoke$arity$19 = G__8828__19;
              G__8828.cljs$core$IFn$_invoke$arity$20 = G__8828__20;
              G__8828.cljs$core$IFn$_invoke$arity$21 = G__8828__21;
              G__8828.cljs$core$IFn$_invoke$arity$22 = G__8828__22;
              return G__8828;
            }();
            cljs.core.MultiFn.prototype.apply = function(self__, args7422) {
              return this.call.apply(this, [this].concat(cljs.core.aclone(args7422)));
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : this.dispatch_fn.call(null), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : this.dispatch_fn.call(null, a), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : this.dispatch_fn.call(null, a, b), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : this.dispatch_fn.call(null, a, b, c), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : this.dispatch_fn.call(null, a, b, c, d), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : this.dispatch_fn.call(null, a, b, c, d, e), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : this.dispatch_fn.call(null, a, b, c, d, e, f), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : this.dispatch_fn.call(null, a, b, c, d, e, f, g), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
              var dispatch_val = this.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? this.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : this.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            };
            cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
              var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(this.dispatch_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0)), target_fn = this.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
              cljs.core.truth_(target_fn) || cljs.core.throw_no_method_error(this.name, dispatch_val);
              return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
              if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, this.prefer_table))) {
                throw Error(["Preference conflict in multimethod '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.name), "': ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y), " is already preferred to ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x)].join(""));
              }
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(this.prefer_table, function(mf__$1) {
                return function(old) {
                  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
                };
              }());
              return cljs.core.reset_cache(this.method_cache, this.method_table, this.cached_hierarchy, this.hierarchy);
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
              return this.default_dispatch_val;
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(this.method_table, cljs.core.dissoc, dispatch_val);
              cljs.core.reset_cache(this.method_cache, this.method_table, this.cached_hierarchy, this.hierarchy);
              return this;
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
              return cljs.core.deref(this.method_table);
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
              return cljs.core.deref(this.prefer_table);
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
              return this.dispatch_fn;
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(this.method_table, cljs.core.assoc, dispatch_val, method);
              cljs.core.reset_cache(this.method_cache, this.method_table, this.cached_hierarchy, this.hierarchy);
              return this;
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(this.method_table, function(mf__$1) {
                return function(mf__$2) {
                  return cljs.core.PersistentArrayMap.EMPTY;
                };
              }());
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(this.method_cache, function(mf__$1) {
                return function(mf__$2) {
                  return cljs.core.PersistentArrayMap.EMPTY;
                };
              }());
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(this.prefer_table, function(mf__$1) {
                return function(mf__$2) {
                  return cljs.core.PersistentArrayMap.EMPTY;
                };
              }());
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(this.cached_hierarchy, function(mf__$1) {
                return function(mf__$2) {
                  return null;
                };
              }());
              return this;
            };
            cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
              cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(this.cached_hierarchy), cljs.core.deref(this.hierarchy)) || cljs.core.reset_cache(this.method_cache, this.method_table, this.cached_hierarchy, this.hierarchy);
              mf = cljs.core.deref(this.method_cache);
              mf = mf.cljs$core$IFn$_invoke$arity$1 ? mf.cljs$core$IFn$_invoke$arity$1(dispatch_val) : mf.call(null, dispatch_val);
              return cljs.core.truth_(mf) ? mf : cljs.core.find_and_cache_best_method(this.name, dispatch_val, this.hierarchy, this.method_table, this.prefer_table, this.method_cache, this.cached_hierarchy, this.default_dispatch_val);
            };
            cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
              return cljs.core._name(this.name);
            };
            cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
              return cljs.core._namespace(this.name);
            };
            cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
              return goog.getUid(this);
            };
            cljs.core.MultiFn.getBasis = function() {
              return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$name, cljs$cst$symbol$dispatch_DASH_fn, cljs$cst$symbol$default_DASH_dispatch_DASH_val, cljs$cst$symbol$hierarchy, cljs$cst$symbol$method_DASH_table, cljs$cst$symbol$prefer_DASH_table, cljs$cst$symbol$method_DASH_cache, cljs$cst$symbol$cached_DASH_hierarchy], null);
            };
            cljs.core.MultiFn.cljs$lang$type = !0;
            cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
            cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/MultiFn");
            };
            cljs.core.__GT_MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
              return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
            };
            cljs.core.remove_all_methods = function(multifn) {
              return cljs.core._reset(multifn);
            };
            cljs.core.remove_method = function(multifn, dispatch_val) {
              return cljs.core._remove_method(multifn, dispatch_val);
            };
            cljs.core.prefer_method = function(multifn, dispatch_val_x, dispatch_val_y) {
              return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
            };
            cljs.core.methods$ = function(multifn) {
              return cljs.core._methods(multifn);
            };
            cljs.core.get_method = function(multifn, dispatch_val) {
              return cljs.core._get_method(multifn, dispatch_val);
            };
            cljs.core.prefers = function(multifn) {
              return cljs.core._prefers(multifn);
            };
            cljs.core.default_dispatch_val = function(multifn) {
              return cljs.core._default_dispatch_val(multifn);
            };
            cljs.core.dispatch_fn = function(multifn) {
              return cljs.core._dispatch_fn(multifn);
            };
            cljs.core.IUUID = function() {
            };
            cljs.core.UUID = function(uuid, __hash) {
              this.uuid = uuid;
              this.__hash = __hash;
              this.cljs$lang$protocol_mask$partition0$ = 2153775104;
              this.cljs$lang$protocol_mask$partition1$ = 2048;
            };
            cljs.core.UUID.prototype.cljs$core$IUUID$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.UUID.prototype.toString = function() {
              return this.uuid;
            };
            cljs.core.UUID.prototype.equiv = function(other) {
              return this.cljs$core$IEquiv$_equiv$arity$2(null, other);
            };
            cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
              return other instanceof cljs.core.UUID && this.uuid === other.uuid;
            };
            cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
              return cljs.core._write(writer, ['#uuid "', cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.uuid), '"'].join(""));
            };
            cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
              null == this.__hash && (this.__hash = cljs.core.hash(this.uuid));
              return this.__hash;
            };
            cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
              return goog.array.defaultCompare(this.uuid, other.uuid);
            };
            cljs.core.UUID.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$uuid, cljs.core.with_meta(cljs$cst$symbol$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$mutable, !0], null))], null);
            };
            cljs.core.UUID.cljs$lang$type = !0;
            cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
            cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/UUID");
            };
            cljs.core.__GT_UUID = function(uuid, __hash) {
              return new cljs.core.UUID(uuid, __hash);
            };
            cljs.core.uuid = function(s) {
              return new cljs.core.UUID(s.toLowerCase(), null);
            };
            cljs.core.random_uuid = function() {
              var hex = function() {
                return cljs.core.rand_int(16).toString(16);
              }, rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
              return cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
              cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-4", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), "-", cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
              cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
              cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex())].join(""));
            };
            cljs.core.uuid_QMARK_ = function(x) {
              return null != x ? cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IUUID$ ? !0 : !1 : !1;
            };
            cljs.core.pr_writer_ex_info = function(obj, writer, opts) {
              cljs.core._write(writer, "#error {:message ");
              cljs.core.pr_writer(obj.message, writer, opts);
              cljs.core.truth_(obj.data) && (cljs.core._write(writer, ", :data "), cljs.core.pr_writer(obj.data, writer, opts));
              cljs.core.truth_(obj.cause) && (cljs.core._write(writer, ", :cause "), cljs.core.pr_writer(obj.cause, writer, opts));
              return cljs.core._write(writer, "}");
            };
            cljs.core.ExceptionInfo = function(message, data, cause) {
              var e = Error(message);
              this.message = message;
              this.data = data;
              this.cause = cause;
              this.name = e.name;
              this.description = e.description;
              this.number = e.number;
              this.fileName = e.fileName;
              this.lineNumber = e.lineNumber;
              this.columnNumber = e.columnNumber;
              this.stack = e.stack;
              return this;
            };
            cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
            cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
            cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
              return cljs.core.pr_writer_ex_info(this, writer, opts);
            };
            cljs.core.ExceptionInfo.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.ex_info = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
              return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
            };
            cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
              return new cljs.core.ExceptionInfo(msg, data, cause);
            };
            cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
            cljs.core.ex_data = function(ex) {
              return ex instanceof cljs.core.ExceptionInfo ? ex.data : null;
            };
            cljs.core.ex_message = function(ex) {
              return ex instanceof Error ? ex.message : null;
            };
            cljs.core.ex_cause = function(ex) {
              return ex instanceof cljs.core.ExceptionInfo ? ex.cause : null;
            };
            cljs.core.comparator = function(pred) {
              return function(x, y) {
                return cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y)) ? -1 : cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x)) ? 1 : 0;
              };
            };
            cljs.core.special_symbol_QMARK_ = function(x) {
              return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs$cst$symbol$_AMPERSAND_, "null", cljs$cst$symbol$case_STAR_, "null", cljs$cst$symbol$defrecord_STAR_, "null", cljs$cst$symbol$try, "null", cljs$cst$symbol$ns_STAR_, "null", cljs$cst$symbol$finally, "null", cljs$cst$symbol$loop_STAR_, "null", cljs$cst$symbol$do, "null", cljs$cst$symbol$letfn_STAR_, "null", cljs$cst$symbol$if, "null", cljs$cst$symbol$new, "null", cljs$cst$symbol$ns, 
              "null", cljs$cst$symbol$deftype_STAR_, "null", cljs$cst$symbol$let_STAR_, "null", cljs$cst$symbol$js_STAR_, "null", cljs$cst$symbol$fn_STAR_, "null", cljs$cst$symbol$recur, "null", cljs$cst$symbol$set_BANG_, "null", cljs$cst$symbol$_DOT_, "null", cljs$cst$symbol$var, "null", cljs$cst$symbol$quote, "null", cljs$cst$symbol$catch, "null", cljs$cst$symbol$throw, "null", cljs$cst$symbol$def, "null"], null), null), x);
            };
            cljs.core.test = function(v) {
              v = v.cljs$lang$test;
              return cljs.core.truth_(v) ? (v.cljs$core$IFn$_invoke$arity$0 ? v.cljs$core$IFn$_invoke$arity$0() : v.call(null), cljs$cst$keyword$ok) : cljs$cst$keyword$no_DASH_test;
            };
            cljs.core.TaggedLiteral = function(tag, form) {
              this.tag = tag;
              this.form = form;
              this.cljs$lang$protocol_mask$partition0$ = 2153775360;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.TaggedLiteral.prototype.toString = function() {
              return cljs.core.pr_str_STAR_(this);
            };
            cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
              return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this.form, other.form);
            };
            cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
              return 31 * cljs.core.hash(this.tag) + cljs.core.hash(this.form);
            };
            cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
              return this.cljs$core$ILookup$_lookup$arity$3(null, v, null);
            };
            cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
              switch(v instanceof cljs.core.Keyword ? v.fqn : null) {
                case "tag":
                  return this.tag;
                case "form":
                  return this.form;
                default:
                  return not_found;
              }
            };
            cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
              cljs.core._write(writer, ["#", cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.tag), " "].join(""));
              return cljs.core.pr_writer(this.form, writer, opts);
            };
            cljs.core.TaggedLiteral.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$tag, cljs$cst$symbol$form], null);
            };
            cljs.core.TaggedLiteral.cljs$lang$type = !0;
            cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
            cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/TaggedLiteral");
            };
            cljs.core.__GT_TaggedLiteral = function(tag, form) {
              return new cljs.core.TaggedLiteral(tag, form);
            };
            cljs.core.tagged_literal_QMARK_ = function(value) {
              return value instanceof cljs.core.TaggedLiteral;
            };
            cljs.core.tagged_literal = function(tag, form) {
              return new cljs.core.TaggedLiteral(tag, form);
            };
            cljs.core.js_reserved_arr = "arguments abstract await boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for function goto if implements import in instanceof int interface let long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with yield methods null constructor".split(" ");
            cljs.core.js_reserved = null;
            cljs.core.js_reserved_QMARK_ = function(x) {
              null == cljs.core.js_reserved && (cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__7430_SHARP_, p2__7431_SHARP_) {
                goog.object.set(p1__7430_SHARP_, p2__7431_SHARP_, !0);
                return p1__7430_SHARP_;
              }, {}, cljs.core.js_reserved_arr));
              return cljs.core.js_reserved.hasOwnProperty(x);
            };
            cljs.core.demunge_pattern = function() {
              cljs.core.truth_(cljs.core.DEMUNGE_PATTERN) || (cljs.core.DEMUNGE_PATTERN = function() {
                for (var ks__$1 = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
                  return b.length - a.length;
                }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP)), ret = "";;) {
                  if (cljs.core.seq(ks__$1)) {
                    var G__8831 = cljs.core.next(ks__$1), G__8832 = [function() {
                      var G__7433 = ret;
                      return "" !== ret ? [G__7433, "|"].join("") : G__7433;
                    }(), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ks__$1))].join("");
                    ks__$1 = G__8831;
                    ret = G__8832;
                  } else {
                    return [ret, "|\\$"].join("");
                  }
                }
              }());
              return cljs.core.DEMUNGE_PATTERN;
            };
            cljs.core.munge_str = function(name) {
              for (var sb = new goog.string.StringBuffer, i_8833 = 0;;) {
                if (i_8833 < name.length) {
                  var c_8834 = name.charAt(i_8833), sub_8835 = goog.object.get(cljs.core.CHAR_MAP, c_8834);
                  null != sub_8835 ? sb.append(sub_8835) : sb.append(c_8834);
                  i_8833 += 1;
                } else {
                  break;
                }
              }
              return sb.toString();
            };
            cljs.core.munge = function(name) {
              var name_SINGLEQUOTE_ = cljs.core.munge_str(cljs.core.str.cljs$core$IFn$_invoke$arity$1(name));
              name_SINGLEQUOTE_ = ".." === name_SINGLEQUOTE_ ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE_), "$"].join("") : name_SINGLEQUOTE_;
              return name instanceof cljs.core.Symbol ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE_) : name_SINGLEQUOTE_;
            };
            cljs.core.demunge_str = function(munged_name) {
              var r = new RegExp(cljs.core.demunge_pattern(), "g");
              munged_name = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
              for (var ret = "", last_match_end = 0;;) {
                var temp__5733__auto__ = r.exec(munged_name);
                if (cljs.core.truth_(temp__5733__auto__)) {
                  temp__5733__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(temp__5733__auto__, 0, null), ret = [ret, cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name.substring(last_match_end, r.lastIndex - temp__5733__auto__.length)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$" === temp__5733__auto__ ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, temp__5733__auto__))].join(""), last_match_end = r.lastIndex;
                } else {
                  return [ret, cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name.substring(last_match_end, munged_name.length))].join("");
                }
              }
            };
            cljs.core.demunge = function(name) {
              var G__7441 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(name);
              G__7441 = "_DOT__DOT_" === G__7441 ? ".." : cljs.core.demunge_str(G__7441);
              name = name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str;
              return name.cljs$core$IFn$_invoke$arity$1 ? name.cljs$core$IFn$_invoke$arity$1(G__7441) : name.call(null, G__7441);
            };
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core.tapset) {
              cljs.core.tapset = null;
            }
            cljs.core.maybe_init_tapset = function() {
              return null == cljs.core.tapset ? cljs.core.tapset = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY) : null;
            };
            cljs.core.add_tap = function(f) {
              cljs.core.maybe_init_tapset();
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.tapset, cljs.core.conj, f);
              return null;
            };
            cljs.core.remove_tap = function(f) {
              cljs.core.maybe_init_tapset();
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.tapset, cljs.core.disj, f);
              return null;
            };
            cljs.core.tap_GT_ = function(x) {
              cljs.core.maybe_init_tapset();
              return cljs.core._STAR_exec_tap_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_exec_tap_fn_STAR_.cljs$core$IFn$_invoke$arity$1(function() {
                for (var seq__7442 = cljs.core.seq(cljs.core.deref(cljs.core.tapset)), chunk__7443 = null, count__7444 = 0, i__7445 = 0;;) {
                  if (i__7445 < count__7444) {
                    var tap = chunk__7443.cljs$core$IIndexed$_nth$arity$2(null, i__7445);
                    try {
                      tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
                    } catch (e7448) {
                      if (!(e7448 instanceof Error)) {
                        throw e7448;
                      }
                    }
                    i__7445 += 1;
                  } else {
                    if (seq__7442 = cljs.core.seq(seq__7442)) {
                      chunk__7443 = seq__7442;
                      if (cljs.core.chunked_seq_QMARK_(chunk__7443)) {
                        seq__7442 = cljs.core.chunk_first(chunk__7443), count__7444 = cljs.core.chunk_rest(chunk__7443), chunk__7443 = seq__7442, tap = cljs.core.count(seq__7442), seq__7442 = count__7444, count__7444 = tap;
                      } else {
                        tap = cljs.core.first(chunk__7443);
                        try {
                          tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
                        } catch (e7449) {
                          if (!(e7449 instanceof Error)) {
                            throw e7449;
                          }
                        }
                        seq__7442 = cljs.core.next(chunk__7443);
                        chunk__7443 = null;
                        count__7444 = 0;
                      }
                      i__7445 = 0;
                    } else {
                      return null;
                    }
                  }
                }
              }) : cljs.core._STAR_exec_tap_fn_STAR_.call(null, function() {
                for (var seq__7442 = cljs.core.seq(cljs.core.deref(cljs.core.tapset)), chunk__7443 = null, count__7444 = 0, i__7445 = 0;;) {
                  if (i__7445 < count__7444) {
                    var tap = chunk__7443.cljs$core$IIndexed$_nth$arity$2(null, i__7445);
                    try {
                      tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
                    } catch (e7448) {
                      if (!(e7448 instanceof Error)) {
                        throw e7448;
                      }
                    }
                    i__7445 += 1;
                  } else {
                    if (seq__7442 = cljs.core.seq(seq__7442)) {
                      chunk__7443 = seq__7442;
                      if (cljs.core.chunked_seq_QMARK_(chunk__7443)) {
                        seq__7442 = cljs.core.chunk_first(chunk__7443), count__7444 = cljs.core.chunk_rest(chunk__7443), chunk__7443 = seq__7442, tap = cljs.core.count(seq__7442), seq__7442 = count__7444, count__7444 = tap;
                      } else {
                        tap = cljs.core.first(chunk__7443);
                        try {
                          tap.cljs$core$IFn$_invoke$arity$1 ? tap.cljs$core$IFn$_invoke$arity$1(x) : tap.call(null, x);
                        } catch (e7449) {
                          if (!(e7449 instanceof Error)) {
                            throw e7449;
                          }
                        }
                        seq__7442 = cljs.core.next(chunk__7443);
                        chunk__7443 = null;
                        count__7444 = 0;
                      }
                      i__7445 = 0;
                    } else {
                      return null;
                    }
                  }
                }
              });
            };
            cljs.core.ns_lookup = function(ns_obj, k) {
              return function() {
                return goog.object.get(ns_obj, k);
              };
            };
            cljs.core.Namespace = function(obj, name) {
              this.obj = obj;
              this.name = name;
              this.cljs$lang$protocol_mask$partition0$ = 6291456;
              this.cljs$lang$protocol_mask$partition1$ = 0;
            };
            cljs.core.Namespace.prototype.findInternedVar = function(sym) {
              var k = cljs.core.munge(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym));
              if (goog.object.containsKey(this.obj, k)) {
                sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.name), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym));
                var var_meta = new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$ns, this], null);
                return new cljs.core.Var(cljs.core.ns_lookup(this.obj, k), sym, var_meta);
              }
              return null;
            };
            cljs.core.Namespace.prototype.getName = function() {
              return this.name;
            };
            cljs.core.Namespace.prototype.toString = function() {
              return cljs.core.str.cljs$core$IFn$_invoke$arity$1(this.name);
            };
            cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
              return other instanceof cljs.core.Namespace ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this.name, other.name) : !1;
            };
            cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
              return cljs.core.hash(this.name);
            };
            cljs.core.Namespace.getBasis = function() {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs$cst$symbol$obj, cljs$cst$symbol$name], null);
            };
            cljs.core.Namespace.cljs$lang$type = !0;
            cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
            cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__4374__auto__, writer__4375__auto__, opt__4376__auto__) {
              return cljs.core._write(writer__4375__auto__, "cljs.core/Namespace");
            };
            cljs.core.__GT_Namespace = function(obj, name) {
              return new cljs.core.Namespace(obj, name);
            };
            cljs.core.NS_CACHE = null;
            cljs.core.find_ns_obj_STAR_ = function(ctxt, xs) {
              for (;;) {
                if (null == ctxt) {
                  return null;
                }
                if (null == xs) {
                  return ctxt;
                }
                var G__7451 = cljs.core.first(xs);
                ctxt = goog.object.get(ctxt, G__7451);
                xs = cljs.core.next(xs);
              }
            };
            cljs.core.find_ns_obj = function(ns) {
              var segs = cljs.core.munge(cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)).split(".");
              switch(cljs.core._STAR_target_STAR_) {
                case "nodejs":
                  return  cljs.core.find_ns_obj_STAR_(function() {
                    try {
                      var ctxt = eval(cljs.core.first(segs));
                      return cljs.core.truth_(cljs.core.truth_(ctxt) ? cljs.core.object_QMARK_(ctxt) : ctxt) ? ctxt : null;
                    } catch (e7453) {
                      if (e7453 instanceof ReferenceError) {
                        return null;
                      }
                      throw e7453;
                    }
                  }(), cljs.core.next(segs)) ;
                case "default":
                case "webworker":
                  return cljs.core.find_ns_obj_STAR_(goog.global, segs);
                default:
                  throw Error(["find-ns-obj not supported for target ", cljs.core._STAR_target_STAR_].join(""));
              }
            };
            cljs.core.ns_interns_STAR_ = function(sym) {
              var ns_obj$jscomp$2 = cljs.core.find_ns_obj(sym), ns$jscomp$1 = new cljs.core.Namespace(ns_obj$jscomp$2, sym);
              ns$jscomp$1 = function(ns_obj$jscomp$0, ns$jscomp$0) {
                return function(ret, k) {
                  var var_sym$jscomp$0 = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
                  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym$jscomp$0, new cljs.core.Var(function(var_sym, ns_obj, ns) {
                    return function() {
                      return goog.object.get(ns_obj, k);
                    };
                  }(var_sym$jscomp$0, ns_obj$jscomp$0), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym), cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym$jscomp$0)), new cljs.core.PersistentArrayMap(null, 1, [cljs$cst$keyword$ns, ns$jscomp$0], null)));
                };
              }(ns_obj$jscomp$2, ns$jscomp$1);
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(ns$jscomp$1, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj$jscomp$2));
            };
            cljs.core.create_ns = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
              return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
            };
            cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
              return new cljs.core.Namespace(ns_obj, sym);
            };
            cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
            cljs.core.find_ns = function(ns) {
              null == cljs.core.NS_CACHE && (cljs.core.NS_CACHE = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY));
              var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.NS_CACHE), ns);
              if (null != the_ns) {
                return the_ns;
              }
              the_ns = cljs.core.find_ns_obj(ns);
              if (null == the_ns) {
                return null;
              }
              the_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, the_ns);
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, the_ns);
              return the_ns;
            };
            cljs.core.find_macros_ns = function(ns) {
              null == cljs.core.NS_CACHE && (cljs.core.NS_CACHE = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY));
              var ns_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
              ns = goog.string.contains(ns_str, "$macros") ? ns : cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([ns_str, "$macros"].join(""));
              ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.core.NS_CACHE), ns);
              if (null != ns_str) {
                return ns_str;
              }
              ns_str = cljs.core.find_ns_obj(ns);
              if (null == ns_str) {
                return null;
              }
              ns_str = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_str);
              cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, ns_str);
              return ns_str;
            };
            cljs.core.ns_name = function(ns_obj) {
              return ns_obj.name;
            };
            cljs.core.uri_QMARK_ = function(x) {
              return x instanceof goog.Uri;
            };
            cljs.core.maybe_enable_print_BANG_ = function() {
              if ("undefined" !== typeof console) {
                return cljs.core.enable_console_print_BANG_();
              }
              if ("nashorn" === cljs.core._STAR_target_STAR_ || "graaljs" === cljs.core._STAR_target_STAR_) {
                var system = Java.type("java.lang.System");
                cljs.core._STAR_print_newline_STAR_ = !1;
                cljs.core.set_print_fn_BANG_(function(system) {
                  return function() {
                    var s = goog.array.clone(arguments).join("");
                    return system.out.println(s);
                  };
                }(system));
                return cljs.core.set_print_err_fn_BANG_(function(system) {
                  return function() {
                    var s = goog.array.clone(arguments).join("");
                    return system.error.println(s);
                  };
                }(system));
              }
              return null;
            };
            cljs.core.maybe_enable_print_BANG_();
            if ("undefined" === typeof cljs || "undefined" === typeof cljs.core || "undefined" === typeof cljs.core._STAR_eval_STAR_) {
              cljs.core._STAR_eval_STAR_ = function(_) {
                throw Error("cljs.core/*eval* not bound");
              };
            }
            cljs.core.eval = function(form) {
              return cljs.core._STAR_eval_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_eval_STAR_.cljs$core$IFn$_invoke$arity$1(form) : cljs.core._STAR_eval_STAR_.call(null, form);
            };
            cljs.core.enable_console_print_BANG_();
            var cljs$cst$symbol$finally = new cljs.core.Symbol(null, "finally", "finally", -1065347064, null), cljs$cst$symbol$str = new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs$cst$keyword$ns = new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs$cst$symbol$front = new cljs.core.Symbol(null, "front", "front", 117022539, null), cljs$cst$symbol$throw = new cljs.core.Symbol(null, "throw", "throw", 595905694, null), cljs$cst$symbol$root = new cljs.core.Symbol(null, "root", "root", 1191874074, 
            null), cljs$cst$symbol$has_DASH_nil_QMARK_ = new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), cljs$cst$symbol$default_DASH_dispatch_DASH_val = new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), cljs$cst$symbol$not_DASH_native = new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null), cljs$cst$keyword$print_DASH_length = new cljs.core.Keyword(null, "print-length", "print-length", 1931866356), cljs$cst$keyword$describe = 
            new cljs.core.Keyword(null, "describe", "describe", 1369790582), cljs$cst$keyword$argv = new cljs.core.Keyword(null, "argv", "argv", -1462790895), cljs$cst$symbol$val = new cljs.core.Symbol(null, "val", "val", 1769233139, null), cljs$cst$symbol$rest = new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs$cst$symbol$_next = new cljs.core.Symbol(null, "_next", "_next", 101877036, null), cljs$cst$symbol$mseq = new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), cljs$cst$symbol$base = 
            new cljs.core.Symbol(null, "base", "base", 1825810849, null), cljs$cst$symbol$prefer_DASH_table = new cljs.core.Symbol(null, "prefer-table", "prefer-table", 462168584, null), cljs$cst$symbol$count = new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs$cst$keyword$flush_DASH_on_DASH_newline = new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs$cst$keyword$mutable = new cljs.core.Keyword(null, "mutable", "mutable", 875778266), cljs$cst$symbol$var = 
            new cljs.core.Symbol(null, "var", "var", 870848730, null), cljs$cst$symbol$defrecord_STAR_ = new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), cljs$cst$keyword$val = new cljs.core.Keyword(null, "val", "val", 128701612), cljs$cst$symbol$buffer = new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs$cst$symbol$node = new cljs.core.Symbol(null, "node", "node", -2073234571, null), cljs$cst$symbol$_meta = new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, 
            null), cljs$cst$symbol$meta = new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs$cst$symbol$step = new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs$cst$keyword$ready = new cljs.core.Keyword(null, "ready", "ready", 1086465795), cljs$cst$symbol$nodes = new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), cljs$cst$symbol$js_STAR_ = new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), cljs$cst$symbol$len = new cljs.core.Symbol(null, "len", "len", 
            -1230778691, null), cljs$cst$symbol$__hash = new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), cljs$cst$symbol$next_DASH_iter = new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), cljs$cst$symbol$next = new cljs.core.Symbol(null, "next", "next", 1522830042, null), cljs$cst$symbol$keys = new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), cljs$cst$symbol$ns_STAR_ = new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), cljs$cst$symbol$if = new cljs.core.Symbol(null, 
            "if", "if", 1181717262, null), cljs$cst$symbol$strobj = new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), cljs$cst$symbol$ascending_QMARK_ = new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), cljs$cst$symbol$_hash = new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), cljs$cst$symbol$iters = new cljs.core.Symbol(null, "iters", "iters", 719353031, null), cljs$cst$keyword$meta = new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs$cst$symbol$catch = 
            new cljs.core.Symbol(null, "catch", "catch", -1616370245, null), cljs$cst$symbol$hash_DASH_map = new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs$cst$symbol$transient_DASH_map = new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), cljs$cst$symbol$loop_STAR_ = new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), cljs$cst$symbol$def = new cljs.core.Symbol(null, "def", "def", 597100991, null), cljs$cst$symbol$coll = new cljs.core.Symbol(null, 
            "coll", "coll", -1006698606, null), cljs$cst$symbol$fqn = new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs$cst$symbol$update_DASH_count = new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs$cst$symbol$watches = new cljs.core.Symbol(null, "watches", "watches", 1367433992, null), cljs$cst$symbol$riter = new cljs.core.Symbol(null, "riter", "riter", -237834262, null), cljs$cst$symbol$off = new cljs.core.Symbol(null, "off", "off", -2047994980, null), cljs$cst$symbol$quote = 
            new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs$cst$symbol$iter = new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs$cst$keyword$keywordize_DASH_keys = new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), cljs$cst$symbol$editable_QMARK_ = new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), cljs$cst$symbol$xf = new cljs.core.Symbol(null, "xf", "xf", 2042434515, null), cljs$cst$symbol$completed = new cljs.core.Symbol(null, 
            "completed", "completed", 1154475024, null), cljs$cst$symbol$record = new cljs.core.Symbol(null, "record", "record", 861424668, null), cljs$cst$symbol$buf = new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), cljs$cst$symbol$arr = new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs$cst$symbol$comp = new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), cljs$cst$keyword$i = new cljs.core.Keyword(null, "i", "i", -1386841315), cljs$cst$symbol$key = new cljs.core.Symbol(null, 
            "key", "key", 124488940, null), cljs$cst$symbol$cnt = new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), cljs$cst$keyword$d = new cljs.core.Keyword(null, "d", "d", 1972142424), cljs$cst$symbol$edit = new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs$cst$symbol$left = new cljs.core.Symbol(null, "left", "left", 1241415590, null), cljs$cst$symbol$fn = new cljs.core.Symbol(null, "fn", "fn", 465265323, null), cljs$cst$symbol$fn_STAR_ = new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
            null), cljs$cst$symbol$xform = new cljs.core.Symbol(null, "xform", "xform", -85179481, null), cljs$cst$symbol$shift = new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), cljs$cst$symbol$fseq = new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), cljs$cst$keyword$cwd = new cljs.core.Keyword(null, "cwd", "cwd", 14056523), cljs$cst$symbol$stack = new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs$cst$keyword$no_DASH_test = new cljs.core.Keyword(null, "no-test", 
            "no-test", -1679482642), cljs$cst$symbol$boolean = new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), cljs$cst$keyword$n = new cljs.core.Keyword(null, "n", "n", 562130025), cljs$cst$symbol$value = new cljs.core.Symbol(null, "value", "value", 1946509744, null), cljs$cst$keyword$sh = new cljs.core.Keyword(null, "sh", "sh", -682444007), cljs$cst$symbol$state = new cljs.core.Symbol(null, "state", "state", -348086572, null), cljs$cst$symbol$_rest = new cljs.core.Symbol(null, "_rest", 
            "_rest", -2100466189, null), cljs$cst$symbol$prev = new cljs.core.Symbol(null, "prev", "prev", 43462301, null), cljs$cst$symbol$fields = new cljs.core.Symbol(null, "fields", "fields", -291534703, null), cljs$cst$keyword$status = new cljs.core.Keyword(null, "status", "status", -1997798413), cljs$cst$symbol$collision_DASH_hash = new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), cljs$cst$keyword$descendants = new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), 
            cljs$cst$keyword$parents = new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs$cst$symbol$nil_DASH_val = new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs$cst$keyword$validator = new cljs.core.Keyword(null, "validator", "validator", -1966190681), cljs$cst$keyword$tag = new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs$cst$symbol$dispatch_DASH_fn = new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), cljs$cst$keyword$description = 
            new cljs.core.Keyword(null, "description", "description", -1428560544), cljs$cst$symbol$base_DASH_count = new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), cljs$cst$symbol$chunk = new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), cljs$cst$symbol$vals = new cljs.core.Symbol(null, "vals", "vals", -1886377036, null), cljs$cst$symbol$start = new cljs.core.Symbol(null, "start", "start", 1285322546, null), cljs$cst$symbol$_DOT_ = new cljs.core.Symbol(null, ".", ".", 
            1975675962, null), cljs$cst$symbol$letfn_STAR_ = new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), cljs$cst$symbol$new = new cljs.core.Symbol(null, "new", "new", -444906321, null), cljs$cst$symbol$set_BANG_ = new cljs.core.Symbol(null, "set!", "set!", 250714521, null), cljs$cst$symbol$all = new cljs.core.Symbol(null, "all", "all", -1762306027, null), cljs$cst$keyword$alias = new cljs.core.Keyword(null, "alias", "alias", -2039751630), cljs$cst$symbol$more = new cljs.core.Symbol(null, 
            "more", "more", -418290273, null), cljs$cst$symbol$prev_DASH_seed = new cljs.core.Symbol(null, "prev-seed", "prev-seed", 2126381367, null), cljs$cst$keyword$fallback_DASH_impl = new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs$cst$symbol$tag = new cljs.core.Symbol(null, "tag", "tag", 350170304, null), cljs$cst$keyword$pending = new cljs.core.Keyword(null, "pending", "pending", -220036727), cljs$cst$symbol$ns = new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), 
            cljs$cst$symbol$first = new cljs.core.Symbol(null, "first", "first", 996428481, null), cljs$cst$symbol$do = new cljs.core.Symbol(null, "do", "do", 1686842252, null), cljs$cst$keyword$readably = new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs$cst$symbol$_AMPERSAND_ = new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), cljs$cst$keyword$keyword_DASH_fn = new cljs.core.Keyword(null, "keyword-fn", "keyword-fn", -64566675), cljs$cst$symbol$tail = new cljs.core.Symbol(null, 
            "tail", "tail", 494507963, null), cljs$cst$symbol$seen = new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), cljs$cst$keyword$templatesPath = new cljs.core.Keyword(null, "templatesPath", "templatesPath", 47626254), cljs$cst$symbol$vec = new cljs.core.Symbol(null, "vec", "vec", 982683596, null), cljs$cst$symbol$multi = new cljs.core.Symbol(null, "multi", "multi", 1450238522, null), cljs$cst$keyword$name = new cljs.core.Keyword(null, "name", "name", 1843675177), cljs$cst$symbol$seed = new cljs.core.Symbol(null, 
            "seed", "seed", 1709144854, null), cljs$cst$symbol$method_DASH_cache = new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), cljs$cst$symbol$let_STAR_ = new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), cljs$cst$symbol$tree_DASH_map = new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs$cst$symbol$rear = new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs$cst$keyword$cljs_DOT_core_SLASH_none = new cljs.core.Keyword("cljs.core", 
            "none", "cljs.core/none", 926646439), cljs$cst$symbol$ci = new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), cljs$cst$keyword$alt_DASH_impl = new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595), cljs$cst$keyword$cljs_DOT_core_SLASH_halt = new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715), cljs$cst$symbol$cached_DASH_hierarchy = new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null), cljs$cst$symbol$obj = new cljs.core.Symbol(null, 
            "obj", "obj", -1672671807, null), cljs$cst$symbol$deftype_STAR_ = new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), cljs$cst$symbol$_seq = new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), cljs$cst$symbol$validator = new cljs.core.Symbol(null, "validator", "validator", -325659154, null), cljs$cst$symbol$bitmap = new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), cljs$cst$symbol$root_DASH_iter = new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, 
            null), cljs$cst$symbol$ext_DASH_map_DASH_iter = new cljs.core.Symbol(null, "ext-map-iter", "ext-map-iter", -1215982757, null), cljs$cst$symbol$chunk_DASH_next = new cljs.core.Symbol(null, "chunk-next", "chunk-next", -547810434, null), cljs$cst$symbol$uuid = new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs$cst$symbol$end = new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs$cst$symbol$name = new cljs.core.Symbol(null, "name", "name", -810760592, null), cljs$cst$symbol$afn = 
            new cljs.core.Symbol(null, "afn", "afn", 216963467, null), cljs$cst$keyword$cljs_DOT_core_SLASH_not_DASH_found = new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185), cljs$cst$keyword$default = new cljs.core.Keyword(null, "default", "default", -1987822328), cljs$cst$symbol$recur = new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), cljs$cst$symbol$i = new cljs.core.Symbol(null, "i", "i", 253690212, null), cljs$cst$symbol$form = new cljs.core.Symbol(null, 
            "form", "form", 16469056, null), cljs$cst$symbol$case_STAR_ = new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), cljs$cst$symbol$f = new cljs.core.Symbol(null, "f", "f", 43394975, null), cljs$cst$keyword$type = new cljs.core.Keyword(null, "type", "type", 1174270348), cljs$cst$symbol$sb = new cljs.core.Symbol(null, "sb", "sb", -1249746442, null), cljs$cst$symbol$meta6388 = new cljs.core.Symbol(null, "meta6388", "meta6388", 2069898365, null), cljs$cst$symbol$current = new cljs.core.Symbol(null, 
            "current", "current", 552492924, null), cljs$cst$symbol$right = new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs$cst$symbol$s = new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs$cst$symbol$hierarchy = new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), cljs$cst$keyword$ancestors = new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs$cst$symbol$v = new cljs.core.Symbol(null, "v", "v", 1661996586, null), cljs$cst$symbol$try = new cljs.core.Symbol(null, 
            "try", "try", -1273693247, null), cljs$cst$keyword$dup = new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs$cst$symbol$tree = new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), cljs$cst$keyword$projectPath = new cljs.core.Keyword(null, "projectPath", "projectPath", -2106255404), cljs$cst$symbol$next_DASH_entry = new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), cljs$cst$keyword$ok = new cljs.core.Keyword(null, "ok", "ok", 967785236), cljs$cst$symbol$sym = 
            new cljs.core.Symbol(null, "sym", "sym", 195671222, null), cljs$cst$keyword$more_DASH_marker = new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935), cljs$cst$symbol$sourceIter = new cljs.core.Symbol(null, "sourceIter", "sourceIter", 1068220306, null), cljs$cst$symbol$method_DASH_table = new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null);
            var clojure = {string:{}};
            clojure.string.seq_reverse = function(coll) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
            };
            clojure.string.re_surrogate_pair = /([\uD800-\uDBFF])([\uDC00-\uDFFF])/g;
            clojure.string.reverse = function(s) {
              return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
            };
            clojure.string.replace_all = function(s, re, replacement) {
              var JSCompiler_temp_const = RegExp, JSCompiler_temp_const$jscomp$0 = re.source;
              var G__7456__$1 = cljs.core.truth_(re.ignoreCase) ? "gi" : "g";
              G__7456__$1 = cljs.core.truth_(re.multiline) ? [G__7456__$1, "m"].join("") : G__7456__$1;
              re = cljs.core.truth_(re.unicode) ? [G__7456__$1, "u"].join("") : G__7456__$1;
              JSCompiler_temp_const = new JSCompiler_temp_const(JSCompiler_temp_const$jscomp$0, re);
              return s.replace(JSCompiler_temp_const, replacement);
            };
            clojure.string.replace_with = function(f) {
              return function() {
                var G__7485__delegate = function(args) {
                  args = cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(2, args);
                  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(args), 1)) {
                    return args = cljs.core.first(args), f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(args) : f.call(null, args);
                  }
                  args = cljs.core.vec(args);
                  return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(args) : f.call(null, args);
                }, G__7485 = function(var_args) {
                  var args = null;
                  if (0 < arguments.length) {
                    args = 0;
                    for (var G__7486__a = Array(arguments.length - 0); args < G__7486__a.length;) {
                      G__7486__a[args] = arguments[args + 0], ++args;
                    }
                    args = new cljs.core.IndexedSeq(G__7486__a, 0, null);
                  }
                  return G__7485__delegate.call(this, args);
                };
                G__7485.cljs$lang$maxFixedArity = 0;
                G__7485.cljs$lang$applyTo = function(arglist__7487) {
                  arglist__7487 = cljs.core.seq(arglist__7487);
                  return G__7485__delegate(arglist__7487);
                };
                G__7485.cljs$core$IFn$_invoke$arity$variadic = G__7485__delegate;
                return G__7485;
              }();
            };
            clojure.string.replace = function(s, match, replacement) {
              if ("string" === typeof match) {
                return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
              }
              if (match instanceof RegExp) {
                return "string" === typeof replacement ? clojure.string.replace_all(s, match, replacement) : clojure.string.replace_all(s, match, clojure.string.replace_with(replacement));
              }
              throw ["Invalid match arg: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join("");
            };
            clojure.string.replace_first = function(s, match, replacement) {
              return s.replace(match, replacement);
            };
            clojure.string.join = function(var_args) {
              switch(arguments.length) {
                case 1:
                  return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
                case 2:
                  return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
              var sb = new goog.string.StringBuffer;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  sb = sb.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(coll))), coll = cljs.core.next(coll);
                } else {
                  return sb.toString();
                }
              }
            };
            clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
              var sb = new goog.string.StringBuffer;
              for (coll = cljs.core.seq(coll);;) {
                if (null != coll) {
                  sb.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(coll))), coll = cljs.core.next(coll), null != coll && sb.append(separator);
                } else {
                  return sb.toString();
                }
              }
            };
            clojure.string.join.cljs$lang$maxFixedArity = 2;
            clojure.string.upper_case = function(s) {
              return s.toUpperCase();
            };
            clojure.string.lower_case = function(s) {
              return s.toLowerCase();
            };
            clojure.string.capitalize = function(s) {
              return goog.string.capitalize(s);
            };
            clojure.string.pop_last_while_empty = function(v) {
              for (;;) {
                if ("" === cljs.core.peek(v)) {
                  v = cljs.core.pop(v);
                } else {
                  return v;
                }
              }
            };
            clojure.string.discard_trailing_if_needed = function(limit, v) {
              return 0 === limit && 1 < cljs.core.count(v) ? clojure.string.pop_last_while_empty(v) : v;
            };
            clojure.string.split_with_empty_regex = function(s, limit) {
              if (0 >= limit || limit >= 2 + cljs.core.count(s)) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.cons("", cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str, cljs.core.seq(s)))), "");
              }
              var pred__7461 = cljs.core._EQ__EQ_;
              if (cljs.core.truth_(pred__7461.cljs$core$IFn$_invoke$arity$2 ? pred__7461.cljs$core$IFn$_invoke$arity$2(1, limit) : pred__7461.call(null, 1, limit))) {
                return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
              }
              if (cljs.core.truth_(pred__7461.cljs$core$IFn$_invoke$arity$2 ? pred__7461.cljs$core$IFn$_invoke$arity$2(2, limit) : pred__7461.call(null, 2, limit))) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
              }
              limit -= 2;
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.cons("", cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str, cljs.core.seq(s))), 0, limit))), cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, limit));
            };
            clojure.string.split = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
              return clojure.string.split.cljs$core$IFn$_invoke$arity$3(s, re, 0);
            };
            clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
              return clojure.string.discard_trailing_if_needed(limit, "/(?:)/" === cljs.core.str.cljs$core$IFn$_invoke$arity$1(re) ? clojure.string.split_with_empty_regex(s, limit) : 1 > limit ? cljs.core.vec(cljs.core.str.cljs$core$IFn$_invoke$arity$1(s).split(re)) : function() {
                for (var s__$1 = s, limit__$1 = limit, parts = cljs.core.PersistentVector.EMPTY;;) {
                  if (1 === limit__$1) {
                    return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(parts, s__$1);
                  }
                  var m = cljs.core.re_find(re, s__$1);
                  if (null != m) {
                    var index = s__$1.indexOf(m);
                    m = s__$1.substring(index + cljs.core.count(m));
                    --limit__$1;
                    parts = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(parts, s__$1.substring(0, index));
                    s__$1 = m;
                  } else {
                    return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(parts, s__$1);
                  }
                }
              }());
            };
            clojure.string.split.cljs$lang$maxFixedArity = 3;
            clojure.string.split_lines = function(s) {
              return clojure.string.split.cljs$core$IFn$_invoke$arity$2(s, /\n|\r\n/);
            };
            clojure.string.trim = function(s) {
              return goog.string.trim(s);
            };
            clojure.string.triml = function(s) {
              return goog.string.trimLeft(s);
            };
            clojure.string.trimr = function(s) {
              return goog.string.trimRight(s);
            };
            clojure.string.trim_newline = function(s) {
              for (var index = s.length;;) {
                if (0 === index) {
                  return "";
                }
                var ch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(s, index - 1);
                if ("\n" === ch || "\r" === ch) {
                  --index;
                } else {
                  return s.substring(0, index);
                }
              }
            };
            clojure.string.blank_QMARK_ = function(s) {
              return goog.string.isEmptySafe(s);
            };
            clojure.string.escape = function(s, cmap) {
              for (var buffer = new goog.string.StringBuffer, length = s.length, index = 0;;) {
                if (length === index) {
                  return buffer.toString();
                }
                var ch = s.charAt(index), replacement = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cmap, ch);
                null != replacement ? buffer.append(cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement)) : buffer.append(ch);
                index += 1;
              }
            };
            clojure.string.index_of = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
              s = s.indexOf(value);
              return 0 > s ? null : s;
            };
            clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
              s = s.indexOf(value, from_index);
              return 0 > s ? null : s;
            };
            clojure.string.index_of.cljs$lang$maxFixedArity = 3;
            clojure.string.last_index_of = function(var_args) {
              switch(arguments.length) {
                case 2:
                  return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
                case 3:
                  return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
                default:
                  throw Error(["Invalid arity: ", cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join(""));
              }
            };
            clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
              s = s.lastIndexOf(value);
              return 0 > s ? null : s;
            };
            clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
              s = s.lastIndexOf(value, from_index);
              return 0 > s ? null : s;
            };
            clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
            clojure.string.starts_with_QMARK_ = function(s, substr) {
              return goog.string.startsWith(s, substr);
            };
            clojure.string.ends_with_QMARK_ = function(s, substr) {
              return goog.string.endsWith(s, substr);
            };
            clojure.string.includes_QMARK_ = function(s, substr) {
              return goog.string.contains(s, substr);
            };
            var shadow = {js:{}};
            shadow.js.shim = {};
            var module$shadow_js_shim_module$colors = {};
            shadow.js.shim.module$colors = require("colors");
            module$shadow_js_shim_module$colors.default = shadow.js.shim.module$colors;
            var module$shadow_js_shim_module$path = {};
            shadow.js.shim.module$path = require("path");
            module$shadow_js_shim_module$path.default = shadow.js.shim.module$path;
            var cscljs = {main:{}};
            cscljs.main.read_args = function(yargs) {
              return yargs.options(cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 3, [cljs$cst$keyword$n, new cljs.core.PersistentArrayMap(null, 3, [cljs$cst$keyword$alias, "name", cljs$cst$keyword$describe, "The name of the project", cljs$cst$keyword$type, "string"], null), cljs$cst$keyword$d, new cljs.core.PersistentArrayMap(null, 3, [cljs$cst$keyword$alias, "description", cljs$cst$keyword$describe, "The description of the project", cljs$cst$keyword$type, "string"], null), cljs$cst$keyword$i, 
              new cljs.core.PersistentArrayMap(null, 4, [cljs$cst$keyword$alias, "install", cljs$cst$keyword$describe, "If `true` it runs `npm install`. Use `--no-install` to skip.", cljs$cst$keyword$default, !0, cljs$cst$keyword$type, "boolean"], null)], null))).help().argv;
            };
            cscljs.main.__dirname = function() {
              return __dirname;
            };
            cscljs.main.make_ctx = function(argv, sh) {
              var G__5793 = new cljs.core.PersistentArrayMap(null, 6, [cljs$cst$keyword$name, function() {
                var or__4131__auto__ = argv.name;
                if (cljs.core.truth_(or__4131__auto__)) {
                  return or__4131__auto__;
                }
                or__4131__auto__ = argv._[0];
                return cljs.core.truth_(or__4131__auto__) ? or__4131__auto__ : "";
              }(), cljs$cst$keyword$description, argv.description, cljs$cst$keyword$argv, cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(argv), cljs$cst$keyword$cwd, sh.pwd().toString(), cljs$cst$keyword$templatesPath, shadow.js.shim.module$path.join(cscljs.main.__dirname(), "templates"), cljs$cst$keyword$sh, sh], null);
              return function(G__5793) {
                return function(m) {
                  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, cljs$cst$keyword$projectPath, shadow.js.shim.module$path.join(sh.pwd().toString(), cljs$cst$keyword$name.cljs$core$IFn$_invoke$arity$1(m)));
                };
              }()(G__5793);
            };
            cscljs.main.initProjectDir = function(p__5795) {
              var map__5796__$1 = null != p__5795 && (p__5795.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__5795.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__5795) : p__5795, sh$jscomp$0 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5796__$1, cljs$cst$keyword$sh), name$jscomp$0 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5796__$1, cljs$cst$keyword$name);
              clojure.string.blank_QMARK_(name$jscomp$0) && (sh$jscomp$0.echo(shadow.js.shim.module$colors.bgRed(shadow.js.shim.module$colors.white("The project name cannot be empty. Provide one using the -n/--name options."))), sh$jscomp$0.exit(1));
              cljs.core.truth_(cljs.core.some(function(map__5796, map__5796__$1, sh, name) {
                return function(p1__5794_SHARP_) {
                  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(name, p1__5794_SHARP_);
                };
              }(p__5795, map__5796__$1, sh$jscomp$0, name$jscomp$0), cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(sh$jscomp$0.ls(".")))) && (sh$jscomp$0.echo(shadow.js.shim.module$colors.bgRed(shadow.js.shim.module$colors.white(["The given directory '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(name$jscomp$0), "' already exists, please choose a different one."].join("")))), sh$jscomp$0.exit(1));
              return sh$jscomp$0.mkdir("-p", name$jscomp$0);
            };
            cscljs.main.copyTemplates = function(p__5798) {
              var map__5799__$1 = null != p__5798 && (p__5798.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__5798.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__5798) : p__5798;
              p__5798 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5799__$1, cljs$cst$keyword$sh);
              cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5799__$1, cljs$cst$keyword$name);
              var templatesPath = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5799__$1, cljs$cst$keyword$templatesPath);
              map__5799__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5799__$1, cljs$cst$keyword$projectPath);
              p__5798.echo(shadow.js.shim.module$colors.bold("\t:: Copying project files..."));
              p__5798.cp("-rf", shadow.js.shim.module$path.join(templatesPath, "*"), map__5799__$1);
              return p__5798.ShellString(clojure.string.join.cljs$core$IFn$_invoke$arity$2("\n", new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, "build/ node_modules/ target/ /yarn.lock .shadow-cljs/ .nrepl-port".split(" "), null))).to(shadow.js.shim.module$path.join(map__5799__$1, ".gitignore"));
            };
            cscljs.main.updatePackageJson = function(p__5801) {
              var map__5802__$1 = null != p__5801 && (p__5801.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__5801.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__5801) : p__5801;
              p__5801 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5802__$1, cljs$cst$keyword$sh);
              var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5802__$1, cljs$cst$keyword$name), description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5802__$1, cljs$cst$keyword$description);
              map__5802__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5802__$1, cljs$cst$keyword$projectPath);
              p__5801.echo(shadow.js.shim.module$colors.bold("\t:: Updating `package.json`..."));
              map__5802__$1 = shadow.js.shim.module$path.join(map__5802__$1, "package.json");
              var original = cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(JSON.parse(p__5801.cat(map__5802__$1).toString()));
              name = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(original, "name", name), "description", cljs.core.truth_(description) ? description : cljs.core.get.cljs$core$IFn$_invoke$arity$2(original, "description"));
              return p__5801.ShellString(JSON.stringify(cljs.core.clj__GT_js(name), null, 2)).to(map__5802__$1);
            };
            cscljs.main.installDependencies = function(p__5804) {
              var map__5805__$1 = null != p__5804 && (p__5804.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__5804.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__5804) : p__5804;
              p__5804 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5805__$1, cljs$cst$keyword$sh);
              var argv = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5805__$1, cljs$cst$keyword$argv), cwd = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5805__$1, cljs$cst$keyword$cwd);
              map__5805__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5805__$1, cljs$cst$keyword$projectPath);
              return cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$3(argv, "install", !1)) ? (p__5804.echo(shadow.js.shim.module$colors.bold("\t:: Installing NPM dependencies...")), p__5804.cd(map__5805__$1), p__5804.exec("npm install"), p__5804.cd(cwd)) : null;
            };
            cscljs.main.initGitRepository = function(p__5807) {
              var map__5808__$1 = null != p__5807 && (p__5807.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === p__5807.cljs$core$ISeq$) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, p__5807) : p__5807;
              p__5807 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5808__$1, cljs$cst$keyword$sh);
              var cwd = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5808__$1, cljs$cst$keyword$cwd);
              map__5808__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__5808__$1, cljs$cst$keyword$projectPath);
              return cljs.core.truth_(p__5807.which("git")) ? (p__5807.echo(shadow.js.shim.module$colors.bold("\t:: Initializing .git...")), p__5807.cd(map__5808__$1), p__5807.exec("git init ."), p__5807.exec("git add --all ."), p__5807.exec("git commit -m 'Initial commit'"), p__5807.cd(cwd)) : null;
            };
            cscljs.main._main = function(sh, yargs) {
              sh.config.silent = !0;
              sh.config.fatal = !0;
              yargs = cscljs.main.read_args(yargs);
              yargs = cscljs.main.make_ctx(yargs, sh);
              sh.echo(shadow.js.shim.module$colors.bold(shadow.js.shim.module$colors.green(":: Running the `create-shadow-cljs` initializer")));
              cscljs.main.initProjectDir(yargs);
              cscljs.main.copyTemplates(yargs);
              cscljs.main.updatePackageJson(yargs);
              cscljs.main.installDependencies(yargs);
              cscljs.main.initGitRepository(yargs);
              return sh.echo(shadow.js.shim.module$colors.bold(shadow.js.shim.module$colors.green([":: Successfully created '", cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs$cst$keyword$name.cljs$core$IFn$_invoke$arity$1(yargs)), "'!"].join(""))));
            };
            shadow.umd_helper = {};
            shadow.umd_helper.get_exports = function() {
              return {main:cscljs.main._main};
            };
            shadow$umd$export = shadow.umd_helper.get_exports();


              return shadow$umd$export;
            });

            var lib = /*#__PURE__*/Object.freeze({

            });

            //const pwd = require("shelljs/src/pwd");


            // console.log(pwd);
            // console.log(shelljs);
            // console.log(yargs);
            // console.log(pwd());

            const {main} = lib;
            main(shell, yargs$1);

            var js = {

            };

            return js;

}));
